Search.setIndex({"alltitles": {"ABS": [[1301, "abs"]], "ACOS": [[1304, "acos"]], "ACOSD": [[1304, "acosd"]], "ARRAY_AGG": [[1298, "array-agg"]], "ARRAY_CONTAINS": [[1298, "array-contains"]], "ARRAY_GET": [[1298, "array-get"]], "ARRAY_LENGTH": [[1298, "array-length"]], "ARRAY_LOWER": [[1298, "array-lower"]], "ARRAY_MEAN": [[1298, "array-mean"]], "ARRAY_REVERSE": [[1298, "array-reverse"]], "ARRAY_SUM": [[1298, "array-sum"]], "ARRAY_TO_STRING": [[1298, "array-to-string"]], "ARRAY_UNIQUE": [[1298, "array-unique"]], "ARRAY_UPPER": [[1298, "array-upper"]], "ASIN": [[1304, "asin"]], "ASIND": [[1304, "asind"]], "ATAN": [[1304, "atan"]], "ATAN2": [[1304, "atan2"]], "ATAN2D": [[1304, "atan2d"]], "ATAND": [[1304, "atand"]], "AVG": [[1297, "avg"]], "Aggregate": [[1297, "aggregate"]], "Aggregation": [[169, "aggregation"], [320, "aggregation"], [800, "aggregation"], [906, "aggregation"]], "Aliases": [[1297, null], [1297, null], [1301, null], [1301, null], [1302, null], [1302, null]], "Array": [[778, "array"], [1272, "array"], [1298, "array"]], "Asserts": [[1310, "asserts"]], "Attributes": [[308, "attributes"], [894, "attributes"], [1273, "attributes"]], "Available registrations": [[1, "available-registrations"]], "Avro": [[799, "avro"]], "BIT_LENGTH": [[1302, "bit-length"]], "Binary": [[779, "binary"], [792, "binary"], [1274, "binary"]], "Boolean": [[780, "boolean"], [1275, "boolean"]], "CAST": [[1305, "cast"]], "CBRT": [[1301, "cbrt"]], "CEIL": [[1301, "ceil"]], "COALESCE": [[1299, "coalesce"]], "CONCAT": [[1302, "concat"]], "CONCAT_WS": [[1302, "concat-ws"]], "COS": [[1304, "cos"]], "COSD": [[1304, "cosd"]], "COT": [[1304, "cot"]], "COTD": [[1304, "cotd"]], "COUNT": [[1297, "count"]], "CREATE TABLE": [[1309, "create-table"]], "CSV": [[799, "csv"]], "Categories": [[781, "categories"], [1276, "categories"]], "Clipboard": [[799, "clipboard"]], "Columns / names": [[783, "columns-names"]], "Comparison": [[792, "comparison"], [1284, "comparison"]], "Computation": [[309, "computation"], [784, "computation"], [1277, "computation"]], "Conditional": [[1299, "conditional"]], "Config": [[168, "config"]], "Config load, save, state": [[168, "config-load-save-state"]], "Config options": [[168, "config-options"]], "Conjunction": [[792, "conjunction"]], "Conversion": [[797, "conversion"]], "DATE": [[1302, "date"]], "DATE_PART": [[1303, "date-part"]], "DEGREES": [[1304, "degrees"]], "DISTINCT": [[1296, "distinct"]], "DIV": [[1301, "div"]], "DROP TABLES": [[1309, "drop-tables"]], "Data types": [[318, "data-types"]], "DataFrame": [[313, "dataframe"]], "DataType": [[318, "datatype"]], "Database": [[799, "database"]], "Delta Lake": [[799, "delta-lake"]], "Descriptive": [[310, "descriptive"], [895, "descriptive"], [1278, "descriptive"]], "Documentation": [[1307, null], [1307, null], [1307, null]], "ENDS_WITH": [[1302, "ends-with"]], "EXCEPT": [[1308, "except"]], "EXP": [[1301, "exp"]], "EXPLAIN": [[1309, "explain"]], "EXTRACT": [[1303, "extract"]], "Errors": [[319, "errors"]], "Examples": [[1, "examples"], [905, "examples"], [1310, "examples"]], "Excel / ODS": [[799, "excel-ods"]], "Exceptions": [[319, "exceptions"]], "Export": [[311, "export"], [1279, "export"]], "Expression SQL": [[1307, "expression-sql"]], "Expressions": [[786, "expressions"]], "Extending the API": [[1, "extending-the-api"]], "FIRST": [[1297, "first"]], "FLOOR": [[1301, "floor"]], "FROM": [[1296, "from"]], "Feather / IPC": [[799, "feather-ipc"]], "Frame SQL": [[1307, "frame-sql"]], "Functions": [[785, "functions"], [797, "functions"], [905, "functions"]], "GPUEngine": [[896, "gpuengine"]], "GREATEST": [[1299, "greatest"]], "GROUP BY": [[1296, "group-by"]], "Global SQL": [[1307, "global-sql"]], "GroupBy": [[312, "groupby"], [897, "groupby"]], "HAVING": [[1296, "having"]], "IF": [[1299, "if"]], "IFNULL": [[1299, "ifnull"]], "INITCAP": [[1302, "initcap"]], "INTERSECT": [[1308, "intersect"]], "Iceberg": [[799, "iceberg"]], "Importing": [[905, "importing"]], "InProcessQuery": [[898, "inprocessquery"]], "Index": [[0, "index"]], "Input/output": [[799, "input-output"]], "Introduction": [[1307, "introduction"]], "JOIN": [[1296, "join"]], "JSON": [[799, "json"]], "LAST": [[1297, "last"]], "LEAST": [[1299, "least"]], "LEFT": [[1302, "left"]], "LENGTH": [[1302, "length"]], "LIMIT": [[1296, "limit"]], "LN": [[1301, "ln"]], "LOG": [[1301, "log"]], "LOG10": [[1301, "log10"]], "LOG1P": [[1301, "log1p"]], "LOG2": [[1301, "log2"]], "LOWER": [[1302, "lower"]], "LTRIM": [[1302, "ltrim"]], "LazyFrame": [[899, "lazyframe"]], "List": [[787, "list"], [1281, "list"]], "MAX": [[1297, "max"]], "MEDIAN": [[1297, "median"]], "MIN": [[1297, "min"]], "MOD": [[1301, "mod"]], "Manipulation/selection": [[315, "manipulation-selection"], [790, "manipulation-selection"], [901, "manipulation-selection"], [1283, "manipulation-selection"]], "Math": [[1301, "math"]], "Meta": [[788, "meta"]], "Metadata": [[902, "metadata"]], "Methods": [[1307, "methods"]], "Miscellaneous": [[314, "miscellaneous"], [789, "miscellaneous"], [797, "miscellaneous"], [900, "miscellaneous"], [1282, "miscellaneous"]], "NULLIF": [[1299, "nullif"]], "Name": [[791, "name"]], "Nested": [[318, "nested"]], "Numeric": [[318, "numeric"], [792, "numeric"], [1284, "numeric"]], "OCTET_LENGTH": [[1302, "octet-length"]], "OFFSET": [[1296, "offset"]], "ORDER BY": [[1296, "order-by"]], "Operators": [[792, "operators"], [1284, "operators"]], "Other": [[318, "other"]], "PI": [[1301, "pi"]], "POW": [[1301, "pow"]], "Panic": [[319, "panic"]], "Parallelization": [[797, "parallelization"]], "Parametric testing": [[1310, "parametric-testing"]], "Parquet": [[799, "parquet"]], "Plot": [[316, "plot"], [1285, "plot"]], "Plugins": [[903, "plugins"]], "Polars strategies": [[1310, "polars-strategies"]], "Profiles": [[1310, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[799, "pyarrow-datasets"]], "Python API": [[1307, "python-api"]], "Python API reference": [[798, "python-api-reference"]], "Querying": [[1307, "querying"]], "RADIANS": [[1304, "radians"]], "REGEXP_LIKE": [[1302, "regexp-like"]], "REPLACE": [[1302, "replace"]], "REVERSE": [[1302, "reverse"]], "RIGHT": [[1302, "right"]], "ROUND": [[1301, "round"]], "RTRIM": [[1302, "rtrim"]], "Random": [[797, "random"]], "SELECT": [[1296, "select"]], "SHOW TABLES": [[1309, "show-tables"]], "SIGN": [[1301, "sign"]], "SIN": [[1304, "sin"]], "SIND": [[1304, "sind"]], "SQL Clauses": [[1296, "sql-clauses"]], "SQL Functions": [[1300, "sql-functions"]], "SQL Interface": [[1306, "sql-interface"]], "SQLContext": [[1307, "sqlcontext"]], "SQRT": [[1301, "sqrt"]], "STARTS_WITH": [[1302, "starts-with"]], "STDDEV": [[1297, "stddev"]], "STRFTIME": [[1303, "strftime"]], "STRPOS": [[1302, "strpos"]], "STRPTIME": [[1302, "strptime"]], "SUBSTRING": [[1302, "substring"]], "SUM": [[1297, "sum"]], "Schema": [[904, "schema"]], "Selectors": [[905, "selectors"]], "Serialization": [[314, "serialization"], [900, "serialization"]], "Series": [[1280, "series"]], "Set Operations": [[1308, "set-operations"]], "Set operations": [[905, "set-operations"]], "Strategy helpers": [[1310, "strategy-helpers"]], "String": [[318, "string"], [793, "string"], [1286, "string"], [1302, "string"]], "StringCache": [[797, "stringcache"]], "Struct": [[794, "struct"], [1287, "struct"]], "Style": [[317, "style"]], "TAN": [[1304, "tan"]], "TAND": [[1304, "tand"]], "TIMESTAMP": [[1302, "timestamp"]], "TRUNCATE": [[1309, "truncate"]], "TRY_CAST": [[1305, "try-cast"]], "Table Operations": [[1309, "table-operations"]], "Temporal": [[318, "temporal"], [795, "temporal"], [1288, "temporal"], [1303, "temporal"]], "Testing": [[1310, "testing"]], "Trigonometry": [[1304, "trigonometry"]], "Types": [[1305, "types"]], "UNION": [[1308, "union"]], "UNION ALL": [[1308, "union-all"]], "UNION BY NAME": [[1308, "union-by-name"]], "UNNEST": [[1298, "unnest"], [1309, "unnest"]], "UPPER": [[1302, "upper"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "VARIANCE": [[1297, "variance"]], "WHERE": [[1296, "where"]], "Warnings": [[319, "warnings"]], "Window": [[796, "window"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.__array__": [[170, "polars-dataframe-array"]], "polars.DataFrame.__arrow_c_stream__": [[171, "polars-dataframe-arrow-c-stream"]], "polars.DataFrame.__dataframe__": [[172, "polars-dataframe-dataframe"]], "polars.DataFrame.__getitem__": [[173, "polars-dataframe-getitem"]], "polars.DataFrame.approx_n_unique": [[174, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.bottom_k": [[175, "polars-dataframe-bottom-k"]], "polars.DataFrame.cast": [[176, "polars-dataframe-cast"]], "polars.DataFrame.clear": [[177, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[178, "polars-dataframe-clone"]], "polars.DataFrame.collect_schema": [[179, "polars-dataframe-collect-schema"]], "polars.DataFrame.columns": [[180, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[181, "polars-dataframe-corr"]], "polars.DataFrame.count": [[182, "polars-dataframe-count"]], "polars.DataFrame.describe": [[183, "polars-dataframe-describe"]], "polars.DataFrame.deserialize": [[184, "polars-dataframe-deserialize"]], "polars.DataFrame.drop": [[185, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[186, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[187, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[188, "polars-dataframe-dtypes"]], "polars.DataFrame.equals": [[189, "polars-dataframe-equals"]], "polars.DataFrame.estimated_size": [[190, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[191, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[192, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[193, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[194, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[195, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[196, "polars-dataframe-flags"]], "polars.DataFrame.fold": [[197, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[198, "polars-dataframe-gather-every"]], "polars.DataFrame.get_column": [[199, "polars-dataframe-get-column"]], "polars.DataFrame.get_column_index": [[200, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[201, "polars-dataframe-get-columns"]], "polars.DataFrame.glimpse": [[202, "polars-dataframe-glimpse"]], "polars.DataFrame.group_by": [[203, "polars-dataframe-group-by"]], "polars.DataFrame.group_by_dynamic": [[204, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[205, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[206, "polars-dataframe-head"]], "polars.DataFrame.height": [[207, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[208, "polars-dataframe-hstack"]], "polars.DataFrame.insert_column": [[209, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[210, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[211, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[212, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[213, "polars-dataframe-is-unique"]], "polars.DataFrame.item": [[214, "polars-dataframe-item"]], "polars.DataFrame.iter_columns": [[215, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[216, "polars-dataframe-iter-rows"]], "polars.DataFrame.iter_slices": [[217, "polars-dataframe-iter-slices"]], "polars.DataFrame.join": [[218, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[219, "polars-dataframe-join-asof"]], "polars.DataFrame.join_where": [[220, "polars-dataframe-join-where"]], "polars.DataFrame.lazy": [[221, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[222, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[223, "polars-dataframe-map-rows"]], "polars.DataFrame.max": [[224, "polars-dataframe-max"]], "polars.DataFrame.max_horizontal": [[225, "polars-dataframe-max-horizontal"]], "polars.DataFrame.mean": [[226, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[227, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.median": [[228, "polars-dataframe-median"]], "polars.DataFrame.melt": [[229, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[230, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[231, "polars-dataframe-min"]], "polars.DataFrame.min_horizontal": [[232, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_chunks": [[233, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[234, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[235, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[236, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[237, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[238, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[239, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[240, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[241, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[242, "polars-dataframe-rename"]], "polars.DataFrame.replace_column": [[243, "polars-dataframe-replace-column"]], "polars.DataFrame.reverse": [[244, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[245, "polars-dataframe-rolling"]], "polars.DataFrame.row": [[246, "polars-dataframe-row"]], "polars.DataFrame.rows": [[247, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[248, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sample": [[249, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[250, "polars-dataframe-schema"]], "polars.DataFrame.select": [[251, "polars-dataframe-select"]], "polars.DataFrame.select_seq": [[252, "polars-dataframe-select-seq"]], "polars.DataFrame.serialize": [[253, "polars-dataframe-serialize"]], "polars.DataFrame.set_sorted": [[254, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[255, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[256, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[257, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[258, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[259, "polars-dataframe-sort"]], "polars.DataFrame.sql": [[260, "polars-dataframe-sql"]], "polars.DataFrame.std": [[261, "polars-dataframe-std"]], "polars.DataFrame.sum": [[262, "polars-dataframe-sum"]], "polars.DataFrame.sum_horizontal": [[263, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.tail": [[264, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[265, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[266, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[267, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[268, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[269, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_jax": [[270, "polars-dataframe-to-jax"]], "polars.DataFrame.to_numpy": [[271, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[272, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[273, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[274, "polars-dataframe-to-struct"]], "polars.DataFrame.to_torch": [[275, "polars-dataframe-to-torch"]], "polars.DataFrame.top_k": [[276, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[277, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[278, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[279, "polars-dataframe-unnest"]], "polars.DataFrame.unpivot": [[280, "polars-dataframe-unpivot"]], "polars.DataFrame.unstack": [[281, "polars-dataframe-unstack"]], "polars.DataFrame.update": [[282, "polars-dataframe-update"]], "polars.DataFrame.upsample": [[283, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[284, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[285, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[286, "polars-dataframe-width"]], "polars.DataFrame.with_columns": [[287, "polars-dataframe-with-columns"]], "polars.DataFrame.with_columns_seq": [[288, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_row_count": [[289, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_row_index": [[290, "polars-dataframe-with-row-index"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Expr.abs": [[321, "polars-expr-abs"]], "polars.Expr.add": [[322, "polars-expr-add"]], "polars.Expr.agg_groups": [[323, "polars-expr-agg-groups"]], "polars.Expr.alias": [[324, "polars-expr-alias"]], "polars.Expr.all": [[325, "polars-expr-all"]], "polars.Expr.and_": [[326, "polars-expr-and"]], "polars.Expr.any": [[327, "polars-expr-any"]], "polars.Expr.append": [[328, "polars-expr-append"]], "polars.Expr.approx_n_unique": [[329, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[330, "polars-expr-arccos"]], "polars.Expr.arccosh": [[331, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[332, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[333, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[334, "polars-expr-arctan"]], "polars.Expr.arctanh": [[335, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[336, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[337, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[338, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[339, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[340, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[341, "polars-expr-arr-all"]], "polars.Expr.arr.any": [[342, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[343, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[344, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[345, "polars-expr-arr-contains"]], "polars.Expr.arr.count_matches": [[346, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[347, "polars-expr-arr-explode"]], "polars.Expr.arr.first": [[348, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[349, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[350, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[351, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[352, "polars-expr-arr-max"]], "polars.Expr.arr.median": [[353, "polars-expr-arr-median"]], "polars.Expr.arr.min": [[354, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[355, "polars-expr-arr-n-unique"]], "polars.Expr.arr.reverse": [[356, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[357, "polars-expr-arr-shift"]], "polars.Expr.arr.sort": [[358, "polars-expr-arr-sort"]], "polars.Expr.arr.std": [[359, "polars-expr-arr-std"]], "polars.Expr.arr.sum": [[360, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[361, "polars-expr-arr-to-list"]], "polars.Expr.arr.to_struct": [[362, "polars-expr-arr-to-struct"]], "polars.Expr.arr.unique": [[363, "polars-expr-arr-unique"]], "polars.Expr.arr.var": [[364, "polars-expr-arr-var"]], "polars.Expr.backward_fill": [[365, "polars-expr-backward-fill"]], "polars.Expr.bin.contains": [[366, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[367, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[368, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[369, "polars-expr-bin-ends-with"]], "polars.Expr.bin.size": [[370, "polars-expr-bin-size"]], "polars.Expr.bin.starts_with": [[371, "polars-expr-bin-starts-with"]], "polars.Expr.bitwise_and": [[372, "polars-expr-bitwise-and"]], "polars.Expr.bitwise_count_ones": [[373, "polars-expr-bitwise-count-ones"]], "polars.Expr.bitwise_count_zeros": [[374, "polars-expr-bitwise-count-zeros"]], "polars.Expr.bitwise_leading_ones": [[375, "polars-expr-bitwise-leading-ones"]], "polars.Expr.bitwise_or": [[376, "polars-expr-bitwise-or"]], "polars.Expr.bitwise_trailing_ones": [[377, "polars-expr-bitwise-trailing-ones"]], "polars.Expr.bitwise_trailing_zeros": [[378, "polars-expr-bitwise-trailing-zeros"]], "polars.Expr.bitwise_xor": [[379, "polars-expr-bitwise-xor"]], "polars.Expr.bottom_k": [[380, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[381, "polars-expr-bottom-k-by"]], "polars.Expr.cast": [[382, "polars-expr-cast"]], "polars.Expr.cat.get_categories": [[383, "polars-expr-cat-get-categories"]], "polars.Expr.cbrt": [[384, "polars-expr-cbrt"]], "polars.Expr.ceil": [[385, "polars-expr-ceil"]], "polars.Expr.clip": [[386, "polars-expr-clip"]], "polars.Expr.cos": [[387, "polars-expr-cos"]], "polars.Expr.cosh": [[388, "polars-expr-cosh"]], "polars.Expr.cot": [[389, "polars-expr-cot"]], "polars.Expr.count": [[390, "polars-expr-count"]], "polars.Expr.cum_count": [[391, "polars-expr-cum-count"]], "polars.Expr.cum_max": [[392, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[393, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[394, "polars-expr-cum-prod"]], "polars.Expr.cum_sum": [[395, "polars-expr-cum-sum"]], "polars.Expr.cumulative_eval": [[396, "polars-expr-cumulative-eval"]], "polars.Expr.cut": [[397, "polars-expr-cut"]], "polars.Expr.degrees": [[398, "polars-expr-degrees"]], "polars.Expr.deserialize": [[399, "polars-expr-deserialize"]], "polars.Expr.diff": [[400, "polars-expr-diff"]], "polars.Expr.dot": [[401, "polars-expr-dot"]], "polars.Expr.drop_nans": [[402, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[403, "polars-expr-drop-nulls"]], "polars.Expr.dt.add_business_days": [[404, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[405, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.cast_time_unit": [[406, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.century": [[407, "polars-expr-dt-century"]], "polars.Expr.dt.combine": [[408, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[409, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.date": [[410, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[411, "polars-expr-dt-datetime"]], "polars.Expr.dt.day": [[412, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[413, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[414, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[415, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[416, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.iso_year": [[417, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[418, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millennium": [[419, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[420, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[421, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[422, "polars-expr-dt-month"]], "polars.Expr.dt.month_end": [[423, "polars-expr-dt-month-end"]], "polars.Expr.dt.month_start": [[424, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanosecond": [[425, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[426, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[427, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[428, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[429, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[430, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[431, "polars-expr-dt-second"]], "polars.Expr.dt.strftime": [[432, "polars-expr-dt-strftime"]], "polars.Expr.dt.time": [[433, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[434, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[435, "polars-expr-dt-to-string"]], "polars.Expr.dt.total_days": [[436, "polars-expr-dt-total-days"]], "polars.Expr.dt.total_hours": [[437, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[438, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_milliseconds": [[439, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[440, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_nanoseconds": [[441, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_seconds": [[442, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.truncate": [[443, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[444, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[445, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[446, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[447, "polars-expr-dt-year"]], "polars.Expr.entropy": [[448, "polars-expr-entropy"]], "polars.Expr.eq": [[449, "polars-expr-eq"]], "polars.Expr.eq_missing": [[450, "polars-expr-eq-missing"]], "polars.Expr.ewm_mean": [[451, "polars-expr-ewm-mean"]], "polars.Expr.ewm_mean_by": [[452, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_std": [[453, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[454, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[455, "polars-expr-exclude"]], "polars.Expr.exp": [[456, "polars-expr-exp"]], "polars.Expr.explode": [[457, "polars-expr-explode"]], "polars.Expr.extend_constant": [[458, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[459, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[460, "polars-expr-fill-null"]], "polars.Expr.filter": [[461, "polars-expr-filter"]], "polars.Expr.first": [[462, "polars-expr-first"]], "polars.Expr.flatten": [[463, "polars-expr-flatten"]], "polars.Expr.floor": [[464, "polars-expr-floor"]], "polars.Expr.floordiv": [[465, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[466, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[467, "polars-expr-from-json"]], "polars.Expr.gather": [[468, "polars-expr-gather"]], "polars.Expr.gather_every": [[469, "polars-expr-gather-every"]], "polars.Expr.ge": [[470, "polars-expr-ge"]], "polars.Expr.get": [[471, "polars-expr-get"]], "polars.Expr.gt": [[472, "polars-expr-gt"]], "polars.Expr.has_nulls": [[473, "polars-expr-has-nulls"]], "polars.Expr.hash": [[474, "polars-expr-hash"]], "polars.Expr.head": [[475, "polars-expr-head"]], "polars.Expr.hist": [[476, "polars-expr-hist"]], "polars.Expr.implode": [[477, "polars-expr-implode"]], "polars.Expr.inspect": [[478, "polars-expr-inspect"]], "polars.Expr.interpolate": [[479, "polars-expr-interpolate"]], "polars.Expr.interpolate_by": [[480, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[481, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[482, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[483, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[484, "polars-expr-is-first-distinct"]], "polars.Expr.is_in": [[485, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[486, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[487, "polars-expr-is-last-distinct"]], "polars.Expr.is_nan": [[488, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[489, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[490, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[491, "polars-expr-is-null"]], "polars.Expr.is_unique": [[492, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[493, "polars-expr-kurtosis"]], "polars.Expr.last": [[494, "polars-expr-last"]], "polars.Expr.le": [[495, "polars-expr-le"]], "polars.Expr.len": [[496, "polars-expr-len"]], "polars.Expr.limit": [[497, "polars-expr-limit"]], "polars.Expr.list.all": [[498, "polars-expr-list-all"]], "polars.Expr.list.any": [[499, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[500, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[501, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[502, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[503, "polars-expr-list-contains"]], "polars.Expr.list.count_matches": [[504, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[505, "polars-expr-list-diff"]], "polars.Expr.list.drop_nulls": [[506, "polars-expr-list-drop-nulls"]], "polars.Expr.list.eval": [[507, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[508, "polars-expr-list-explode"]], "polars.Expr.list.first": [[509, "polars-expr-list-first"]], "polars.Expr.list.gather": [[510, "polars-expr-list-gather"]], "polars.Expr.list.gather_every": [[511, "polars-expr-list-gather-every"]], "polars.Expr.list.get": [[512, "polars-expr-list-get"]], "polars.Expr.list.head": [[513, "polars-expr-list-head"]], "polars.Expr.list.join": [[514, "polars-expr-list-join"]], "polars.Expr.list.last": [[515, "polars-expr-list-last"]], "polars.Expr.list.len": [[516, "polars-expr-list-len"]], "polars.Expr.list.max": [[517, "polars-expr-list-max"]], "polars.Expr.list.mean": [[518, "polars-expr-list-mean"]], "polars.Expr.list.median": [[519, "polars-expr-list-median"]], "polars.Expr.list.min": [[520, "polars-expr-list-min"]], "polars.Expr.list.n_unique": [[521, "polars-expr-list-n-unique"]], "polars.Expr.list.reverse": [[522, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[523, "polars-expr-list-sample"]], "polars.Expr.list.set_difference": [[524, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[525, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_symmetric_difference": [[526, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[527, "polars-expr-list-set-union"]], "polars.Expr.list.shift": [[528, "polars-expr-list-shift"]], "polars.Expr.list.slice": [[529, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[530, "polars-expr-list-sort"]], "polars.Expr.list.std": [[531, "polars-expr-list-std"]], "polars.Expr.list.sum": [[532, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[533, "polars-expr-list-tail"]], "polars.Expr.list.to_array": [[534, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[535, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[536, "polars-expr-list-unique"]], "polars.Expr.list.var": [[537, "polars-expr-list-var"]], "polars.Expr.log": [[538, "polars-expr-log"]], "polars.Expr.log10": [[539, "polars-expr-log10"]], "polars.Expr.log1p": [[540, "polars-expr-log1p"]], "polars.Expr.lower_bound": [[541, "polars-expr-lower-bound"]], "polars.Expr.lt": [[542, "polars-expr-lt"]], "polars.Expr.map_batches": [[543, "polars-expr-map-batches"]], "polars.Expr.map_elements": [[544, "polars-expr-map-elements"]], "polars.Expr.max": [[545, "polars-expr-max"]], "polars.Expr.mean": [[546, "polars-expr-mean"]], "polars.Expr.median": [[547, "polars-expr-median"]], "polars.Expr.meta.eq": [[548, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[549, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.is_column_selection": [[550, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.is_regex_projection": [[551, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[552, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[553, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[554, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[555, "polars-expr-meta-root-names"]], "polars.Expr.meta.serialize": [[556, "polars-expr-meta-serialize"]], "polars.Expr.meta.tree_format": [[557, "polars-expr-meta-tree-format"]], "polars.Expr.meta.undo_aliases": [[558, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[559, "polars-expr-meta-write-json"]], "polars.Expr.min": [[560, "polars-expr-min"]], "polars.Expr.mod": [[561, "polars-expr-mod"]], "polars.Expr.mode": [[562, "polars-expr-mode"]], "polars.Expr.mul": [[563, "polars-expr-mul"]], "polars.Expr.n_unique": [[564, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[565, "polars-expr-name-keep"]], "polars.Expr.name.map": [[566, "polars-expr-name-map"]], "polars.Expr.name.map_fields": [[567, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix": [[568, "polars-expr-name-prefix"]], "polars.Expr.name.prefix_fields": [[569, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[570, "polars-expr-name-suffix"]], "polars.Expr.name.suffix_fields": [[571, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_lowercase": [[572, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[573, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_max": [[574, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[575, "polars-expr-nan-min"]], "polars.Expr.ne": [[576, "polars-expr-ne"]], "polars.Expr.ne_missing": [[577, "polars-expr-ne-missing"]], "polars.Expr.neg": [[578, "polars-expr-neg"]], "polars.Expr.not_": [[579, "polars-expr-not"]], "polars.Expr.null_count": [[580, "polars-expr-null-count"]], "polars.Expr.or_": [[581, "polars-expr-or"]], "polars.Expr.over": [[582, "polars-expr-over"]], "polars.Expr.pct_change": [[583, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[584, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[585, "polars-expr-peak-min"]], "polars.Expr.pipe": [[586, "polars-expr-pipe"]], "polars.Expr.pow": [[587, "polars-expr-pow"]], "polars.Expr.product": [[588, "polars-expr-product"]], "polars.Expr.qcut": [[589, "polars-expr-qcut"]], "polars.Expr.quantile": [[590, "polars-expr-quantile"]], "polars.Expr.radians": [[591, "polars-expr-radians"]], "polars.Expr.rank": [[592, "polars-expr-rank"]], "polars.Expr.rechunk": [[593, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[594, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[595, "polars-expr-repeat-by"]], "polars.Expr.replace": [[596, "polars-expr-replace"]], "polars.Expr.replace_strict": [[597, "polars-expr-replace-strict"]], "polars.Expr.reshape": [[598, "polars-expr-reshape"]], "polars.Expr.reverse": [[599, "polars-expr-reverse"]], "polars.Expr.rle": [[600, "polars-expr-rle"]], "polars.Expr.rle_id": [[601, "polars-expr-rle-id"]], "polars.Expr.rolling": [[602, "polars-expr-rolling"]], "polars.Expr.rolling_map": [[603, "polars-expr-rolling-map"]], "polars.Expr.rolling_max": [[604, "polars-expr-rolling-max"]], "polars.Expr.rolling_max_by": [[605, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_mean": [[606, "polars-expr-rolling-mean"]], "polars.Expr.rolling_mean_by": [[607, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[608, "polars-expr-rolling-median"]], "polars.Expr.rolling_median_by": [[609, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_min": [[610, "polars-expr-rolling-min"]], "polars.Expr.rolling_min_by": [[611, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_quantile": [[612, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_quantile_by": [[613, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_skew": [[614, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[615, "polars-expr-rolling-std"]], "polars.Expr.rolling_std_by": [[616, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_sum": [[617, "polars-expr-rolling-sum"]], "polars.Expr.rolling_sum_by": [[618, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_var": [[619, "polars-expr-rolling-var"]], "polars.Expr.rolling_var_by": [[620, "polars-expr-rolling-var-by"]], "polars.Expr.round": [[621, "polars-expr-round"]], "polars.Expr.round_sig_figs": [[622, "polars-expr-round-sig-figs"]], "polars.Expr.sample": [[623, "polars-expr-sample"]], "polars.Expr.search_sorted": [[624, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[625, "polars-expr-set-sorted"]], "polars.Expr.shift": [[626, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[627, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[628, "polars-expr-shuffle"]], "polars.Expr.sign": [[629, "polars-expr-sign"]], "polars.Expr.sin": [[630, "polars-expr-sin"]], "polars.Expr.sinh": [[631, "polars-expr-sinh"]], "polars.Expr.skew": [[632, "polars-expr-skew"]], "polars.Expr.slice": [[633, "polars-expr-slice"]], "polars.Expr.sort": [[634, "polars-expr-sort"]], "polars.Expr.sort_by": [[635, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[636, "polars-expr-sqrt"]], "polars.Expr.std": [[637, "polars-expr-std"]], "polars.Expr.str.concat": [[638, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[639, "polars-expr-str-contains"]], "polars.Expr.str.contains_any": [[640, "polars-expr-str-contains-any"]], "polars.Expr.str.count_matches": [[641, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[642, "polars-expr-str-decode"]], "polars.Expr.str.encode": [[643, "polars-expr-str-encode"]], "polars.Expr.str.ends_with": [[644, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[645, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[646, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[647, "polars-expr-str-extract-all"]], "polars.Expr.str.extract_groups": [[648, "polars-expr-str-extract-groups"]], "polars.Expr.str.extract_many": [[649, "polars-expr-str-extract-many"]], "polars.Expr.str.find": [[650, "polars-expr-str-find"]], "polars.Expr.str.head": [[651, "polars-expr-str-head"]], "polars.Expr.str.join": [[652, "polars-expr-str-join"]], "polars.Expr.str.json_decode": [[653, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[654, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_bytes": [[655, "polars-expr-str-len-bytes"]], "polars.Expr.str.len_chars": [[656, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_end": [[657, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[658, "polars-expr-str-pad-start"]], "polars.Expr.str.replace": [[659, "polars-expr-str-replace"]], "polars.Expr.str.replace_all": [[660, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[661, "polars-expr-str-replace-many"]], "polars.Expr.str.reverse": [[662, "polars-expr-str-reverse"]], "polars.Expr.str.slice": [[663, "polars-expr-str-slice"]], "polars.Expr.str.split": [[664, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[665, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[666, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[667, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_chars": [[668, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_chars_end": [[669, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars_start": [[670, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[671, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_suffix": [[672, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[673, "polars-expr-str-strptime"]], "polars.Expr.str.tail": [[674, "polars-expr-str-tail"]], "polars.Expr.str.to_date": [[675, "polars-expr-str-to-date"]], "polars.Expr.str.to_datetime": [[676, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[677, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[678, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[679, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[680, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[681, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_uppercase": [[682, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[683, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[684, "polars-expr-struct-field"]], "polars.Expr.struct.json_encode": [[685, "polars-expr-struct-json-encode"]], "polars.Expr.struct.rename_fields": [[686, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.with_fields": [[687, "polars-expr-struct-with-fields"]], "polars.Expr.sub": [[688, "polars-expr-sub"]], "polars.Expr.sum": [[689, "polars-expr-sum"]], "polars.Expr.tail": [[690, "polars-expr-tail"]], "polars.Expr.tan": [[691, "polars-expr-tan"]], "polars.Expr.tanh": [[692, "polars-expr-tanh"]], "polars.Expr.to_physical": [[693, "polars-expr-to-physical"]], "polars.Expr.top_k": [[694, "polars-expr-top-k"]], "polars.Expr.top_k_by": [[695, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[696, "polars-expr-truediv"]], "polars.Expr.unique": [[697, "polars-expr-unique"]], "polars.Expr.unique_counts": [[698, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[699, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[700, "polars-expr-value-counts"]], "polars.Expr.var": [[701, "polars-expr-var"]], "polars.Expr.where": [[702, "polars-expr-where"]], "polars.Expr.xor": [[703, "polars-expr-xor"]], "polars.LazyFrame.approx_n_unique": [[801, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[802, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[803, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[804, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[805, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[806, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[807, "polars-lazyframe-collect"]], "polars.LazyFrame.collect_async": [[808, "polars-lazyframe-collect-async"]], "polars.LazyFrame.collect_schema": [[809, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.columns": [[810, "polars-lazyframe-columns"]], "polars.LazyFrame.count": [[811, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[812, "polars-lazyframe-describe"]], "polars.LazyFrame.deserialize": [[813, "polars-lazyframe-deserialize"]], "polars.LazyFrame.drop": [[814, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[815, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[816, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explain": [[817, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[818, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[819, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[820, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[821, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[822, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[823, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[824, "polars-lazyframe-group-by"]], "polars.LazyFrame.group_by_dynamic": [[825, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.head": [[826, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[827, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[828, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[829, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[830, "polars-lazyframe-join-asof"]], "polars.LazyFrame.join_where": [[831, "polars-lazyframe-join-where"]], "polars.LazyFrame.last": [[832, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[833, "polars-lazyframe-lazy"]], "polars.LazyFrame.limit": [[834, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[835, "polars-lazyframe-map-batches"]], "polars.LazyFrame.max": [[836, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[837, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[838, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[839, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[840, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.min": [[841, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[842, "polars-lazyframe-null-count"]], "polars.LazyFrame.pipe": [[843, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[844, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[845, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[846, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[847, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[848, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[849, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[850, "polars-lazyframe-select"]], "polars.LazyFrame.select_seq": [[851, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[852, "polars-lazyframe-serialize"]], "polars.LazyFrame.set_sorted": [[853, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[854, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[855, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.slice": [[856, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[857, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[858, "polars-lazyframe-sql"]], "polars.LazyFrame.std": [[859, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[860, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[861, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[862, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[863, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[864, "polars-lazyframe-unnest"]], "polars.LazyFrame.unpivot": [[865, "polars-lazyframe-unpivot"]], "polars.LazyFrame.update": [[866, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[867, "polars-lazyframe-var"]], "polars.LazyFrame.width": [[868, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[869, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_columns_seq": [[870, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_context": [[871, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[872, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[873, "polars-lazyframe-with-row-index"]], "polars.SQLContext.execute": [[1289, "polars-sqlcontext-execute"]], "polars.SQLContext.execute_global": [[1290, "polars-sqlcontext-execute-global"]], "polars.SQLContext.register": [[1291, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[1292, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[1293, "polars-sqlcontext-register-many"]], "polars.SQLContext.tables": [[1294, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[1295, "polars-sqlcontext-unregister"]], "polars.Series.__array__": [[907, "polars-series-array"]], "polars.Series.__arrow_c_stream__": [[908, "polars-series-arrow-c-stream"]], "polars.Series.__getitem__": [[909, "polars-series-getitem"]], "polars.Series.abs": [[910, "polars-series-abs"]], "polars.Series.alias": [[911, "polars-series-alias"]], "polars.Series.all": [[912, "polars-series-all"]], "polars.Series.any": [[913, "polars-series-any"]], "polars.Series.append": [[914, "polars-series-append"]], "polars.Series.arccos": [[915, "polars-series-arccos"]], "polars.Series.arccosh": [[916, "polars-series-arccosh"]], "polars.Series.arcsin": [[917, "polars-series-arcsin"]], "polars.Series.arcsinh": [[918, "polars-series-arcsinh"]], "polars.Series.arctan": [[919, "polars-series-arctan"]], "polars.Series.arctanh": [[920, "polars-series-arctanh"]], "polars.Series.arg_max": [[921, "polars-series-arg-max"]], "polars.Series.arg_min": [[922, "polars-series-arg-min"]], "polars.Series.arg_sort": [[923, "polars-series-arg-sort"]], "polars.Series.arg_true": [[924, "polars-series-arg-true"]], "polars.Series.arg_unique": [[925, "polars-series-arg-unique"]], "polars.Series.arr.all": [[926, "polars-series-arr-all"]], "polars.Series.arr.any": [[927, "polars-series-arr-any"]], "polars.Series.arr.arg_max": [[928, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[929, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[930, "polars-series-arr-contains"]], "polars.Series.arr.count_matches": [[931, "polars-series-arr-count-matches"]], "polars.Series.arr.explode": [[932, "polars-series-arr-explode"]], "polars.Series.arr.first": [[933, "polars-series-arr-first"]], "polars.Series.arr.get": [[934, "polars-series-arr-get"]], "polars.Series.arr.join": [[935, "polars-series-arr-join"]], "polars.Series.arr.last": [[936, "polars-series-arr-last"]], "polars.Series.arr.max": [[937, "polars-series-arr-max"]], "polars.Series.arr.median": [[938, "polars-series-arr-median"]], "polars.Series.arr.min": [[939, "polars-series-arr-min"]], "polars.Series.arr.n_unique": [[940, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[941, "polars-series-arr-reverse"]], "polars.Series.arr.shift": [[942, "polars-series-arr-shift"]], "polars.Series.arr.sort": [[943, "polars-series-arr-sort"]], "polars.Series.arr.std": [[944, "polars-series-arr-std"]], "polars.Series.arr.sum": [[945, "polars-series-arr-sum"]], "polars.Series.arr.to_list": [[946, "polars-series-arr-to-list"]], "polars.Series.arr.to_struct": [[947, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[948, "polars-series-arr-unique"]], "polars.Series.arr.var": [[949, "polars-series-arr-var"]], "polars.Series.bin.contains": [[950, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[951, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[952, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[953, "polars-series-bin-ends-with"]], "polars.Series.bin.size": [[954, "polars-series-bin-size"]], "polars.Series.bin.starts_with": [[955, "polars-series-bin-starts-with"]], "polars.Series.bitwise_and": [[956, "polars-series-bitwise-and"]], "polars.Series.bitwise_count_ones": [[957, "polars-series-bitwise-count-ones"]], "polars.Series.bitwise_count_zeros": [[958, "polars-series-bitwise-count-zeros"]], "polars.Series.bitwise_leading_ones": [[959, "polars-series-bitwise-leading-ones"]], "polars.Series.bitwise_or": [[960, "polars-series-bitwise-or"]], "polars.Series.bitwise_trailing_ones": [[961, "polars-series-bitwise-trailing-ones"]], "polars.Series.bitwise_trailing_zeros": [[962, "polars-series-bitwise-trailing-zeros"]], "polars.Series.bitwise_xor": [[963, "polars-series-bitwise-xor"]], "polars.Series.bottom_k": [[964, "polars-series-bottom-k"]], "polars.Series.cast": [[965, "polars-series-cast"]], "polars.Series.cat.get_categories": [[966, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[967, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[968, "polars-series-cat-to-local"]], "polars.Series.cat.uses_lexical_ordering": [[969, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cbrt": [[970, "polars-series-cbrt"]], "polars.Series.ceil": [[971, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[972, "polars-series-chunk-lengths"]], "polars.Series.clear": [[973, "polars-series-clear"]], "polars.Series.clip": [[974, "polars-series-clip"]], "polars.Series.clone": [[975, "polars-series-clone"]], "polars.Series.cos": [[976, "polars-series-cos"]], "polars.Series.cosh": [[977, "polars-series-cosh"]], "polars.Series.cot": [[978, "polars-series-cot"]], "polars.Series.count": [[979, "polars-series-count"]], "polars.Series.cum_count": [[980, "polars-series-cum-count"]], "polars.Series.cum_max": [[981, "polars-series-cum-max"]], "polars.Series.cum_min": [[982, "polars-series-cum-min"]], "polars.Series.cum_prod": [[983, "polars-series-cum-prod"]], "polars.Series.cum_sum": [[984, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[985, "polars-series-cumulative-eval"]], "polars.Series.cut": [[986, "polars-series-cut"]], "polars.Series.describe": [[987, "polars-series-describe"]], "polars.Series.diff": [[988, "polars-series-diff"]], "polars.Series.dot": [[989, "polars-series-dot"]], "polars.Series.drop_nans": [[990, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[991, "polars-series-drop-nulls"]], "polars.Series.dt.add_business_days": [[992, "polars-series-dt-add-business-days"]], "polars.Series.dt.base_utc_offset": [[993, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[994, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.century": [[995, "polars-series-dt-century"]], "polars.Series.dt.combine": [[996, "polars-series-dt-combine"]], "polars.Series.dt.convert_time_zone": [[997, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.date": [[998, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[999, "polars-series-dt-datetime"]], "polars.Series.dt.day": [[1000, "polars-series-dt-day"]], "polars.Series.dt.dst_offset": [[1001, "polars-series-dt-dst-offset"]], "polars.Series.dt.epoch": [[1002, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[1003, "polars-series-dt-hour"]], "polars.Series.dt.is_leap_year": [[1004, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[1005, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[1006, "polars-series-dt-max"]], "polars.Series.dt.mean": [[1007, "polars-series-dt-mean"]], "polars.Series.dt.median": [[1008, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[1009, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[1010, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[1011, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[1012, "polars-series-dt-min"]], "polars.Series.dt.minute": [[1013, "polars-series-dt-minute"]], "polars.Series.dt.month": [[1014, "polars-series-dt-month"]], "polars.Series.dt.month_end": [[1015, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[1016, "polars-series-dt-month-start"]], "polars.Series.dt.nanosecond": [[1017, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[1018, "polars-series-dt-offset-by"]], "polars.Series.dt.ordinal_day": [[1019, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[1020, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[1021, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.round": [[1022, "polars-series-dt-round"]], "polars.Series.dt.second": [[1023, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[1024, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[1025, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[1026, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[1027, "polars-series-dt-to-string"]], "polars.Series.dt.total_days": [[1028, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[1029, "polars-series-dt-total-hours"]], "polars.Series.dt.total_microseconds": [[1030, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[1031, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1032, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[1033, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.total_seconds": [[1034, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[1035, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[1036, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[1037, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1038, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1039, "polars-series-dt-year"]], "polars.Series.dtype": [[1040, "polars-series-dtype"]], "polars.Series.entropy": [[1041, "polars-series-entropy"]], "polars.Series.eq": [[1042, "polars-series-eq"]], "polars.Series.eq_missing": [[1043, "polars-series-eq-missing"]], "polars.Series.equals": [[1044, "polars-series-equals"]], "polars.Series.estimated_size": [[1045, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[1046, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1047, "polars-series-ewm-mean-by"]], "polars.Series.ewm_std": [[1048, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[1049, "polars-series-ewm-var"]], "polars.Series.exp": [[1050, "polars-series-exp"]], "polars.Series.explode": [[1051, "polars-series-explode"]], "polars.Series.extend": [[1052, "polars-series-extend"]], "polars.Series.extend_constant": [[1053, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[1054, "polars-series-fill-nan"]], "polars.Series.fill_null": [[1055, "polars-series-fill-null"]], "polars.Series.filter": [[1056, "polars-series-filter"]], "polars.Series.flags": [[1057, "polars-series-flags"]], "polars.Series.floor": [[1058, "polars-series-floor"]], "polars.Series.gather": [[1059, "polars-series-gather"]], "polars.Series.gather_every": [[1060, "polars-series-gather-every"]], "polars.Series.ge": [[1061, "polars-series-ge"]], "polars.Series.get_chunks": [[1062, "polars-series-get-chunks"]], "polars.Series.gt": [[1063, "polars-series-gt"]], "polars.Series.has_nulls": [[1064, "polars-series-has-nulls"]], "polars.Series.has_validity": [[1065, "polars-series-has-validity"]], "polars.Series.hash": [[1066, "polars-series-hash"]], "polars.Series.head": [[1067, "polars-series-head"]], "polars.Series.hist": [[1068, "polars-series-hist"]], "polars.Series.implode": [[1069, "polars-series-implode"]], "polars.Series.interpolate": [[1070, "polars-series-interpolate"]], "polars.Series.interpolate_by": [[1071, "polars-series-interpolate-by"]], "polars.Series.is_between": [[1072, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1073, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1074, "polars-series-is-empty"]], "polars.Series.is_finite": [[1075, "polars-series-is-finite"]], "polars.Series.is_first_distinct": [[1076, "polars-series-is-first-distinct"]], "polars.Series.is_in": [[1077, "polars-series-is-in"]], "polars.Series.is_infinite": [[1078, "polars-series-is-infinite"]], "polars.Series.is_last_distinct": [[1079, "polars-series-is-last-distinct"]], "polars.Series.is_nan": [[1080, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[1081, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1082, "polars-series-is-not-null"]], "polars.Series.is_null": [[1083, "polars-series-is-null"]], "polars.Series.is_sorted": [[1084, "polars-series-is-sorted"]], "polars.Series.is_unique": [[1085, "polars-series-is-unique"]], "polars.Series.item": [[1086, "polars-series-item"]], "polars.Series.kurtosis": [[1087, "polars-series-kurtosis"]], "polars.Series.le": [[1088, "polars-series-le"]], "polars.Series.len": [[1089, "polars-series-len"]], "polars.Series.limit": [[1090, "polars-series-limit"]], "polars.Series.list.all": [[1091, "polars-series-list-all"]], "polars.Series.list.any": [[1092, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1093, "polars-series-list-arg-max"]], "polars.Series.list.arg_min": [[1094, "polars-series-list-arg-min"]], "polars.Series.list.concat": [[1095, "polars-series-list-concat"]], "polars.Series.list.contains": [[1096, "polars-series-list-contains"]], "polars.Series.list.count_matches": [[1097, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1098, "polars-series-list-diff"]], "polars.Series.list.drop_nulls": [[1099, "polars-series-list-drop-nulls"]], "polars.Series.list.eval": [[1100, "polars-series-list-eval"]], "polars.Series.list.explode": [[1101, "polars-series-list-explode"]], "polars.Series.list.first": [[1102, "polars-series-list-first"]], "polars.Series.list.gather": [[1103, "polars-series-list-gather"]], "polars.Series.list.gather_every": [[1104, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1105, "polars-series-list-get"]], "polars.Series.list.head": [[1106, "polars-series-list-head"]], "polars.Series.list.join": [[1107, "polars-series-list-join"]], "polars.Series.list.last": [[1108, "polars-series-list-last"]], "polars.Series.list.len": [[1109, "polars-series-list-len"]], "polars.Series.list.max": [[1110, "polars-series-list-max"]], "polars.Series.list.mean": [[1111, "polars-series-list-mean"]], "polars.Series.list.median": [[1112, "polars-series-list-median"]], "polars.Series.list.min": [[1113, "polars-series-list-min"]], "polars.Series.list.n_unique": [[1114, "polars-series-list-n-unique"]], "polars.Series.list.reverse": [[1115, "polars-series-list-reverse"]], "polars.Series.list.sample": [[1116, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1117, "polars-series-list-set-difference"]], "polars.Series.list.set_intersection": [[1118, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1119, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[1120, "polars-series-list-set-union"]], "polars.Series.list.shift": [[1121, "polars-series-list-shift"]], "polars.Series.list.slice": [[1122, "polars-series-list-slice"]], "polars.Series.list.sort": [[1123, "polars-series-list-sort"]], "polars.Series.list.std": [[1124, "polars-series-list-std"]], "polars.Series.list.sum": [[1125, "polars-series-list-sum"]], "polars.Series.list.tail": [[1126, "polars-series-list-tail"]], "polars.Series.list.to_array": [[1127, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1128, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1129, "polars-series-list-unique"]], "polars.Series.list.var": [[1130, "polars-series-list-var"]], "polars.Series.log": [[1131, "polars-series-log"]], "polars.Series.log10": [[1132, "polars-series-log10"]], "polars.Series.log1p": [[1133, "polars-series-log1p"]], "polars.Series.lower_bound": [[1134, "polars-series-lower-bound"]], "polars.Series.lt": [[1135, "polars-series-lt"]], "polars.Series.map_elements": [[1136, "polars-series-map-elements"]], "polars.Series.max": [[1137, "polars-series-max"]], "polars.Series.mean": [[1138, "polars-series-mean"]], "polars.Series.median": [[1139, "polars-series-median"]], "polars.Series.min": [[1140, "polars-series-min"]], "polars.Series.mode": [[1141, "polars-series-mode"]], "polars.Series.n_chunks": [[1142, "polars-series-n-chunks"]], "polars.Series.n_unique": [[1143, "polars-series-n-unique"]], "polars.Series.name": [[1144, "polars-series-name"]], "polars.Series.nan_max": [[1145, "polars-series-nan-max"]], "polars.Series.nan_min": [[1146, "polars-series-nan-min"]], "polars.Series.ne": [[1147, "polars-series-ne"]], "polars.Series.ne_missing": [[1148, "polars-series-ne-missing"]], "polars.Series.new_from_index": [[1149, "polars-series-new-from-index"]], "polars.Series.not_": [[1150, "polars-series-not"]], "polars.Series.null_count": [[1151, "polars-series-null-count"]], "polars.Series.pct_change": [[1152, "polars-series-pct-change"]], "polars.Series.peak_max": [[1153, "polars-series-peak-max"]], "polars.Series.peak_min": [[1154, "polars-series-peak-min"]], "polars.Series.pow": [[1155, "polars-series-pow"]], "polars.Series.product": [[1156, "polars-series-product"]], "polars.Series.qcut": [[1157, "polars-series-qcut"]], "polars.Series.quantile": [[1158, "polars-series-quantile"]], "polars.Series.rank": [[1159, "polars-series-rank"]], "polars.Series.rechunk": [[1160, "polars-series-rechunk"]], "polars.Series.reinterpret": [[1161, "polars-series-reinterpret"]], "polars.Series.rename": [[1162, "polars-series-rename"]], "polars.Series.replace": [[1163, "polars-series-replace"]], "polars.Series.replace_strict": [[1164, "polars-series-replace-strict"]], "polars.Series.reshape": [[1165, "polars-series-reshape"]], "polars.Series.reverse": [[1166, "polars-series-reverse"]], "polars.Series.rle": [[1167, "polars-series-rle"]], "polars.Series.rle_id": [[1168, "polars-series-rle-id"]], "polars.Series.rolling_map": [[1169, "polars-series-rolling-map"]], "polars.Series.rolling_max": [[1170, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1171, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[1172, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[1173, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[1174, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[1175, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[1176, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1177, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[1178, "polars-series-rolling-var"]], "polars.Series.round": [[1179, "polars-series-round"]], "polars.Series.round_sig_figs": [[1180, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1181, "polars-series-sample"]], "polars.Series.scatter": [[1182, "polars-series-scatter"]], "polars.Series.search_sorted": [[1183, "polars-series-search-sorted"]], "polars.Series.set": [[1184, "polars-series-set"]], "polars.Series.set_sorted": [[1185, "polars-series-set-sorted"]], "polars.Series.shape": [[1186, "polars-series-shape"]], "polars.Series.shift": [[1187, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1188, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1189, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[1190, "polars-series-shuffle"]], "polars.Series.sign": [[1191, "polars-series-sign"]], "polars.Series.sin": [[1192, "polars-series-sin"]], "polars.Series.sinh": [[1193, "polars-series-sinh"]], "polars.Series.skew": [[1194, "polars-series-skew"]], "polars.Series.slice": [[1195, "polars-series-slice"]], "polars.Series.sort": [[1196, "polars-series-sort"]], "polars.Series.sqrt": [[1197, "polars-series-sqrt"]], "polars.Series.std": [[1198, "polars-series-std"]], "polars.Series.str.concat": [[1199, "polars-series-str-concat"]], "polars.Series.str.contains": [[1200, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1201, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1202, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1203, "polars-series-str-decode"]], "polars.Series.str.encode": [[1204, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1205, "polars-series-str-ends-with"]], "polars.Series.str.explode": [[1206, "polars-series-str-explode"]], "polars.Series.str.extract": [[1207, "polars-series-str-extract"]], "polars.Series.str.extract_all": [[1208, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1209, "polars-series-str-extract-groups"]], "polars.Series.str.extract_many": [[1210, "polars-series-str-extract-many"]], "polars.Series.str.find": [[1211, "polars-series-str-find"]], "polars.Series.str.head": [[1212, "polars-series-str-head"]], "polars.Series.str.join": [[1213, "polars-series-str-join"]], "polars.Series.str.json_decode": [[1214, "polars-series-str-json-decode"]], "polars.Series.str.json_path_match": [[1215, "polars-series-str-json-path-match"]], "polars.Series.str.len_bytes": [[1216, "polars-series-str-len-bytes"]], "polars.Series.str.len_chars": [[1217, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1218, "polars-series-str-pad-end"]], "polars.Series.str.pad_start": [[1219, "polars-series-str-pad-start"]], "polars.Series.str.replace": [[1220, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[1221, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1222, "polars-series-str-replace-many"]], "polars.Series.str.reverse": [[1223, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1224, "polars-series-str-slice"]], "polars.Series.str.split": [[1225, "polars-series-str-split"]], "polars.Series.str.split_exact": [[1226, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1227, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1228, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars": [[1229, "polars-series-str-strip-chars"]], "polars.Series.str.strip_chars_end": [[1230, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1231, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip_prefix": [[1232, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1233, "polars-series-str-strip-suffix"]], "polars.Series.str.strptime": [[1234, "polars-series-str-strptime"]], "polars.Series.str.tail": [[1235, "polars-series-str-tail"]], "polars.Series.str.to_date": [[1236, "polars-series-str-to-date"]], "polars.Series.str.to_datetime": [[1237, "polars-series-str-to-datetime"]], "polars.Series.str.to_decimal": [[1238, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1239, "polars-series-str-to-integer"]], "polars.Series.str.to_lowercase": [[1240, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1241, "polars-series-str-to-time"]], "polars.Series.str.to_titlecase": [[1242, "polars-series-str-to-titlecase"]], "polars.Series.str.to_uppercase": [[1243, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1244, "polars-series-str-zfill"]], "polars.Series.struct.field": [[1245, "polars-series-struct-field"]], "polars.Series.struct.fields": [[1246, "polars-series-struct-fields"]], "polars.Series.struct.json_encode": [[1247, "polars-series-struct-json-encode"]], "polars.Series.struct.rename_fields": [[1248, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1249, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1250, "polars-series-struct-unnest"]], "polars.Series.sum": [[1251, "polars-series-sum"]], "polars.Series.tail": [[1252, "polars-series-tail"]], "polars.Series.tan": [[1253, "polars-series-tan"]], "polars.Series.tanh": [[1254, "polars-series-tanh"]], "polars.Series.to_arrow": [[1255, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[1256, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1257, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1258, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1259, "polars-series-to-jax"]], "polars.Series.to_list": [[1260, "polars-series-to-list"]], "polars.Series.to_numpy": [[1261, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[1262, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1263, "polars-series-to-physical"]], "polars.Series.to_torch": [[1264, "polars-series-to-torch"]], "polars.Series.top_k": [[1265, "polars-series-top-k"]], "polars.Series.unique": [[1266, "polars-series-unique"]], "polars.Series.unique_counts": [[1267, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1268, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1269, "polars-series-value-counts"]], "polars.Series.var": [[1270, "polars-series-var"]], "polars.Series.zip_with": [[1271, "polars-series-zip-with"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.all": [[704, "polars-all"]], "polars.all_horizontal": [[705, "polars-all-horizontal"]], "polars.any": [[706, "polars-any"]], "polars.any_horizontal": [[707, "polars-any-horizontal"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.approx_n_unique": [[708, "polars-approx-n-unique"]], "polars.arange": [[709, "polars-arange"]], "polars.arctan2": [[710, "polars-arctan2"]], "polars.arctan2d": [[711, "polars-arctan2d"]], "polars.arg_sort_by": [[712, "polars-arg-sort-by"]], "polars.arg_where": [[713, "polars-arg-where"]], "polars.build_info": [[52, "polars-build-info"]], "polars.business_day_count": [[714, "polars-business-day-count"]], "polars.coalesce": [[715, "polars-coalesce"]], "polars.col": [[782, "polars-col"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.concat": [[55, "polars-concat"]], "polars.concat_list": [[716, "polars-concat-list"]], "polars.concat_str": [[717, "polars-concat-str"]], "polars.corr": [[718, "polars-corr"]], "polars.count": [[719, "polars-count"]], "polars.cov": [[720, "polars-cov"]], "polars.cum_count": [[721, "polars-cum-count"]], "polars.cum_fold": [[722, "polars-cum-fold"]], "polars.cum_reduce": [[723, "polars-cum-reduce"]], "polars.cum_sum": [[724, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[725, "polars-cum-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.__iter__": [[291, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[292, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.all": [[293, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.count": [[294, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[295, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[296, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.last": [[297, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.len": [[298, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.map_groups": [[299, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[300, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[301, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.median": [[302, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[303, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[304, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[305, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[306, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[307, "polars-dataframe-group-by-groupby-tail"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.date": [[726, "polars-date"]], "polars.date_range": [[727, "polars-date-range"]], "polars.date_ranges": [[728, "polars-date-ranges"]], "polars.datetime": [[729, "polars-datetime"]], "polars.datetime_range": [[730, "polars-datetime-range"]], "polars.datetime_ranges": [[731, "polars-datetime-ranges"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.duration": [[732, "polars-duration"]], "polars.element": [[733, "polars-element"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.exclude": [[734, "polars-exclude"]], "polars.first": [[735, "polars-first"]], "polars.fold": [[736, "polars-fold"]], "polars.format": [[737, "polars-format"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_epoch": [[738, "polars-from-epoch"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.from_records": [[122, "polars-from-records"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.groups": [[739, "polars-groups"]], "polars.head": [[740, "polars-head"]], "polars.implode": [[741, "polars-implode"]], "polars.int_range": [[742, "polars-int-range"]], "polars.int_ranges": [[743, "polars-int-ranges"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.last": [[744, "polars-last"]], "polars.lazyframe.engine_config.GPUEngine": [[874, "polars-lazyframe-engine-config-gpuengine"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[875, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[876, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[877, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[878, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[879, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[880, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[881, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[882, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[883, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[884, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[885, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[886, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[887, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[888, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[889, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[890, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[891, "polars-lazyframe-in-process-inprocessquery-cancel"]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[892, "polars-lazyframe-in-process-inprocessquery-fetch"]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[893, "polars-lazyframe-in-process-inprocessquery-fetch-blocking"]], "polars.len": [[745, "polars-len"]], "polars.lit": [[746, "polars-lit"]], "polars.map_batches": [[747, "polars-map-batches"]], "polars.map_groups": [[748, "polars-map-groups"]], "polars.max": [[749, "polars-max"]], "polars.max_horizontal": [[750, "polars-max-horizontal"]], "polars.mean": [[751, "polars-mean"]], "polars.mean_horizontal": [[752, "polars-mean-horizontal"]], "polars.median": [[753, "polars-median"]], "polars.min": [[754, "polars-min"]], "polars.min_horizontal": [[755, "polars-min-horizontal"]], "polars.n_unique": [[756, "polars-n-unique"]], "polars.nth": [[757, "polars-nth"]], "polars.ones": [[758, "polars-ones"]], "polars.quantile": [[759, "polars-quantile"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.read_database": [[131, "polars-read-database"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_json": [[138, "polars-read-json"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.reduce": [[760, "polars-reduce"]], "polars.repeat": [[761, "polars-repeat"]], "polars.rolling_corr": [[762, "polars-rolling-corr"]], "polars.rolling_cov": [[763, "polars-rolling-cov"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.select": [[764, "polars-select"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.sql": [[765, "polars-sql"]], "polars.sql_expr": [[766, "polars-sql-expr"]], "polars.std": [[767, "polars-std"]], "polars.struct": [[768, "polars-struct"]], "polars.sum": [[769, "polars-sum"]], "polars.sum_horizontal": [[770, "polars-sum-horizontal"]], "polars.tail": [[771, "polars-tail"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.time": [[772, "polars-time"]], "polars.time_range": [[773, "polars-time-range"]], "polars.time_ranges": [[774, "polars-time-ranges"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.var": [[775, "polars-var"]], "polars.when": [[776, "polars-when"]], "polars.zeros": [[777, "polars-zeros"]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[170, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[907, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[171, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[908, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[172, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1307, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1307, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[173, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[909, "polars.Series.__getitem__", false]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[874, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1307, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[321, "polars.Expr.abs", false]], "abs() (polars.series method)": [[910, "polars.Series.abs", false]], "add() (polars.expr method)": [[322, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[404, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[992, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[323, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[324, "polars.Expr.alias", false]], "alias() (polars.series method)": [[911, "polars.Series.alias", false]], "align_frames() (in module polars)": [[47, "polars.align_frames", false]], "all() (in module polars)": [[704, "polars.all", false]], "all() (in module polars.selectors)": [[905, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[325, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[341, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[498, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[876, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[912, "polars.Series.all", false]], "all() (polars.series.arr method)": [[926, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1091, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[705, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[905, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[905, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[326, "polars.Expr.and_", false]], "any() (in module polars)": [[706, "polars.any", false]], "any() (polars.expr method)": [[327, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[342, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[499, "polars.Expr.list.any", false]], "any() (polars.series method)": [[913, "polars.Series.any", false]], "any() (polars.series.arr method)": [[927, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1092, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[707, "polars.any_horizontal", false]], "append() (polars.expr method)": [[328, "polars.Expr.append", false]], "append() (polars.series method)": [[914, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[708, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[174, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[329, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[801, "polars.LazyFrame.approx_n_unique", false]], "arange() (in module polars)": [[709, "polars.arange", false]], "arccos() (polars.expr method)": [[330, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[915, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[331, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[916, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[332, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[917, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[333, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[918, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[334, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[919, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[710, "polars.arctan2", false]], "arctan2d() (in module polars)": [[711, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[335, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[920, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[336, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[343, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[500, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[921, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[928, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1093, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[337, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[344, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[501, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[922, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[929, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1094, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[338, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[923, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[712, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[339, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[924, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[340, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[925, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[713, "polars.arg_where", false]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[365, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[405, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[993, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[905, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[372, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[956, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[373, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[957, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[374, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[958, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[375, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[959, "polars.Series.bitwise_leading_ones", false]], "bitwise_or() (polars.expr method)": [[376, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[960, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[377, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[961, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[378, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[962, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[379, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[963, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[905, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[175, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[380, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[802, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[964, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[381, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[52, "polars.build_info", false]], "business_day_count() (in module polars)": [[714, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[905, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[905, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[905, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[803, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[891, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[176, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[382, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[804, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[965, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[406, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[994, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[905, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[384, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[970, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[385, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[971, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[407, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[995, "polars.Series.dt.century", false]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[972, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[177, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[805, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[973, "polars.Series.clear", false]], "clip() (polars.expr method)": [[386, "polars.Expr.clip", false]], "clip() (polars.series method)": [[974, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[178, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[806, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[975, "polars.Series.clone", false]], "coalesce() (in module polars)": [[715, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[807, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[53, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[808, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[179, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[809, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column", false]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[180, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[810, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[408, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[996, "polars.Series.dt.combine", false]], "computeerror": [[89, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[55, "polars.concat", false]], "concat() (polars.expr.list method)": [[502, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[638, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1095, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1199, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[716, "polars.concat_list", false]], "concat_str() (in module polars)": [[717, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[905, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[345, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[366, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[503, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[639, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[930, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[950, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1096, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1200, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[640, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1201, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[409, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[997, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[718, "polars.corr", false]], "corr() (polars.dataframe method)": [[181, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[387, "polars.Expr.cos", false]], "cos() (polars.series method)": [[976, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[388, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[977, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[389, "polars.Expr.cot", false]], "cot() (polars.series method)": [[978, "polars.Series.cot", false]], "count() (in module polars)": [[719, "polars.count", false]], "count() (polars.dataframe method)": [[182, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[390, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[811, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[877, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[979, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[346, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[504, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[641, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[931, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1097, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1202, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[720, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy", false]], "cum_count() (in module polars)": [[721, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[391, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[980, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[722, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[392, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[981, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[393, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[982, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[394, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[983, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[723, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[724, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[395, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[984, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[725, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[396, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[985, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[397, "polars.Expr.cut", false]], "cut() (polars.series method)": [[986, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date", false]], "date() (in module polars)": [[726, "polars.date", false]], "date() (in module polars.selectors)": [[905, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[410, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[998, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[727, "polars.date_range", false]], "date_ranges() (in module polars)": [[728, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[729, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[905, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[411, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[999, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[730, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[731, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[412, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1000, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[905, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[367, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[642, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[951, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1203, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[398, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[183, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[812, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[987, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[184, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[399, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[813, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[400, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[505, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[988, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1098, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[905, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[401, "polars.Expr.dot", false]], "dot() (polars.series method)": [[989, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[185, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[814, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[186, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[402, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[990, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[187, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[403, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[506, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[815, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[991, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1099, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[413, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1001, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1040, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[188, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[816, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[92, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[732, "polars.duration", false]], "duration() (in module polars.selectors)": [[905, "polars.selectors.duration", false]], "element() (in module polars)": [[733, "polars.element", false]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[368, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[643, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[952, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1204, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[905, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[369, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[644, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[953, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1205, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[448, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1041, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[414, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1002, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[449, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[548, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1042, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[450, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1043, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[189, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1044, "polars.Series.equals", false]], "estimated_size() (polars.dataframe method)": [[190, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1045, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[507, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1100, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[451, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1046, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[452, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1047, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[453, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1048, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[454, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1049, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[734, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[905, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[455, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1289, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1290, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[456, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1050, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[905, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[817, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[191, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[457, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[347, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[508, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[645, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[818, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1051, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[932, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1101, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1206, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[192, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1052, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[458, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1053, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[646, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1207, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[647, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1208, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[648, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1209, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[649, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1210, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[892, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[893, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[684, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1245, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1246, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[193, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[459, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[819, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1054, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[194, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[460, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[820, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1055, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[195, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[461, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[821, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1056, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[650, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1211, "polars.Series.str.find", false]], "first() (in module polars)": [[735, "polars.first", false]], "first() (in module polars.selectors)": [[905, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[462, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[348, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[509, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[822, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[878, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series.arr method)": [[933, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1102, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[196, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1057, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[463, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[905, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[464, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1058, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[465, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[736, "polars.fold", false]], "fold() (polars.dataframe method)": [[197, "polars.DataFrame.fold", false]], "format() (in module polars)": [[737, "polars.format", false]], "forward_fill() (polars.expr method)": [[466, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[116, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[118, "polars.from_dict", false]], "from_dicts() (in module polars)": [[119, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[738, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[467, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[120, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[121, "polars.from_pandas", false]], "from_records() (in module polars)": [[122, "polars.from_records", false]], "from_repr() (in module polars)": [[123, "polars.from_repr", false]], "gather() (polars.expr method)": [[468, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[510, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1059, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1103, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[198, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[469, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[511, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[823, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1060, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1104, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[470, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1061, "polars.Series.ge", false]], "get() (polars.expr method)": [[471, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[349, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[512, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[934, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1105, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[383, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[966, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1062, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[199, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[200, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[201, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[124, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[202, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[874, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[203, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[824, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[204, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[825, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[739, "polars.groups", false]], "gt() (polars.expr method)": [[472, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1063, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[549, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[473, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1064, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1065, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[474, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1066, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[205, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[740, "polars.head", false]], "head() (polars.dataframe method)": [[206, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[475, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[513, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[651, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[826, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[879, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1067, "polars.Series.head", false]], "head() (polars.series.list method)": [[1106, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1212, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[207, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[476, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1068, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[415, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1003, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[208, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[741, "polars.implode", false]], "implode() (polars.expr method)": [[477, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1069, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[209, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[478, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[827, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[742, "polars.int_range", false]], "int_ranges() (in module polars)": [[743, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[905, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[210, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[479, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[828, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1070, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[480, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1071, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[481, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1072, "polars.Series.is_between", false]], "is_column_selection() (polars.expr.meta method)": [[550, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[211, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[482, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1073, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[212, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1074, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[483, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1075, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[484, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1076, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[485, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1077, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[486, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1078, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[487, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1079, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[416, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1004, "polars.Series.dt.is_leap_year", false]], "is_local() (polars.series.cat method)": [[967, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[488, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1080, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[489, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1081, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[490, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1082, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[491, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1083, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[551, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[905, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1084, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[213, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[492, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1085, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[417, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1005, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[214, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1086, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[215, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[216, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[217, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[218, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[350, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[514, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[652, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[829, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[935, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1107, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1213, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[219, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[830, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[220, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[831, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[653, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1214, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[685, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1247, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[126, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[654, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1215, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[565, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[493, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1087, "polars.Series.kurtosis", false]], "last() (in module polars)": [[744, "polars.last", false]], "last() (in module polars.selectors)": [[905, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[494, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[351, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[515, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[832, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[880, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series.arr method)": [[936, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1108, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[221, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[833, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[495, "polars.Expr.le", false]], "le() (polars.series method)": [[1088, "polars.Series.le", false]], "len() (in module polars)": [[745, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[496, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[516, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[881, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1089, "polars.Series.len", false]], "len() (polars.series.list method)": [[1109, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[655, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1216, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[656, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1217, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[222, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[497, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[834, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1090, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[746, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[538, "polars.Expr.log", false]], "log() (polars.series method)": [[1131, "polars.Series.log", false]], "log10() (polars.expr method)": [[539, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1132, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[540, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1133, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[541, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1134, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[542, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1135, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[566, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[747, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[543, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[835, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[544, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1136, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[567, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[748, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[882, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[223, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[905, "polars.selectors.matches", false]], "max() (in module polars)": [[749, "polars.max", false]], "max() (polars.dataframe method)": [[224, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[545, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[352, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[517, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[836, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[883, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1137, "polars.Series.max", false]], "max() (polars.series.arr method)": [[937, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1006, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1110, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[750, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[225, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[751, "polars.mean", false]], "mean() (polars.dataframe method)": [[226, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[546, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[518, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[837, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[884, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1138, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1007, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1111, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[752, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[227, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[753, "polars.median", false]], "median() (polars.dataframe method)": [[228, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[547, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[353, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[519, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[838, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[885, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1139, "polars.Series.median", false]], "median() (polars.series.arr method)": [[938, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1008, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1112, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[229, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[839, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[230, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[840, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[418, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1009, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[419, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1010, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[420, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1011, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[754, "polars.min", false]], "min() (polars.dataframe method)": [[231, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[560, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[354, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[520, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[841, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[886, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1140, "polars.Series.min", false]], "min() (polars.series.arr method)": [[939, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1012, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1113, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[755, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[232, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[421, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1013, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[561, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[562, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1141, "polars.Series.mode", false]], "module": [[903, "module-polars.plugins", false], [905, "module-polars.selectors", false]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[422, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1014, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[423, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1015, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[424, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1016, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[563, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[233, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1142, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[756, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[234, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[564, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[355, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[521, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[887, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1143, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[940, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1114, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1144, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[574, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1145, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[575, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1146, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[425, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1017, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[576, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[552, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1147, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[577, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1148, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[578, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1149, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[96, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[579, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1150, "polars.Series.not_", false]], "nth() (in module polars)": [[757, "polars.nth", false]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[235, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[580, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[842, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1151, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[905, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[426, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1018, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[758, "polars.ones", false]], "or_() (polars.expr method)": [[581, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[427, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1019, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[553, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[582, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[657, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1218, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[658, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1219, "polars.Series.str.pad_start", false]], "panicexception": [[99, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[236, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[583, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1152, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[584, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1153, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[585, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1154, "polars.Series.peak_min", false]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[237, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[586, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[843, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[238, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[316, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1285, "polars.Series.plot", false]], "polars.plugins": [[903, "module-polars.plugins", false]], "polars.selectors": [[905, "module-polars.selectors", false]], "polarserror": [[102, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[104, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[554, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[587, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1155, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[568, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[569, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[239, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[588, "polars.Expr.product", false]], "product() (polars.series method)": [[1156, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[844, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[589, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1157, "polars.Series.qcut", false]], "quantile() (in module polars)": [[759, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[240, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[590, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[845, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[888, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1158, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[428, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1020, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[591, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[592, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1159, "polars.Series.rank", false]], "read_avro() (in module polars)": [[127, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[129, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[131, "polars.read_database", false]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[133, "polars.read_delta", false]], "read_excel() (in module polars)": [[134, "polars.read_excel", false]], "read_ipc() (in module polars)": [[135, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[138, "polars.read_json", false]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[140, "polars.read_ods", false]], "read_parquet() (in module polars)": [[141, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[241, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[593, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1160, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[760, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1291, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1292, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1293, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[903, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[594, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1161, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[242, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[846, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1162, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[686, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1248, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[761, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[595, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[596, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[659, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1163, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1220, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[660, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1221, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[243, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[661, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1222, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[597, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1164, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[429, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1021, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[598, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1165, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[244, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[599, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[356, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[522, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[662, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[847, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1166, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[941, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1115, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1223, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[600, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1167, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[601, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1168, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[245, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[602, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[848, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[762, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[763, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[603, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1169, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[604, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1170, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[605, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[606, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1171, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[607, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[608, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1172, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[609, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[610, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1173, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[611, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[612, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1174, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[613, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[614, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1175, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[615, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1176, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[616, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[617, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1177, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[618, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[619, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1178, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[620, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[555, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[621, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[430, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1179, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1022, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[622, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1180, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[246, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[247, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[248, "polars.DataFrame.rows_by_key", false]], "rowserror": [[105, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[249, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[623, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[523, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1181, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1116, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[143, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[144, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1182, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[250, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[849, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1249, "polars.Series.struct.schema", false]], "schemaerror": [[108, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[624, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1183, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[431, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1023, "polars.Series.dt.second", false]], "select() (in module polars)": [[764, "polars.select", false]], "select() (polars.dataframe method)": [[251, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[850, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[252, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[851, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[253, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[556, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[852, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1184, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[524, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1117, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[525, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1118, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[254, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[625, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[853, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1185, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[526, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1119, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[527, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1120, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[255, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1186, "polars.Series.shape", false]], "shapeerror": [[110, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[256, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[626, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[357, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[528, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[854, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1187, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[942, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1121, "polars.Series.list.shift", false]], "show_graph() (polars.lazyframe method)": [[855, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[151, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[627, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1188, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[257, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1189, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[628, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1190, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[629, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1191, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[905, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[630, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1192, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[631, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1193, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[370, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[954, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[632, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1194, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[258, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[633, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[529, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[663, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[856, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1195, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1122, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1224, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[259, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[634, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[358, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[530, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[857, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1196, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[943, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1123, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[635, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[664, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1225, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[665, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1226, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[666, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1227, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[765, "polars.sql", false]], "sql() (polars.dataframe method)": [[260, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[858, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[766, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1307, "polars.SQLContext", false]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[636, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1197, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[905, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[371, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[667, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[955, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1228, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[767, "polars.std", false]], "std() (polars.dataframe method)": [[261, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[637, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[359, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[531, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[859, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1198, "polars.Series.std", false]], "std() (polars.series.arr method)": [[944, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1124, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[432, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1024, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[905, "polars.selectors.string", false]], "stringcache (class in polars)": [[46, "polars.StringCache", false]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[668, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1229, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[669, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1230, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[670, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1231, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[671, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1232, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[672, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1233, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[673, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1234, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[768, "polars.struct", false]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[317, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[688, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[570, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[571, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[769, "polars.sum", false]], "sum() (polars.dataframe method)": [[262, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[689, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[360, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[532, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[860, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[889, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1251, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[945, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1125, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[770, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[263, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1294, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[771, "polars.tail", false]], "tail() (polars.dataframe method)": [[264, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[690, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[533, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[674, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[861, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[890, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1252, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1126, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1235, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[691, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1253, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[692, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1254, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[905, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time", false]], "time() (in module polars)": [[772, "polars.time", false]], "time() (in module polars.selectors)": [[905, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[433, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1025, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[773, "polars.time_range", false]], "time_ranges() (in module polars)": [[774, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[434, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1026, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[534, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1127, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[265, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1255, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[675, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1236, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[676, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1237, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[677, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1238, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[266, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[267, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[268, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1256, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1257, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[269, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1258, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[678, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1239, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[270, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1259, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[361, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1260, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[946, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[968, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[572, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[679, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1240, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[271, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1261, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[272, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1262, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[693, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1263, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[273, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[435, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1027, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[274, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[362, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[535, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[947, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1128, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[680, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1241, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[681, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1242, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[275, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1264, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[573, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[682, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1243, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[276, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[694, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[862, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1265, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[695, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[436, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1028, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[437, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1029, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[438, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1030, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[439, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1031, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[440, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1032, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[441, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1033, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[442, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1034, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[277, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[557, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[696, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[443, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1035, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[558, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[278, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[697, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[363, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[536, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[863, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1266, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[948, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1129, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[698, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1267, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[279, "polars.DataFrame.unnest", false]], "unnest() (polars.lazyframe method)": [[864, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1250, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[280, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[865, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1295, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[905, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[281, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[282, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[866, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[699, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1268, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[283, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[969, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[700, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1269, "polars.Series.value_counts", false]], "var() (in module polars)": [[775, "polars.var", false]], "var() (polars.dataframe method)": [[284, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[701, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[364, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[537, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[867, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1270, "polars.Series.var", false]], "var() (polars.series.arr method)": [[949, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1130, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[285, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[444, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1036, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[445, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1037, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[776, "polars.when", false]], "where() (polars.expr method)": [[702, "polars.Expr.where", false]], "width (polars.dataframe property)": [[286, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[868, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[287, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[869, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[288, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[870, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[871, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[687, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[289, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[872, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[290, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[873, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[446, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1038, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[559, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[703, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[447, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1039, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[777, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[683, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1244, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1271, "polars.Series.zip_with", false]]}, "objects": {"polars": [[1307, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [704, 4, 1, "", "all"], [705, 4, 1, "", "all_horizontal"], [706, 4, 1, "", "any"], [707, 4, 1, "", "any_horizontal"], [708, 4, 1, "", "approx_n_unique"], [709, 4, 1, "", "arange"], [710, 4, 1, "", "arctan2"], [711, 4, 1, "", "arctan2d"], [712, 4, 1, "", "arg_sort_by"], [713, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [714, 4, 1, "", "business_day_count"], [715, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [716, 4, 1, "", "concat_list"], [717, 4, 1, "", "concat_str"], [718, 4, 1, "", "corr"], [719, 4, 1, "", "count"], [720, 4, 1, "", "cov"], [721, 4, 1, "", "cum_count"], [722, 4, 1, "", "cum_fold"], [723, 4, 1, "", "cum_reduce"], [724, 4, 1, "", "cum_sum"], [725, 4, 1, "", "cum_sum_horizontal"], [726, 4, 1, "", "date"], [727, 4, 1, "", "date_range"], [728, 4, 1, "", "date_ranges"], [729, 4, 1, "", "datetime"], [730, 4, 1, "", "datetime_range"], [731, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [732, 4, 1, "", "duration"], [733, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [734, 4, 1, "", "exclude"], [735, 4, 1, "", "first"], [736, 4, 1, "", "fold"], [737, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [738, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [739, 4, 1, "", "groups"], [740, 4, 1, "", "head"], [741, 4, 1, "", "implode"], [742, 4, 1, "", "int_range"], [743, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [744, 4, 1, "", "last"], [745, 4, 1, "", "len"], [746, 4, 1, "", "lit"], [747, 4, 1, "", "map_batches"], [748, 4, 1, "", "map_groups"], [749, 4, 1, "", "max"], [750, 4, 1, "", "max_horizontal"], [751, 4, 1, "", "mean"], [752, 4, 1, "", "mean_horizontal"], [753, 4, 1, "", "median"], [754, 4, 1, "", "min"], [755, 4, 1, "", "min_horizontal"], [756, 4, 1, "", "n_unique"], [757, 4, 1, "", "nth"], [758, 4, 1, "", "ones"], [903, 6, 0, "-", "plugins"], [759, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [760, 4, 1, "", "reduce"], [761, 4, 1, "", "repeat"], [762, 4, 1, "", "rolling_corr"], [763, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [764, 4, 1, "", "select"], [905, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [765, 4, 1, "", "sql"], [766, 4, 1, "", "sql_expr"], [767, 4, 1, "", "std"], [768, 4, 1, "", "struct"], [769, 4, 1, "", "sum"], [770, 4, 1, "", "sum_horizontal"], [771, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [772, 4, 1, "", "time"], [773, 4, 1, "", "time_range"], [774, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [775, 4, 1, "", "var"], [776, 4, 1, "", "when"], [777, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__array__"], [171, 0, 1, "", "__arrow_c_stream__"], [172, 0, 1, "", "__dataframe__"], [173, 0, 1, "", "__getitem__"], [174, 0, 1, "", "approx_n_unique"], [175, 0, 1, "", "bottom_k"], [176, 0, 1, "", "cast"], [177, 0, 1, "", "clear"], [178, 0, 1, "", "clone"], [179, 0, 1, "", "collect_schema"], [180, 1, 1, "", "columns"], [181, 0, 1, "", "corr"], [182, 0, 1, "", "count"], [183, 0, 1, "", "describe"], [184, 0, 1, "", "deserialize"], [185, 0, 1, "", "drop"], [186, 0, 1, "", "drop_in_place"], [187, 0, 1, "", "drop_nulls"], [188, 1, 1, "", "dtypes"], [189, 0, 1, "", "equals"], [190, 0, 1, "", "estimated_size"], [191, 0, 1, "", "explode"], [192, 0, 1, "", "extend"], [193, 0, 1, "", "fill_nan"], [194, 0, 1, "", "fill_null"], [195, 0, 1, "", "filter"], [196, 1, 1, "", "flags"], [197, 0, 1, "", "fold"], [198, 0, 1, "", "gather_every"], [199, 0, 1, "", "get_column"], [200, 0, 1, "", "get_column_index"], [201, 0, 1, "", "get_columns"], [202, 0, 1, "", "glimpse"], [203, 0, 1, "", "group_by"], [204, 0, 1, "", "group_by_dynamic"], [205, 0, 1, "", "hash_rows"], [206, 0, 1, "", "head"], [207, 1, 1, "", "height"], [208, 0, 1, "", "hstack"], [209, 0, 1, "", "insert_column"], [210, 0, 1, "", "interpolate"], [211, 0, 1, "", "is_duplicated"], [212, 0, 1, "", "is_empty"], [213, 0, 1, "", "is_unique"], [214, 0, 1, "", "item"], [215, 0, 1, "", "iter_columns"], [216, 0, 1, "", "iter_rows"], [217, 0, 1, "", "iter_slices"], [218, 0, 1, "", "join"], [219, 0, 1, "", "join_asof"], [220, 0, 1, "", "join_where"], [221, 0, 1, "", "lazy"], [222, 0, 1, "", "limit"], [223, 0, 1, "", "map_rows"], [224, 0, 1, "", "max"], [225, 0, 1, "", "max_horizontal"], [226, 0, 1, "", "mean"], [227, 0, 1, "", "mean_horizontal"], [228, 0, 1, "", "median"], [229, 0, 1, "", "melt"], [230, 0, 1, "", "merge_sorted"], [231, 0, 1, "", "min"], [232, 0, 1, "", "min_horizontal"], [233, 0, 1, "", "n_chunks"], [234, 0, 1, "", "n_unique"], [235, 0, 1, "", "null_count"], [236, 0, 1, "", "partition_by"], [237, 0, 1, "", "pipe"], [238, 0, 1, "", "pivot"], [316, 1, 1, "", "plot"], [239, 0, 1, "", "product"], [240, 0, 1, "", "quantile"], [241, 0, 1, "", "rechunk"], [242, 0, 1, "", "rename"], [243, 0, 1, "", "replace_column"], [244, 0, 1, "", "reverse"], [245, 0, 1, "", "rolling"], [246, 0, 1, "", "row"], [247, 0, 1, "", "rows"], [248, 0, 1, "", "rows_by_key"], [249, 0, 1, "", "sample"], [250, 1, 1, "", "schema"], [251, 0, 1, "", "select"], [252, 0, 1, "", "select_seq"], [253, 0, 1, "", "serialize"], [254, 0, 1, "", "set_sorted"], [255, 1, 1, "", "shape"], [256, 0, 1, "", "shift"], [257, 0, 1, "", "shrink_to_fit"], [258, 0, 1, "", "slice"], [259, 0, 1, "", "sort"], [260, 0, 1, "", "sql"], [261, 0, 1, "", "std"], [317, 1, 1, "", "style"], [262, 0, 1, "", "sum"], [263, 0, 1, "", "sum_horizontal"], [264, 0, 1, "", "tail"], [265, 0, 1, "", "to_arrow"], [266, 0, 1, "", "to_dict"], [267, 0, 1, "", "to_dicts"], [268, 0, 1, "", "to_dummies"], [269, 0, 1, "", "to_init_repr"], [270, 0, 1, "", "to_jax"], [271, 0, 1, "", "to_numpy"], [272, 0, 1, "", "to_pandas"], [273, 0, 1, "", "to_series"], [274, 0, 1, "", "to_struct"], [275, 0, 1, "", "to_torch"], [276, 0, 1, "", "top_k"], [277, 0, 1, "", "transpose"], [278, 0, 1, "", "unique"], [279, 0, 1, "", "unnest"], [280, 0, 1, "", "unpivot"], [281, 0, 1, "", "unstack"], [282, 0, 1, "", "update"], [283, 0, 1, "", "upsample"], [284, 0, 1, "", "var"], [285, 0, 1, "", "vstack"], [286, 1, 1, "", "width"], [287, 0, 1, "", "with_columns"], [288, 0, 1, "", "with_columns_seq"], [289, 0, 1, "", "with_row_count"], [290, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[321, 0, 1, "", "abs"], [322, 0, 1, "", "add"], [323, 0, 1, "", "agg_groups"], [324, 0, 1, "", "alias"], [325, 0, 1, "", "all"], [326, 0, 1, "", "and_"], [327, 0, 1, "", "any"], [328, 0, 1, "", "append"], [329, 0, 1, "", "approx_n_unique"], [330, 0, 1, "", "arccos"], [331, 0, 1, "", "arccosh"], [332, 0, 1, "", "arcsin"], [333, 0, 1, "", "arcsinh"], [334, 0, 1, "", "arctan"], [335, 0, 1, "", "arctanh"], [336, 0, 1, "", "arg_max"], [337, 0, 1, "", "arg_min"], [338, 0, 1, "", "arg_sort"], [339, 0, 1, "", "arg_true"], [340, 0, 1, "", "arg_unique"], [365, 0, 1, "", "backward_fill"], [372, 0, 1, "", "bitwise_and"], [373, 0, 1, "", "bitwise_count_ones"], [374, 0, 1, "", "bitwise_count_zeros"], [375, 0, 1, "", "bitwise_leading_ones"], [376, 0, 1, "", "bitwise_or"], [377, 0, 1, "", "bitwise_trailing_ones"], [378, 0, 1, "", "bitwise_trailing_zeros"], [379, 0, 1, "", "bitwise_xor"], [380, 0, 1, "", "bottom_k"], [381, 0, 1, "", "bottom_k_by"], [382, 0, 1, "", "cast"], [384, 0, 1, "", "cbrt"], [385, 0, 1, "", "ceil"], [386, 0, 1, "", "clip"], [387, 0, 1, "", "cos"], [388, 0, 1, "", "cosh"], [389, 0, 1, "", "cot"], [390, 0, 1, "", "count"], [391, 0, 1, "", "cum_count"], [392, 0, 1, "", "cum_max"], [393, 0, 1, "", "cum_min"], [394, 0, 1, "", "cum_prod"], [395, 0, 1, "", "cum_sum"], [396, 0, 1, "", "cumulative_eval"], [397, 0, 1, "", "cut"], [398, 0, 1, "", "degrees"], [399, 0, 1, "", "deserialize"], [400, 0, 1, "", "diff"], [401, 0, 1, "", "dot"], [402, 0, 1, "", "drop_nans"], [403, 0, 1, "", "drop_nulls"], [448, 0, 1, "", "entropy"], [449, 0, 1, "", "eq"], [450, 0, 1, "", "eq_missing"], [451, 0, 1, "", "ewm_mean"], [452, 0, 1, "", "ewm_mean_by"], [453, 0, 1, "", "ewm_std"], [454, 0, 1, "", "ewm_var"], [455, 0, 1, "", "exclude"], [456, 0, 1, "", "exp"], [457, 0, 1, "", "explode"], [458, 0, 1, "", "extend_constant"], [459, 0, 1, "", "fill_nan"], [460, 0, 1, "", "fill_null"], [461, 0, 1, "", "filter"], [462, 0, 1, "", "first"], [463, 0, 1, "", "flatten"], [464, 0, 1, "", "floor"], [465, 0, 1, "", "floordiv"], [466, 0, 1, "", "forward_fill"], [467, 0, 1, "", "from_json"], [468, 0, 1, "", "gather"], [469, 0, 1, "", "gather_every"], [470, 0, 1, "", "ge"], [471, 0, 1, "", "get"], [472, 0, 1, "", "gt"], [473, 0, 1, "", "has_nulls"], [474, 0, 1, "", "hash"], [475, 0, 1, "", "head"], [476, 0, 1, "", "hist"], [477, 0, 1, "", "implode"], [478, 0, 1, "", "inspect"], [479, 0, 1, "", "interpolate"], [480, 0, 1, "", "interpolate_by"], [481, 0, 1, "", "is_between"], [482, 0, 1, "", "is_duplicated"], [483, 0, 1, "", "is_finite"], [484, 0, 1, "", "is_first_distinct"], [485, 0, 1, "", "is_in"], [486, 0, 1, "", "is_infinite"], [487, 0, 1, "", "is_last_distinct"], [488, 0, 1, "", "is_nan"], [489, 0, 1, "", "is_not_nan"], [490, 0, 1, "", "is_not_null"], [491, 0, 1, "", "is_null"], [492, 0, 1, "", "is_unique"], [493, 0, 1, "", "kurtosis"], [494, 0, 1, "", "last"], [495, 0, 1, "", "le"], [496, 0, 1, "", "len"], [497, 0, 1, "", "limit"], [538, 0, 1, "", "log"], [539, 0, 1, "", "log10"], [540, 0, 1, "", "log1p"], [541, 0, 1, "", "lower_bound"], [542, 0, 1, "", "lt"], [543, 0, 1, "", "map_batches"], [544, 0, 1, "", "map_elements"], [545, 0, 1, "", "max"], [546, 0, 1, "", "mean"], [547, 0, 1, "", "median"], [560, 0, 1, "", "min"], [561, 0, 1, "", "mod"], [562, 0, 1, "", "mode"], [563, 0, 1, "", "mul"], [564, 0, 1, "", "n_unique"], [574, 0, 1, "", "nan_max"], [575, 0, 1, "", "nan_min"], [576, 0, 1, "", "ne"], [577, 0, 1, "", "ne_missing"], [578, 0, 1, "", "neg"], [579, 0, 1, "", "not_"], [580, 0, 1, "", "null_count"], [581, 0, 1, "", "or_"], [582, 0, 1, "", "over"], [583, 0, 1, "", "pct_change"], [584, 0, 1, "", "peak_max"], [585, 0, 1, "", "peak_min"], [586, 0, 1, "", "pipe"], [587, 0, 1, "", "pow"], [588, 0, 1, "", "product"], [589, 0, 1, "", "qcut"], [590, 0, 1, "", "quantile"], [591, 0, 1, "", "radians"], [592, 0, 1, "", "rank"], [593, 0, 1, "", "rechunk"], [594, 0, 1, "", "reinterpret"], [595, 0, 1, "", "repeat_by"], [596, 0, 1, "", "replace"], [597, 0, 1, "", "replace_strict"], [598, 0, 1, "", "reshape"], [599, 0, 1, "", "reverse"], [600, 0, 1, "", "rle"], [601, 0, 1, "", "rle_id"], [602, 0, 1, "", "rolling"], [603, 0, 1, "", "rolling_map"], [604, 0, 1, "", "rolling_max"], [605, 0, 1, "", "rolling_max_by"], [606, 0, 1, "", "rolling_mean"], [607, 0, 1, "", "rolling_mean_by"], [608, 0, 1, "", "rolling_median"], [609, 0, 1, "", "rolling_median_by"], [610, 0, 1, "", "rolling_min"], [611, 0, 1, "", "rolling_min_by"], [612, 0, 1, "", "rolling_quantile"], [613, 0, 1, "", "rolling_quantile_by"], [614, 0, 1, "", "rolling_skew"], [615, 0, 1, "", "rolling_std"], [616, 0, 1, "", "rolling_std_by"], [617, 0, 1, "", "rolling_sum"], [618, 0, 1, "", "rolling_sum_by"], [619, 0, 1, "", "rolling_var"], [620, 0, 1, "", "rolling_var_by"], [621, 0, 1, "", "round"], [622, 0, 1, "", "round_sig_figs"], [623, 0, 1, "", "sample"], [624, 0, 1, "", "search_sorted"], [625, 0, 1, "", "set_sorted"], [626, 0, 1, "", "shift"], [627, 0, 1, "", "shrink_dtype"], [628, 0, 1, "", "shuffle"], [629, 0, 1, "", "sign"], [630, 0, 1, "", "sin"], [631, 0, 1, "", "sinh"], [632, 0, 1, "", "skew"], [633, 0, 1, "", "slice"], [634, 0, 1, "", "sort"], [635, 0, 1, "", "sort_by"], [636, 0, 1, "", "sqrt"], [637, 0, 1, "", "std"], [688, 0, 1, "", "sub"], [689, 0, 1, "", "sum"], [690, 0, 1, "", "tail"], [691, 0, 1, "", "tan"], [692, 0, 1, "", "tanh"], [693, 0, 1, "", "to_physical"], [694, 0, 1, "", "top_k"], [695, 0, 1, "", "top_k_by"], [696, 0, 1, "", "truediv"], [697, 0, 1, "", "unique"], [698, 0, 1, "", "unique_counts"], [699, 0, 1, "", "upper_bound"], [700, 0, 1, "", "value_counts"], [701, 0, 1, "", "var"], [702, 0, 1, "", "where"], [703, 0, 1, "", "xor"]], "polars.Expr.arr": [[341, 0, 1, "", "all"], [342, 0, 1, "", "any"], [343, 0, 1, "", "arg_max"], [344, 0, 1, "", "arg_min"], [345, 0, 1, "", "contains"], [346, 0, 1, "", "count_matches"], [347, 0, 1, "", "explode"], [348, 0, 1, "", "first"], [349, 0, 1, "", "get"], [350, 0, 1, "", "join"], [351, 0, 1, "", "last"], [352, 0, 1, "", "max"], [353, 0, 1, "", "median"], [354, 0, 1, "", "min"], [355, 0, 1, "", "n_unique"], [356, 0, 1, "", "reverse"], [357, 0, 1, "", "shift"], [358, 0, 1, "", "sort"], [359, 0, 1, "", "std"], [360, 0, 1, "", "sum"], [361, 0, 1, "", "to_list"], [362, 0, 1, "", "to_struct"], [363, 0, 1, "", "unique"], [364, 0, 1, "", "var"]], "polars.Expr.bin": [[366, 0, 1, "", "contains"], [367, 0, 1, "", "decode"], [368, 0, 1, "", "encode"], [369, 0, 1, "", "ends_with"], [370, 0, 1, "", "size"], [371, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[383, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[404, 0, 1, "", "add_business_days"], [405, 0, 1, "", "base_utc_offset"], [406, 0, 1, "", "cast_time_unit"], [407, 0, 1, "", "century"], [408, 0, 1, "", "combine"], [409, 0, 1, "", "convert_time_zone"], [410, 0, 1, "", "date"], [411, 0, 1, "", "datetime"], [412, 0, 1, "", "day"], [413, 0, 1, "", "dst_offset"], [414, 0, 1, "", "epoch"], [415, 0, 1, "", "hour"], [416, 0, 1, "", "is_leap_year"], [417, 0, 1, "", "iso_year"], [418, 0, 1, "", "microsecond"], [419, 0, 1, "", "millennium"], [420, 0, 1, "", "millisecond"], [421, 0, 1, "", "minute"], [422, 0, 1, "", "month"], [423, 0, 1, "", "month_end"], [424, 0, 1, "", "month_start"], [425, 0, 1, "", "nanosecond"], [426, 0, 1, "", "offset_by"], [427, 0, 1, "", "ordinal_day"], [428, 0, 1, "", "quarter"], [429, 0, 1, "", "replace_time_zone"], [430, 0, 1, "", "round"], [431, 0, 1, "", "second"], [432, 0, 1, "", "strftime"], [433, 0, 1, "", "time"], [434, 0, 1, "", "timestamp"], [435, 0, 1, "", "to_string"], [436, 0, 1, "", "total_days"], [437, 0, 1, "", "total_hours"], [438, 0, 1, "", "total_microseconds"], [439, 0, 1, "", "total_milliseconds"], [440, 0, 1, "", "total_minutes"], [441, 0, 1, "", "total_nanoseconds"], [442, 0, 1, "", "total_seconds"], [443, 0, 1, "", "truncate"], [444, 0, 1, "", "week"], [445, 0, 1, "", "weekday"], [446, 0, 1, "", "with_time_unit"], [447, 0, 1, "", "year"]], "polars.Expr.list": [[498, 0, 1, "", "all"], [499, 0, 1, "", "any"], [500, 0, 1, "", "arg_max"], [501, 0, 1, "", "arg_min"], [502, 0, 1, "", "concat"], [503, 0, 1, "", "contains"], [504, 0, 1, "", "count_matches"], [505, 0, 1, "", "diff"], [506, 0, 1, "", "drop_nulls"], [507, 0, 1, "", "eval"], [508, 0, 1, "", "explode"], [509, 0, 1, "", "first"], [510, 0, 1, "", "gather"], [511, 0, 1, "", "gather_every"], [512, 0, 1, "", "get"], [513, 0, 1, "", "head"], [514, 0, 1, "", "join"], [515, 0, 1, "", "last"], [516, 0, 1, "", "len"], [517, 0, 1, "", "max"], [518, 0, 1, "", "mean"], [519, 0, 1, "", "median"], [520, 0, 1, "", "min"], [521, 0, 1, "", "n_unique"], [522, 0, 1, "", "reverse"], [523, 0, 1, "", "sample"], [524, 0, 1, "", "set_difference"], [525, 0, 1, "", "set_intersection"], [526, 0, 1, "", "set_symmetric_difference"], [527, 0, 1, "", "set_union"], [528, 0, 1, "", "shift"], [529, 0, 1, "", "slice"], [530, 0, 1, "", "sort"], [531, 0, 1, "", "std"], [532, 0, 1, "", "sum"], [533, 0, 1, "", "tail"], [534, 0, 1, "", "to_array"], [535, 0, 1, "", "to_struct"], [536, 0, 1, "", "unique"], [537, 0, 1, "", "var"]], "polars.Expr.meta": [[548, 0, 1, "", "eq"], [549, 0, 1, "", "has_multiple_outputs"], [550, 0, 1, "", "is_column_selection"], [551, 0, 1, "", "is_regex_projection"], [552, 0, 1, "", "ne"], [553, 0, 1, "", "output_name"], [554, 0, 1, "", "pop"], [555, 0, 1, "", "root_names"], [556, 0, 1, "", "serialize"], [557, 0, 1, "", "tree_format"], [558, 0, 1, "", "undo_aliases"], [559, 0, 1, "", "write_json"]], "polars.Expr.name": [[565, 0, 1, "", "keep"], [566, 0, 1, "", "map"], [567, 0, 1, "", "map_fields"], [568, 0, 1, "", "prefix"], [569, 0, 1, "", "prefix_fields"], [570, 0, 1, "", "suffix"], [571, 0, 1, "", "suffix_fields"], [572, 0, 1, "", "to_lowercase"], [573, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[638, 0, 1, "", "concat"], [639, 0, 1, "", "contains"], [640, 0, 1, "", "contains_any"], [641, 0, 1, "", "count_matches"], [642, 0, 1, "", "decode"], [643, 0, 1, "", "encode"], [644, 0, 1, "", "ends_with"], [645, 0, 1, "", "explode"], [646, 0, 1, "", "extract"], [647, 0, 1, "", "extract_all"], [648, 0, 1, "", "extract_groups"], [649, 0, 1, "", "extract_many"], [650, 0, 1, "", "find"], [651, 0, 1, "", "head"], [652, 0, 1, "", "join"], [653, 0, 1, "", "json_decode"], [654, 0, 1, "", "json_path_match"], [655, 0, 1, "", "len_bytes"], [656, 0, 1, "", "len_chars"], [657, 0, 1, "", "pad_end"], [658, 0, 1, "", "pad_start"], [659, 0, 1, "", "replace"], [660, 0, 1, "", "replace_all"], [661, 0, 1, "", "replace_many"], [662, 0, 1, "", "reverse"], [663, 0, 1, "", "slice"], [664, 0, 1, "", "split"], [665, 0, 1, "", "split_exact"], [666, 0, 1, "", "splitn"], [667, 0, 1, "", "starts_with"], [668, 0, 1, "", "strip_chars"], [669, 0, 1, "", "strip_chars_end"], [670, 0, 1, "", "strip_chars_start"], [671, 0, 1, "", "strip_prefix"], [672, 0, 1, "", "strip_suffix"], [673, 0, 1, "", "strptime"], [674, 0, 1, "", "tail"], [675, 0, 1, "", "to_date"], [676, 0, 1, "", "to_datetime"], [677, 0, 1, "", "to_decimal"], [678, 0, 1, "", "to_integer"], [679, 0, 1, "", "to_lowercase"], [680, 0, 1, "", "to_time"], [681, 0, 1, "", "to_titlecase"], [682, 0, 1, "", "to_uppercase"], [683, 0, 1, "", "zfill"]], "polars.Expr.struct": [[684, 0, 1, "", "field"], [685, 0, 1, "", "json_encode"], [686, 0, 1, "", "rename_fields"], [687, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[801, 0, 1, "", "approx_n_unique"], [802, 0, 1, "", "bottom_k"], [803, 0, 1, "", "cache"], [804, 0, 1, "", "cast"], [805, 0, 1, "", "clear"], [806, 0, 1, "", "clone"], [807, 0, 1, "", "collect"], [808, 0, 1, "", "collect_async"], [809, 0, 1, "", "collect_schema"], [810, 1, 1, "", "columns"], [811, 0, 1, "", "count"], [812, 0, 1, "", "describe"], [813, 0, 1, "", "deserialize"], [814, 0, 1, "", "drop"], [815, 0, 1, "", "drop_nulls"], [816, 1, 1, "", "dtypes"], [817, 0, 1, "", "explain"], [818, 0, 1, "", "explode"], [819, 0, 1, "", "fill_nan"], [820, 0, 1, "", "fill_null"], [821, 0, 1, "", "filter"], [822, 0, 1, "", "first"], [823, 0, 1, "", "gather_every"], [824, 0, 1, "", "group_by"], [825, 0, 1, "", "group_by_dynamic"], [826, 0, 1, "", "head"], [827, 0, 1, "", "inspect"], [828, 0, 1, "", "interpolate"], [829, 0, 1, "", "join"], [830, 0, 1, "", "join_asof"], [831, 0, 1, "", "join_where"], [832, 0, 1, "", "last"], [833, 0, 1, "", "lazy"], [834, 0, 1, "", "limit"], [835, 0, 1, "", "map_batches"], [836, 0, 1, "", "max"], [837, 0, 1, "", "mean"], [838, 0, 1, "", "median"], [839, 0, 1, "", "melt"], [840, 0, 1, "", "merge_sorted"], [841, 0, 1, "", "min"], [842, 0, 1, "", "null_count"], [843, 0, 1, "", "pipe"], [844, 0, 1, "", "profile"], [845, 0, 1, "", "quantile"], [846, 0, 1, "", "rename"], [847, 0, 1, "", "reverse"], [848, 0, 1, "", "rolling"], [849, 1, 1, "", "schema"], [850, 0, 1, "", "select"], [851, 0, 1, "", "select_seq"], [852, 0, 1, "", "serialize"], [853, 0, 1, "", "set_sorted"], [854, 0, 1, "", "shift"], [855, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [856, 0, 1, "", "slice"], [857, 0, 1, "", "sort"], [858, 0, 1, "", "sql"], [859, 0, 1, "", "std"], [860, 0, 1, "", "sum"], [861, 0, 1, "", "tail"], [862, 0, 1, "", "top_k"], [863, 0, 1, "", "unique"], [864, 0, 1, "", "unnest"], [865, 0, 1, "", "unpivot"], [866, 0, 1, "", "update"], [867, 0, 1, "", "var"], [868, 1, 1, "", "width"], [869, 0, 1, "", "with_columns"], [870, 0, 1, "", "with_columns_seq"], [871, 0, 1, "", "with_context"], [872, 0, 1, "", "with_row_count"], [873, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1307, 0, 1, "", "__enter__"], [1307, 0, 1, "", "__exit__"], [1307, 0, 1, "", "__init__"], [1289, 0, 1, "", "execute"], [1290, 0, 1, "", "execute_global"], [1291, 0, 1, "", "register"], [1292, 0, 1, "", "register_globals"], [1293, 0, 1, "", "register_many"], [1294, 0, 1, "", "tables"], [1295, 0, 1, "", "unregister"]], "polars.Series": [[907, 0, 1, "", "__array__"], [908, 0, 1, "", "__arrow_c_stream__"], [909, 0, 1, "", "__getitem__"], [910, 0, 1, "", "abs"], [911, 0, 1, "", "alias"], [912, 0, 1, "", "all"], [913, 0, 1, "", "any"], [914, 0, 1, "", "append"], [915, 0, 1, "", "arccos"], [916, 0, 1, "", "arccosh"], [917, 0, 1, "", "arcsin"], [918, 0, 1, "", "arcsinh"], [919, 0, 1, "", "arctan"], [920, 0, 1, "", "arctanh"], [921, 0, 1, "", "arg_max"], [922, 0, 1, "", "arg_min"], [923, 0, 1, "", "arg_sort"], [924, 0, 1, "", "arg_true"], [925, 0, 1, "", "arg_unique"], [956, 0, 1, "", "bitwise_and"], [957, 0, 1, "", "bitwise_count_ones"], [958, 0, 1, "", "bitwise_count_zeros"], [959, 0, 1, "", "bitwise_leading_ones"], [960, 0, 1, "", "bitwise_or"], [961, 0, 1, "", "bitwise_trailing_ones"], [962, 0, 1, "", "bitwise_trailing_zeros"], [963, 0, 1, "", "bitwise_xor"], [964, 0, 1, "", "bottom_k"], [965, 0, 1, "", "cast"], [970, 0, 1, "", "cbrt"], [971, 0, 1, "", "ceil"], [972, 0, 1, "", "chunk_lengths"], [973, 0, 1, "", "clear"], [974, 0, 1, "", "clip"], [975, 0, 1, "", "clone"], [976, 0, 1, "", "cos"], [977, 0, 1, "", "cosh"], [978, 0, 1, "", "cot"], [979, 0, 1, "", "count"], [980, 0, 1, "", "cum_count"], [981, 0, 1, "", "cum_max"], [982, 0, 1, "", "cum_min"], [983, 0, 1, "", "cum_prod"], [984, 0, 1, "", "cum_sum"], [985, 0, 1, "", "cumulative_eval"], [986, 0, 1, "", "cut"], [987, 0, 1, "", "describe"], [988, 0, 1, "", "diff"], [989, 0, 1, "", "dot"], [990, 0, 1, "", "drop_nans"], [991, 0, 1, "", "drop_nulls"], [1040, 1, 1, "", "dtype"], [1041, 0, 1, "", "entropy"], [1042, 0, 1, "", "eq"], [1043, 0, 1, "", "eq_missing"], [1044, 0, 1, "", "equals"], [1045, 0, 1, "", "estimated_size"], [1046, 0, 1, "", "ewm_mean"], [1047, 0, 1, "", "ewm_mean_by"], [1048, 0, 1, "", "ewm_std"], [1049, 0, 1, "", "ewm_var"], [1050, 0, 1, "", "exp"], [1051, 0, 1, "", "explode"], [1052, 0, 1, "", "extend"], [1053, 0, 1, "", "extend_constant"], [1054, 0, 1, "", "fill_nan"], [1055, 0, 1, "", "fill_null"], [1056, 0, 1, "", "filter"], [1057, 1, 1, "", "flags"], [1058, 0, 1, "", "floor"], [1059, 0, 1, "", "gather"], [1060, 0, 1, "", "gather_every"], [1061, 0, 1, "", "ge"], [1062, 0, 1, "", "get_chunks"], [1063, 0, 1, "", "gt"], [1064, 0, 1, "", "has_nulls"], [1065, 0, 1, "", "has_validity"], [1066, 0, 1, "", "hash"], [1067, 0, 1, "", "head"], [1068, 0, 1, "", "hist"], [1069, 0, 1, "", "implode"], [1070, 0, 1, "", "interpolate"], [1071, 0, 1, "", "interpolate_by"], [1072, 0, 1, "", "is_between"], [1073, 0, 1, "", "is_duplicated"], [1074, 0, 1, "", "is_empty"], [1075, 0, 1, "", "is_finite"], [1076, 0, 1, "", "is_first_distinct"], [1077, 0, 1, "", "is_in"], [1078, 0, 1, "", "is_infinite"], [1079, 0, 1, "", "is_last_distinct"], [1080, 0, 1, "", "is_nan"], [1081, 0, 1, "", "is_not_nan"], [1082, 0, 1, "", "is_not_null"], [1083, 0, 1, "", "is_null"], [1084, 0, 1, "", "is_sorted"], [1085, 0, 1, "", "is_unique"], [1086, 0, 1, "", "item"], [1087, 0, 1, "", "kurtosis"], [1088, 0, 1, "", "le"], [1089, 0, 1, "", "len"], [1090, 0, 1, "", "limit"], [1131, 0, 1, "", "log"], [1132, 0, 1, "", "log10"], [1133, 0, 1, "", "log1p"], [1134, 0, 1, "", "lower_bound"], [1135, 0, 1, "", "lt"], [1136, 0, 1, "", "map_elements"], [1137, 0, 1, "", "max"], [1138, 0, 1, "", "mean"], [1139, 0, 1, "", "median"], [1140, 0, 1, "", "min"], [1141, 0, 1, "", "mode"], [1142, 0, 1, "", "n_chunks"], [1143, 0, 1, "", "n_unique"], [1144, 1, 1, "", "name"], [1145, 0, 1, "", "nan_max"], [1146, 0, 1, "", "nan_min"], [1147, 0, 1, "", "ne"], [1148, 0, 1, "", "ne_missing"], [1149, 0, 1, "", "new_from_index"], [1150, 0, 1, "", "not_"], [1151, 0, 1, "", "null_count"], [1152, 0, 1, "", "pct_change"], [1153, 0, 1, "", "peak_max"], [1154, 0, 1, "", "peak_min"], [1285, 1, 1, "", "plot"], [1155, 0, 1, "", "pow"], [1156, 0, 1, "", "product"], [1157, 0, 1, "", "qcut"], [1158, 0, 1, "", "quantile"], [1159, 0, 1, "", "rank"], [1160, 0, 1, "", "rechunk"], [1161, 0, 1, "", "reinterpret"], [1162, 0, 1, "", "rename"], [1163, 0, 1, "", "replace"], [1164, 0, 1, "", "replace_strict"], [1165, 0, 1, "", "reshape"], [1166, 0, 1, "", "reverse"], [1167, 0, 1, "", "rle"], [1168, 0, 1, "", "rle_id"], [1169, 0, 1, "", "rolling_map"], [1170, 0, 1, "", "rolling_max"], [1171, 0, 1, "", "rolling_mean"], [1172, 0, 1, "", "rolling_median"], [1173, 0, 1, "", "rolling_min"], [1174, 0, 1, "", "rolling_quantile"], [1175, 0, 1, "", "rolling_skew"], [1176, 0, 1, "", "rolling_std"], [1177, 0, 1, "", "rolling_sum"], [1178, 0, 1, "", "rolling_var"], [1179, 0, 1, "", "round"], [1180, 0, 1, "", "round_sig_figs"], [1181, 0, 1, "", "sample"], [1182, 0, 1, "", "scatter"], [1183, 0, 1, "", "search_sorted"], [1184, 0, 1, "", "set"], [1185, 0, 1, "", "set_sorted"], [1186, 1, 1, "", "shape"], [1187, 0, 1, "", "shift"], [1188, 0, 1, "", "shrink_dtype"], [1189, 0, 1, "", "shrink_to_fit"], [1190, 0, 1, "", "shuffle"], [1191, 0, 1, "", "sign"], [1192, 0, 1, "", "sin"], [1193, 0, 1, "", "sinh"], [1194, 0, 1, "", "skew"], [1195, 0, 1, "", "slice"], [1196, 0, 1, "", "sort"], [1197, 0, 1, "", "sqrt"], [1198, 0, 1, "", "std"], [1251, 0, 1, "", "sum"], [1252, 0, 1, "", "tail"], [1253, 0, 1, "", "tan"], [1254, 0, 1, "", "tanh"], [1255, 0, 1, "", "to_arrow"], [1256, 0, 1, "", "to_dummies"], [1257, 0, 1, "", "to_frame"], [1258, 0, 1, "", "to_init_repr"], [1259, 0, 1, "", "to_jax"], [1260, 0, 1, "", "to_list"], [1261, 0, 1, "", "to_numpy"], [1262, 0, 1, "", "to_pandas"], [1263, 0, 1, "", "to_physical"], [1264, 0, 1, "", "to_torch"], [1265, 0, 1, "", "top_k"], [1266, 0, 1, "", "unique"], [1267, 0, 1, "", "unique_counts"], [1268, 0, 1, "", "upper_bound"], [1269, 0, 1, "", "value_counts"], [1270, 0, 1, "", "var"], [1271, 0, 1, "", "zip_with"]], "polars.Series.arr": [[926, 0, 1, "", "all"], [927, 0, 1, "", "any"], [928, 0, 1, "", "arg_max"], [929, 0, 1, "", "arg_min"], [930, 0, 1, "", "contains"], [931, 0, 1, "", "count_matches"], [932, 0, 1, "", "explode"], [933, 0, 1, "", "first"], [934, 0, 1, "", "get"], [935, 0, 1, "", "join"], [936, 0, 1, "", "last"], [937, 0, 1, "", "max"], [938, 0, 1, "", "median"], [939, 0, 1, "", "min"], [940, 0, 1, "", "n_unique"], [941, 0, 1, "", "reverse"], [942, 0, 1, "", "shift"], [943, 0, 1, "", "sort"], [944, 0, 1, "", "std"], [945, 0, 1, "", "sum"], [946, 0, 1, "", "to_list"], [947, 0, 1, "", "to_struct"], [948, 0, 1, "", "unique"], [949, 0, 1, "", "var"]], "polars.Series.bin": [[950, 0, 1, "", "contains"], [951, 0, 1, "", "decode"], [952, 0, 1, "", "encode"], [953, 0, 1, "", "ends_with"], [954, 0, 1, "", "size"], [955, 0, 1, "", "starts_with"]], "polars.Series.cat": [[966, 0, 1, "", "get_categories"], [967, 0, 1, "", "is_local"], [968, 0, 1, "", "to_local"], [969, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[992, 0, 1, "", "add_business_days"], [993, 0, 1, "", "base_utc_offset"], [994, 0, 1, "", "cast_time_unit"], [995, 0, 1, "", "century"], [996, 0, 1, "", "combine"], [997, 0, 1, "", "convert_time_zone"], [998, 0, 1, "", "date"], [999, 0, 1, "", "datetime"], [1000, 0, 1, "", "day"], [1001, 0, 1, "", "dst_offset"], [1002, 0, 1, "", "epoch"], [1003, 0, 1, "", "hour"], [1004, 0, 1, "", "is_leap_year"], [1005, 0, 1, "", "iso_year"], [1006, 0, 1, "", "max"], [1007, 0, 1, "", "mean"], [1008, 0, 1, "", "median"], [1009, 0, 1, "", "microsecond"], [1010, 0, 1, "", "millennium"], [1011, 0, 1, "", "millisecond"], [1012, 0, 1, "", "min"], [1013, 0, 1, "", "minute"], [1014, 0, 1, "", "month"], [1015, 0, 1, "", "month_end"], [1016, 0, 1, "", "month_start"], [1017, 0, 1, "", "nanosecond"], [1018, 0, 1, "", "offset_by"], [1019, 0, 1, "", "ordinal_day"], [1020, 0, 1, "", "quarter"], [1021, 0, 1, "", "replace_time_zone"], [1022, 0, 1, "", "round"], [1023, 0, 1, "", "second"], [1024, 0, 1, "", "strftime"], [1025, 0, 1, "", "time"], [1026, 0, 1, "", "timestamp"], [1027, 0, 1, "", "to_string"], [1028, 0, 1, "", "total_days"], [1029, 0, 1, "", "total_hours"], [1030, 0, 1, "", "total_microseconds"], [1031, 0, 1, "", "total_milliseconds"], [1032, 0, 1, "", "total_minutes"], [1033, 0, 1, "", "total_nanoseconds"], [1034, 0, 1, "", "total_seconds"], [1035, 0, 1, "", "truncate"], [1036, 0, 1, "", "week"], [1037, 0, 1, "", "weekday"], [1038, 0, 1, "", "with_time_unit"], [1039, 0, 1, "", "year"]], "polars.Series.list": [[1091, 0, 1, "", "all"], [1092, 0, 1, "", "any"], [1093, 0, 1, "", "arg_max"], [1094, 0, 1, "", "arg_min"], [1095, 0, 1, "", "concat"], [1096, 0, 1, "", "contains"], [1097, 0, 1, "", "count_matches"], [1098, 0, 1, "", "diff"], [1099, 0, 1, "", "drop_nulls"], [1100, 0, 1, "", "eval"], [1101, 0, 1, "", "explode"], [1102, 0, 1, "", "first"], [1103, 0, 1, "", "gather"], [1104, 0, 1, "", "gather_every"], [1105, 0, 1, "", "get"], [1106, 0, 1, "", "head"], [1107, 0, 1, "", "join"], [1108, 0, 1, "", "last"], [1109, 0, 1, "", "len"], [1110, 0, 1, "", "max"], [1111, 0, 1, "", "mean"], [1112, 0, 1, "", "median"], [1113, 0, 1, "", "min"], [1114, 0, 1, "", "n_unique"], [1115, 0, 1, "", "reverse"], [1116, 0, 1, "", "sample"], [1117, 0, 1, "", "set_difference"], [1118, 0, 1, "", "set_intersection"], [1119, 0, 1, "", "set_symmetric_difference"], [1120, 0, 1, "", "set_union"], [1121, 0, 1, "", "shift"], [1122, 0, 1, "", "slice"], [1123, 0, 1, "", "sort"], [1124, 0, 1, "", "std"], [1125, 0, 1, "", "sum"], [1126, 0, 1, "", "tail"], [1127, 0, 1, "", "to_array"], [1128, 0, 1, "", "to_struct"], [1129, 0, 1, "", "unique"], [1130, 0, 1, "", "var"]], "polars.Series.str": [[1199, 0, 1, "", "concat"], [1200, 0, 1, "", "contains"], [1201, 0, 1, "", "contains_any"], [1202, 0, 1, "", "count_matches"], [1203, 0, 1, "", "decode"], [1204, 0, 1, "", "encode"], [1205, 0, 1, "", "ends_with"], [1206, 0, 1, "", "explode"], [1207, 0, 1, "", "extract"], [1208, 0, 1, "", "extract_all"], [1209, 0, 1, "", "extract_groups"], [1210, 0, 1, "", "extract_many"], [1211, 0, 1, "", "find"], [1212, 0, 1, "", "head"], [1213, 0, 1, "", "join"], [1214, 0, 1, "", "json_decode"], [1215, 0, 1, "", "json_path_match"], [1216, 0, 1, "", "len_bytes"], [1217, 0, 1, "", "len_chars"], [1218, 0, 1, "", "pad_end"], [1219, 0, 1, "", "pad_start"], [1220, 0, 1, "", "replace"], [1221, 0, 1, "", "replace_all"], [1222, 0, 1, "", "replace_many"], [1223, 0, 1, "", "reverse"], [1224, 0, 1, "", "slice"], [1225, 0, 1, "", "split"], [1226, 0, 1, "", "split_exact"], [1227, 0, 1, "", "splitn"], [1228, 0, 1, "", "starts_with"], [1229, 0, 1, "", "strip_chars"], [1230, 0, 1, "", "strip_chars_end"], [1231, 0, 1, "", "strip_chars_start"], [1232, 0, 1, "", "strip_prefix"], [1233, 0, 1, "", "strip_suffix"], [1234, 0, 1, "", "strptime"], [1235, 0, 1, "", "tail"], [1236, 0, 1, "", "to_date"], [1237, 0, 1, "", "to_datetime"], [1238, 0, 1, "", "to_decimal"], [1239, 0, 1, "", "to_integer"], [1240, 0, 1, "", "to_lowercase"], [1241, 0, 1, "", "to_time"], [1242, 0, 1, "", "to_titlecase"], [1243, 0, 1, "", "to_uppercase"], [1244, 0, 1, "", "zfill"]], "polars.Series.struct": [[1245, 0, 1, "", "field"], [1246, 3, 1, "", "fields"], [1247, 0, 1, "", "json_encode"], [1248, 0, 1, "", "rename_fields"], [1249, 3, 1, "", "schema"], [1250, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[291, 0, 1, "", "__iter__"], [292, 0, 1, "", "agg"], [293, 0, 1, "", "all"], [294, 0, 1, "", "count"], [295, 0, 1, "", "first"], [296, 0, 1, "", "head"], [297, 0, 1, "", "last"], [298, 0, 1, "", "len"], [299, 0, 1, "", "map_groups"], [300, 0, 1, "", "max"], [301, 0, 1, "", "mean"], [302, 0, 1, "", "median"], [303, 0, 1, "", "min"], [304, 0, 1, "", "n_unique"], [305, 0, 1, "", "quantile"], [306, 0, 1, "", "sum"], [307, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[874, 2, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[874, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[875, 0, 1, "", "agg"], [876, 0, 1, "", "all"], [877, 0, 1, "", "count"], [878, 0, 1, "", "first"], [879, 0, 1, "", "head"], [880, 0, 1, "", "last"], [881, 0, 1, "", "len"], [882, 0, 1, "", "map_groups"], [883, 0, 1, "", "max"], [884, 0, 1, "", "mean"], [885, 0, 1, "", "median"], [886, 0, 1, "", "min"], [887, 0, 1, "", "n_unique"], [888, 0, 1, "", "quantile"], [889, 0, 1, "", "sum"], [890, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[891, 0, 1, "", "cancel"], [892, 0, 1, "", "fetch"], [893, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[903, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[905, 4, 1, "", "all"], [905, 4, 1, "", "alpha"], [905, 4, 1, "", "alphanumeric"], [905, 4, 1, "", "binary"], [905, 4, 1, "", "boolean"], [905, 4, 1, "", "by_dtype"], [905, 4, 1, "", "by_index"], [905, 4, 1, "", "by_name"], [905, 4, 1, "", "categorical"], [905, 4, 1, "", "contains"], [905, 4, 1, "", "date"], [905, 4, 1, "", "datetime"], [905, 4, 1, "", "decimal"], [905, 4, 1, "", "digit"], [905, 4, 1, "", "duration"], [905, 4, 1, "", "ends_with"], [905, 4, 1, "", "exclude"], [905, 4, 1, "", "expand_selector"], [905, 4, 1, "", "first"], [905, 4, 1, "", "float"], [905, 4, 1, "", "integer"], [905, 4, 1, "", "is_selector"], [905, 4, 1, "", "last"], [905, 4, 1, "", "matches"], [905, 4, 1, "", "numeric"], [905, 4, 1, "", "signed_integer"], [905, 4, 1, "", "starts_with"], [905, 4, 1, "", "string"], [905, 4, 1, "", "temporal"], [905, 4, 1, "", "time"], [905, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 163, 175, 176, 187, 190, 195, 198, 203, 204, 209, 215, 218, 219, 229, 236, 238, 243, 245, 248, 251, 252, 259, 268, 271, 276, 278, 279, 280, 281, 282, 287, 288, 313, 350, 381, 382, 409, 414, 432, 435, 455, 461, 465, 493, 514, 543, 544, 554, 562, 567, 574, 575, 582, 583, 594, 601, 635, 639, 646, 647, 648, 650, 651, 659, 660, 663, 664, 666, 673, 674, 675, 676, 680, 684, 686, 687, 695, 704, 705, 706, 707, 712, 718, 721, 724, 725, 734, 735, 737, 738, 744, 747, 748, 749, 750, 752, 754, 755, 757, 764, 766, 768, 769, 770, 776, 782, 786, 802, 804, 815, 824, 825, 830, 839, 850, 851, 857, 862, 863, 864, 865, 866, 869, 870, 882, 899, 904, 905, 909, 910, 911, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1016, 1019, 1022, 1023, 1024, 1027, 1035, 1037, 1038, 1039, 1040, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1280, 1285, 1289, 1293, 1296, 1302, 1303], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 193, 194, 195, 197, 198, 201, 202, 203, 204, 205, 209, 210, 214, 216, 217, 218, 221, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 238, 239, 240, 243, 245, 247, 248, 249, 250, 251, 258, 259, 260, 261, 263, 268, 269, 270, 271, 272, 273, 275, 277, 281, 283, 284, 287, 289, 290, 292, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 313, 316, 317, 321, 323, 324, 326, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 346, 349, 359, 362, 364, 370, 382, 384, 385, 387, 388, 389, 396, 397, 398, 402, 403, 404, 410, 411, 415, 418, 420, 421, 425, 431, 433, 438, 439, 441, 442, 446, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 464, 465, 467, 469, 470, 472, 474, 476, 479, 480, 483, 486, 488, 489, 490, 491, 493, 495, 500, 501, 504, 507, 510, 511, 512, 518, 519, 531, 535, 537, 538, 539, 540, 542, 543, 545, 546, 547, 550, 554, 559, 560, 561, 563, 565, 574, 575, 576, 577, 578, 580, 581, 583, 586, 587, 589, 590, 591, 592, 596, 597, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 629, 630, 631, 632, 636, 637, 638, 641, 645, 646, 647, 650, 687, 688, 689, 691, 692, 693, 696, 701, 702, 704, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 722, 729, 733, 736, 742, 743, 745, 748, 751, 752, 753, 757, 759, 760, 765, 772, 773, 774, 775, 776, 777, 782, 786, 801, 804, 805, 806, 809, 811, 812, 814, 816, 817, 819, 820, 821, 823, 824, 825, 828, 829, 833, 835, 838, 839, 842, 844, 845, 849, 850, 855, 857, 858, 859, 867, 869, 871, 872, 873, 875, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 899, 905, 909, 915, 916, 917, 918, 919, 920, 921, 923, 925, 928, 934, 944, 947, 949, 954, 965, 968, 970, 971, 973, 976, 977, 978, 985, 986, 987, 989, 990, 991, 992, 999, 1003, 1007, 1008, 1009, 1011, 1013, 1017, 1023, 1030, 1031, 1033, 1034, 1038, 1041, 1046, 1047, 1048, 1049, 1054, 1058, 1060, 1065, 1066, 1068, 1070, 1071, 1075, 1078, 1080, 1081, 1082, 1083, 1086, 1087, 1093, 1094, 1097, 1100, 1103, 1104, 1105, 1111, 1112, 1124, 1128, 1130, 1131, 1132, 1133, 1134, 1138, 1139, 1145, 1146, 1152, 1155, 1157, 1158, 1159, 1163, 1164, 1168, 1169, 1171, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1183, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1202, 1206, 1207, 1208, 1211, 1215, 1253, 1254, 1256, 1259, 1261, 1262, 1263, 1264, 1268, 1270, 1280, 1285, 1289, 1295, 1297, 1298, 1301, 1302, 1304, 1305, 1307, 1309, 1310], "00": [27, 36, 62, 176, 183, 204, 283, 313, 405, 406, 409, 413, 423, 424, 426, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 605, 607, 609, 611, 613, 616, 618, 620, 673, 676, 680, 729, 730, 731, 732, 772, 773, 774, 786, 804, 812, 825, 899, 905, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1008, 1009, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1234, 1237, 1241, 1302], "000": [9, 10, 27, 36, 313, 1310], "0000": [275, 313, 1264, 1280, 1310], "000000": [367, 368, 642, 951, 952, 1203], "00000001": [11, 703, 786], "00000010": [703, 786], "00000011": [703, 786], "00000100": [703, 786], "00001000": [703, 786], "00001010": [703, 786], "00001011": [703, 786], "0000e": 11, "0000ff": [367, 368, 642, 951, 952, 1203], "0005": 905, "00050": 905, "001": [49, 683, 732, 1030, 1031, 1033, 1244], "002": [732, 1030, 1031, 1033], "005": [1041, 1280], "00prefix": 905, "00z": [673, 676, 1234, 1237], "01": [28, 47, 61, 62, 159, 176, 183, 202, 204, 219, 245, 283, 313, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 673, 675, 676, 680, 714, 726, 727, 728, 729, 730, 731, 732, 786, 804, 812, 825, 830, 848, 899, 905, 992, 994, 996, 997, 998, 999, 1002, 1003, 1008, 1009, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1234, 1236, 1237, 1241, 1302, 1305], "010": [9, 678, 1239], "01000": 28, "01000010": [703, 786], "01000110": [703, 786], "012": [622, 786, 1180, 1280], "0123": [683, 1244], "01234": [622, 786, 1180, 1280], "015625": [1155, 1280], "02": [47, 176, 183, 202, 204, 245, 283, 313, 404, 406, 408, 414, 423, 424, 426, 429, 434, 437, 440, 442, 446, 602, 605, 607, 609, 611, 613, 616, 618, 620, 621, 673, 675, 676, 680, 714, 726, 727, 728, 729, 730, 731, 732, 786, 804, 812, 825, 848, 899, 905, 947, 994, 996, 998, 999, 1002, 1003, 1008, 1009, 1013, 1015, 1016, 1017, 1021, 1022, 1025, 1026, 1029, 1032, 1034, 1035, 1128, 1234, 1236, 1237, 1241, 1302, 1303], "03": [47, 123, 129, 176, 204, 219, 245, 283, 313, 406, 408, 409, 414, 423, 424, 426, 429, 430, 432, 434, 435, 436, 437, 440, 442, 443, 446, 452, 465, 602, 605, 607, 609, 611, 613, 616, 618, 620, 675, 680, 726, 727, 728, 729, 730, 731, 732, 786, 804, 825, 830, 848, 899, 905, 994, 996, 997, 1002, 1003, 1008, 1009, 1015, 1016, 1017, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1032, 1034, 1236, 1241], "037037": [1155, 1280], "04": [149, 176, 183, 204, 283, 313, 408, 409, 423, 424, 429, 430, 432, 435, 436, 437, 440, 442, 446, 605, 607, 609, 611, 613, 616, 618, 620, 673, 714, 726, 729, 730, 732, 786, 804, 812, 825, 899, 905, 997, 1009, 1013, 1015, 1016, 1017, 1021, 1024, 1027, 1028, 1029, 1032, 1034, 1038, 1234, 1302], "047198": 1304, "05": [16, 149, 152, 153, 154, 155, 159, 176, 183, 283, 313, 404, 407, 408, 409, 410, 411, 415, 418, 419, 420, 421, 423, 424, 425, 429, 431, 432, 433, 435, 436, 714, 726, 727, 729, 730, 804, 812, 899, 905, 996, 997, 998, 999, 1021, 1022, 1024, 1025, 1027, 1028, 1035, 1302, 1303, 1305], "050545": 123, "0522623626787952": [1087, 1280], "0545": [998, 999, 1025], "06": [159, 176, 283, 313, 404, 408, 422, 428, 429, 430, 431, 443, 444, 726, 729, 804, 899, 905, 992, 1021, 1022, 1035], "060": [410, 411, 415, 418, 420, 421, 425, 431, 433], "0601749420166": [190, 313], "06293300616044681": [1041, 1280], "07": [16, 129, 159, 183, 313, 404, 407, 408, 419, 429, 430, 443, 673, 726, 727, 729, 730, 738, 812, 899, 905, 992, 996, 1021, 1234, 1302, 1305], "071068": [183, 313, 812, 899], "08": [129, 152, 153, 154, 155, 183, 219, 245, 260, 313, 404, 408, 423, 424, 430, 602, 673, 730, 732, 786, 812, 830, 848, 899, 905, 992, 1022, 1035, 1234, 1302, 1303], "085537": [1050, 1280], "09": [47, 129, 183, 245, 313, 404, 408, 423, 424, 582, 602, 677, 726, 727, 729, 774, 786, 812, 848, 899, 905, 992, 1238], "090909": [583, 786], "094395": 1304, "098612": [540, 786, 1131, 1133, 1280, 1301], "0999": [407, 419], "0_": [36, 313], "0m": [413, 1001], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 659, 660, 661, 665, 666, 667, 668, 669, 670, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 782, 786, 801, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 905, 909, 910, 911, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 954, 964, 965, 968, 970, 971, 972, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1207, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1220, 1221, 1222, 1226, 1227, 1244, 1245, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1280, 1285, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310], "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 132, 143, 151, 178, 183, 192, 201, 202, 204, 206, 208, 209, 210, 215, 219, 222, 233, 237, 239, 243, 245, 251, 260, 264, 287, 292, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 324, 328, 336, 337, 338, 340, 386, 392, 395, 400, 404, 405, 407, 408, 410, 411, 413, 415, 418, 419, 420, 421, 423, 424, 425, 429, 430, 431, 433, 443, 446, 452, 473, 474, 475, 479, 485, 497, 505, 511, 513, 519, 529, 531, 533, 537, 539, 553, 555, 565, 580, 582, 583, 586, 596, 597, 602, 633, 678, 687, 690, 703, 714, 715, 722, 727, 729, 730, 733, 736, 738, 740, 746, 747, 771, 774, 786, 807, 808, 812, 825, 826, 828, 830, 834, 843, 844, 848, 850, 860, 861, 869, 875, 878, 880, 883, 884, 885, 886, 887, 888, 889, 899, 905, 974, 988, 992, 993, 995, 996, 1001, 1010, 1021, 1035, 1038, 1041, 1047, 1067, 1077, 1090, 1098, 1106, 1112, 1122, 1124, 1126, 1130, 1132, 1136, 1152, 1164, 1182, 1184, 1239, 1252, 1259, 1261, 1264, 1280, 1289, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1310], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 220, 238, 256, 313, 596, 597, 626, 640, 649, 653, 661, 677, 731, 786, 831, 854, 899, 905, 1043, 1132, 1148, 1163, 1164, 1170, 1171, 1173, 1187, 1201, 1214, 1222, 1238, 1280, 1299, 1310], "1000": [131, 190, 269, 290, 313, 329, 786, 873, 899, 1030, 1132, 1258, 1280, 1310], "10000": [129, 217, 313], "100000": [10, 27], "1000000": [11, 1033], "1001": [290, 313, 873, 899], "1002": [290, 313, 873, 899], "10047419486152048166": [205, 313], "1005": [329, 786], "100_000": [835, 899], "101": [9, 27, 220, 313, 408, 678, 831, 899, 905, 1239, 1310], "101000": 408, "10101": [27, 1305], "1010101": 9, "101514": [183, 313, 812, 899], "102": [220, 313, 831, 899], "1024": [33, 41, 42, 45, 129, 130, 131, 139, 147, 313, 370, 899, 954], "1040361802642726": [1087, 1280], "107149": 1304, "10734580197236529959": [1066, 1280], "1073741824": [627, 786], "10783150408545073287": [205, 313], "107_930_000": 1289, "10_000": [36, 313], "10i": [204, 313, 825, 899], "10m": [430, 443, 1022, 1035], "11": [10, 16, 41, 45, 151, 159, 174, 183, 219, 245, 313, 324, 423, 424, 426, 430, 443, 467, 479, 511, 559, 583, 592, 602, 603, 617, 633, 703, 769, 774, 782, 786, 801, 807, 808, 812, 826, 830, 834, 844, 848, 861, 899, 905, 1018, 1022, 1035, 1136, 1169, 1280, 1298], "110": [661, 678, 1239], "1101441246220388612": [474, 786], "111": [10, 1299], "11111": 1023, "111110": 1023, "11111001": [703, 786], "11111010": [703, 786], "11111111": 10, "112": [627, 786, 1310], "11330": 158, "1152921504606846976": [1161, 1280], "116": 158, "11638928888656214026": [474, 786], "118034": [859, 899], "11aa": 1302, "11aabb": 1302, "11h": [405, 993], "12": [26, 36, 47, 123, 129, 151, 159, 183, 204, 215, 219, 220, 245, 260, 283, 313, 324, 394, 405, 407, 408, 412, 419, 422, 423, 424, 426, 427, 428, 430, 443, 444, 445, 452, 479, 511, 543, 583, 591, 602, 617, 627, 641, 677, 723, 726, 729, 730, 731, 747, 772, 773, 774, 786, 812, 825, 826, 830, 831, 834, 848, 855, 861, 899, 905, 993, 995, 996, 1007, 1008, 1010, 1014, 1022, 1035, 1047, 1136, 1179, 1202, 1238, 1280, 1301, 1302, 1303, 1305, 1307, 1310], "120": [220, 313, 732, 831, 899, 1304], "1200": [622, 786, 1180, 1280], "120134": [677, 1238], "121": 1310, "123": [9, 641, 647, 660, 683, 776, 905, 1202, 1208, 1244, 1257, 1280], "123000": 905, "1232e": [976, 978, 1280], "1234": [27, 622, 786, 1180, 1280], "12345": [738, 971, 1058, 1179, 1280], "1234500": 905, "123456": [9, 905], "1234567": 27, "123456780": 123, "12346": 738, "123465": 905, "123a123": 660, "123abc": [659, 1220, 1221], "125": [1, 36, 51, 313, 322, 587, 765, 786, 858, 899, 1152, 1155, 1280], "127": [1268, 1280], "128": [49, 63, 1152, 1280], "129": [627, 786], "13": [177, 178, 183, 193, 194, 201, 209, 220, 221, 233, 245, 287, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 324, 404, 410, 411, 415, 418, 420, 421, 425, 431, 433, 553, 555, 602, 677, 716, 722, 725, 729, 736, 770, 772, 775, 786, 805, 806, 812, 819, 820, 831, 833, 848, 869, 878, 880, 883, 884, 885, 886, 887, 888, 889, 899, 992, 1022, 1035, 1036, 1136, 1238, 1280], "130": [126, 220, 313, 831, 899], "13382926553367784577": [474, 786], "134821952": 1289, "134_821_952": 1289, "135": [711, 1304], "13614470193936745724": [474, 786], "13756996518000038261": [1066, 1280], "13h": [405, 993], "14": [35, 151, 183, 220, 223, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 405, 410, 411, 415, 418, 420, 421, 425, 431, 433, 479, 592, 729, 772, 773, 786, 812, 831, 878, 880, 883, 884, 885, 886, 887, 888, 889, 899, 905, 993, 1022], "140": [220, 313, 831, 899], "141592653589793": 10, "141593": [591, 786, 915, 1280, 1301, 1304], "142857": [1152, 1280], "143": [677, 1238, 1310], "1433": [34, 313], "1436e16": 159, "1438741209321515184": [205, 313], "1440": [440, 1032], "1443e235": 1310, "149": 1310, "14d": 905, "15": [10, 36, 151, 183, 204, 209, 220, 223, 245, 313, 396, 400, 424, 430, 443, 452, 586, 602, 617, 723, 729, 772, 773, 786, 812, 825, 831, 848, 899, 905, 985, 988, 1022, 1035, 1047, 1280, 1302], "150": [220, 313, 831, 899, 1171, 1280], "1500": [151, 162], "15000": [217, 313], "153061": [493, 786], "15836": 159, "15_000": [217, 313], "16": [1, 36, 49, 68, 78, 151, 165, 183, 204, 220, 245, 287, 313, 392, 395, 479, 563, 582, 587, 602, 678, 687, 722, 732, 733, 736, 786, 812, 825, 831, 848, 855, 869, 899, 905, 1022, 1035, 1152, 1192, 1239, 1253, 1280, 1301, 1302, 1307], "160": [220, 313, 831, 899], "165": [1022, 1035], "1656e15": [978, 1280], "166667": [1152, 1280], "1666683077": 738, "1666683099": 738, "167": 47, "16996": 1310, "16h": 905, "17": [151, 159, 190, 219, 292, 313, 452, 582, 603, 621, 738, 773, 786, 830, 875, 899, 976, 978, 1022, 1047, 1169, 1280, 1310], "170": [220, 313, 831, 899], "17293822569102704640": [1161, 1280], "174": 1310, "175201": [631, 786, 1193, 1280], "1755e": [156, 159], "1764": 51, "17888890": [190, 313], "179": 1310, "17_500": [217, 313], "18": [34, 123, 183, 230, 245, 313, 395, 430, 443, 446, 479, 565, 582, 602, 687, 786, 812, 840, 844, 848, 899, 905, 1038, 1297, 1304, 1307], "180": [398, 591, 786, 1304], "1844": 159, "18446744073709551614": [1161, 1280], "185_000_000": 1289, "186": 1310, "1875": [619, 786, 867, 899], "1897": [407, 419, 995, 1010], "18d": 905, "19": [134, 159, 219, 245, 313, 407, 430, 602, 607, 609, 611, 613, 677, 786, 830, 848, 899, 995, 1022, 1035, 1238], "1920": 1302, "196": 1303, "1964": [844, 899], "1969": [1302, 1303], "1970": [61, 62, 149, 1289], "1972": 1289, "1976": [417, 447], "1977": [417, 447], "1978": [410, 411, 415, 417, 418, 420, 421, 425, 431, 433, 447, 1303], "1979": [417, 447], "1985": [727, 730], "1990": [129, 1289], "1993": 1289, "1994": 1289, "1995": 129, "1998": [426, 1018], "1999": [260, 313, 426, 905, 1018, 1305], "199992": [835, 899], "199994": [835, 899], "199996": [835, 899], "199998": [835, 899], "1_000_000": [190, 313, 1045, 1280], "1_234_500": 905, "1d": [204, 219, 245, 283, 313, 406, 426, 430, 437, 440, 443, 446, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 732, 746, 773, 774, 786, 825, 830, 848, 899, 905, 994, 1002, 1008, 1018, 1022, 1026, 1029, 1032, 1035, 1047, 1280], "1e": [11, 152, 153, 154, 155], "1e6": 11, "1h": [204, 219, 245, 283, 313, 413, 426, 430, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1001, 1003, 1018, 1022, 1035, 1047, 1280], "1i": [204, 245, 283, 313, 452, 602, 786, 825, 848, 899, 1047, 1280], "1m": [204, 219, 245, 283, 313, 426, 430, 442, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1030, 1031, 1033, 1034, 1035, 1047, 1280], "1mo": [204, 219, 245, 283, 313, 409, 423, 424, 426, 429, 430, 436, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 997, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1028, 1035, 1036, 1047, 1280], "1n": [204, 219, 245, 283, 313, 426, 430, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035, 1047, 1280], "1q": [204, 219, 245, 283, 313, 426, 430, 443, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035], "1st_col": 905, "1u": [204, 219, 245, 283, 313, 426, 430, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035, 1047, 1280], "1w": [204, 219, 245, 283, 313, 426, 430, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035, 1047, 1280], "1w2d": [727, 728], "1y": [204, 219, 245, 283, 313, 426, 430, 443, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035], "1y2mo": [426, 1018], "1zy3": [641, 1202], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 326, 328, 329, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 380, 381, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 416, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 756, 757, 760, 764, 765, 766, 767, 768, 769, 771, 774, 775, 776, 782, 786, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 904, 905, 909, 910, 911, 914, 916, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 954, 964, 968, 970, 971, 972, 973, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 996, 998, 999, 1001, 1003, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1020, 1021, 1022, 1025, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1202, 1207, 1209, 1211, 1212, 1214, 1215, 1217, 1220, 1221, 1226, 1227, 1229, 1230, 1231, 1234, 1235, 1237, 1238, 1239, 1240, 1243, 1245, 1247, 1248, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1280, 1285, 1289, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 174, 183, 192, 208, 209, 230, 237, 239, 243, 260, 270, 271, 275, 289, 294, 313, 336, 337, 338, 400, 407, 410, 411, 415, 418, 419, 420, 421, 425, 430, 431, 433, 443, 446, 467, 474, 479, 543, 550, 559, 586, 605, 607, 609, 611, 613, 616, 618, 620, 645, 687, 702, 729, 738, 746, 765, 773, 786, 801, 812, 817, 840, 843, 858, 872, 877, 899, 905, 988, 995, 999, 1010, 1022, 1035, 1038, 1050, 1065, 1163, 1206, 1259, 1261, 1264, 1280, 1296, 1297, 1299, 1305], "200": [438, 439, 441, 596, 597, 786, 905, 1043, 1148, 1163, 1164, 1170, 1171, 1173, 1280, 1299], "2000": [407, 416, 419, 423, 424, 426, 905, 995, 1004, 1010, 1015, 1016, 1018, 1023, 1289, 1302], "200000": [438, 835, 899], "200000000": 441, "2001": [16, 406, 407, 412, 414, 416, 419, 422, 426, 427, 428, 430, 434, 443, 444, 445, 446, 605, 607, 609, 611, 613, 616, 618, 620, 673, 786, 905, 994, 995, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1026, 1035, 1036, 1037, 1038, 1039, 1234], "2002": [129, 416, 426, 1004, 1018, 1039], "2003": [426, 738, 1018], "2004": [426, 1018], "2005": [426, 1018], "2006": [426, 1018], "2008": 1289, "200m": [438, 439, 441], "2010": [260, 313, 905], "2011": [405, 993], "2012": [405, 993, 1305], "2016": [219, 313, 830, 899], "2017": [219, 313, 830, 899], "2018": [219, 313, 429, 830, 899, 1021], "2019": [219, 313, 830, 899], "202": 1303, "2020": [133, 144, 176, 183, 202, 219, 245, 313, 316, 404, 409, 413, 429, 432, 435, 436, 437, 438, 439, 440, 441, 442, 452, 602, 673, 675, 676, 714, 786, 804, 812, 830, 848, 899, 905, 992, 997, 1001, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1047, 1234, 1236, 1237, 1280, 1303], "2021": [133, 144, 176, 183, 202, 204, 283, 313, 673, 746, 804, 812, 825, 899, 905, 998, 999, 1005, 1025, 1234, 1302], "2022": [47, 176, 183, 202, 313, 408, 430, 443, 673, 727, 728, 730, 731, 732, 738, 804, 812, 899, 905, 996, 1005, 1022, 1035, 1234], "2023": [16, 36, 123, 151, 217, 313, 408, 732, 746, 905, 996], "2024": [151, 404, 410, 411, 415, 418, 420, 421, 425, 431, 433, 582, 714, 726, 727, 729, 730, 732, 786, 905, 992, 1302, 1305], "2025": [404, 714, 905, 992], "2026": 1303, "2030": 1302, "2031": 905, "2047317070637311557": [205, 313], "2055938745": 123, "2065": [410, 411, 415, 418, 420, 421, 425, 431, 433], "2068": 159, "207": 1303, "2077": [260, 313, 905, 1302, 1303], "2095": 159, "20_000": [36, 313], "20word": 132, "21": [151, 183, 230, 262, 313, 407, 605, 607, 609, 611, 613, 616, 618, 620, 729, 738, 786, 812, 840, 899, 905, 995, 1297], "213": 1310, "2147483647": 1310, "2147483648": [1134, 1280], "21d": 905, "22": [41, 45, 151, 159, 313, 412, 427, 430, 443, 445, 446, 603, 605, 607, 609, 611, 613, 616, 618, 620, 673, 729, 782, 786, 899, 905, 1022, 1035, 1038, 1169, 1234, 1280, 1302, 1303, 1310], "221": 1310, "2246e": [1192, 1253, 1280], "225": [430, 443, 1304], "22_000_000": 1289, "23": [10, 159, 183, 204, 245, 275, 313, 408, 412, 415, 427, 430, 445, 602, 605, 607, 609, 611, 613, 616, 618, 620, 729, 732, 772, 773, 774, 786, 812, 825, 848, 858, 899, 905, 996, 1003, 1264, 1280, 1309, 1310], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1289, "2337": [36, 313], "234": 27, "2345": 905, "23456789": 10, "235": 1310, "23h": 905, "24": [49, 151, 204, 219, 223, 245, 260, 283, 313, 394, 396, 412, 426, 427, 430, 437, 443, 445, 563, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 985, 1018, 1022, 1029, 1035, 1086, 1280, 1302, 1309], "24030": 158, "249": [703, 786], "25": [1, 27, 36, 51, 123, 183, 204, 219, 245, 270, 275, 283, 287, 313, 370, 400, 412, 413, 427, 430, 443, 445, 452, 587, 589, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 696, 729, 730, 731, 732, 738, 748, 773, 774, 786, 812, 825, 830, 837, 848, 867, 869, 899, 905, 954, 987, 988, 1001, 1022, 1035, 1041, 1047, 1068, 1152, 1157, 1280, 1297, 1301, 1307, 1308], "250": [703, 786, 1171, 1280, 1299, 1310], "2500": [217, 275, 313], "254508": [452, 786, 1047, 1280], "255": 1310, "256": [223, 313, 370, 954, 1152, 1280, 1301], "2560": 954, "259921": [384, 786, 970, 1280, 1301], "25_000_000": 1289, "26": [34, 36, 151, 156, 157, 158, 159, 163, 183, 313, 413, 444, 812, 899, 1001], "266667": [183, 313, 812, 899], "27": [1, 51, 270, 306, 313, 395, 422, 428, 444, 687, 786, 889, 905, 1155, 1259, 1280, 1309, 1310], "270": 1304, "28": [266, 271, 313, 322, 429, 446, 786, 1021, 1038, 1261, 1280, 1302, 1304, 1309, 1310], "283185": [591, 786], "2846": 313, "285714": [480, 786, 1071, 1280], "289962": 1304, "28_341_469": 1289, "29": [16, 151, 405, 423, 993, 1015], "29096": 1310, "290994": [859, 899], "292432": [916, 1280], "292893": [452, 786, 1047, 1280], "2_color_scal": [36, 313], "2d": [245, 270, 271, 313, 426, 602, 746, 786, 848, 899, 993, 1000], "2h": [605, 607, 609, 611, 613, 616, 618, 620, 786], "2i": [204, 313, 825, 899], "2m": [905, 1013], "2x": 158, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 322, 323, 324, 325, 327, 338, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 383, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 561, 562, 563, 564, 565, 566, 568, 570, 572, 573, 576, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 634, 635, 636, 639, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 674, 675, 680, 681, 684, 685, 686, 687, 688, 690, 694, 695, 698, 699, 700, 702, 703, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 786, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 905, 910, 911, 914, 915, 917, 918, 919, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 964, 965, 966, 968, 970, 971, 972, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 996, 997, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1033, 1035, 1037, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1089, 1090, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1201, 1203, 1204, 1205, 1207, 1208, 1209, 1212, 1213, 1214, 1216, 1217, 1220, 1221, 1222, 1223, 1224, 1228, 1235, 1236, 1241, 1242, 1245, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1260, 1261, 1262, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1280, 1285, 1289, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310], "30": [36, 183, 192, 204, 208, 237, 243, 266, 287, 313, 336, 337, 338, 400, 408, 410, 411, 415, 418, 420, 421, 422, 423, 425, 428, 429, 430, 431, 433, 436, 443, 444, 474, 550, 627, 729, 746, 772, 773, 786, 812, 817, 825, 843, 869, 899, 905, 988, 996, 1015, 1021, 1022, 1028, 1035, 1065, 1280, 1296, 1297, 1299, 1301, 1302, 1304, 1305, 1308, 1310], "300": [266, 313, 473, 580, 597, 786, 905, 1164, 1170, 1171, 1173, 1280, 1299], "3000": 905, "3002": [407, 419, 995, 1010], "30103": [539, 786, 1301], "3022416320763508302": [1066, 1280], "30_000": [36, 313], "30m": [204, 313, 430, 443, 825, 899, 1022, 1035], "31": [51, 183, 260, 313, 407, 408, 412, 419, 423, 426, 436, 645, 673, 726, 729, 738, 746, 765, 812, 899, 905, 993, 995, 996, 1000, 1010, 1015, 1028, 1163, 1206, 1234, 1280, 1303, 1305, 1310], "32": [49, 61, 66, 69, 79, 214, 219, 245, 313, 563, 602, 627, 786, 830, 848, 899, 989, 1019, 1152, 1174, 1280, 1297, 1302], "321": [27, 1310], "3212": [677, 1238], "321cba": 1302, "3265500": 905, "32971": [446, 1038], "32974": [446, 1038], "32976": [446, 1038], "32bit": [270, 313], "33": [183, 230, 313, 621, 786, 812, 840, 899, 1174, 1280, 1303], "333": [16, 622, 786, 1043, 1148, 1180, 1280], "33333": 1305, "333333": [210, 313, 565, 828, 899, 1152, 1178, 1280, 1297], "34": [183, 313, 673, 812, 899, 1234], "3420": [677, 1238], "343622": [632, 786], "345": [655, 656, 1216, 1217], "3456": 905, "34776706224699483": [1194, 1280], "35": [36, 313, 400, 729, 786, 988, 1280], "350": [473, 580, 786, 1171, 1280], "356": [412, 427, 445], "356194": [710, 711, 1304], "357": [412, 427, 445], "358": [412, 427, 445], "359": [412, 427, 445], "36": [183, 313, 812, 899, 1307], "360": [398, 591, 786, 1304], "361": 1310, "363961": [531, 1124], "366": [427, 1019], "37": [12, 905], "370h": [452, 786, 1047, 1280], "37338": 1310, "38": [36, 123, 156, 159, 313], "38180177416060584": [614, 786, 1175, 1280], "381802": [614, 786, 1175, 1280], "386294": [540, 786, 1133, 1280, 1301], "389056": [456, 786, 1050, 1280, 1301], "39": [618, 738, 786], "39m": 905, "3_color_scal": [36, 313], "3d12h4m25": [204, 219, 245, 283, 313, 430, 443, 452, 602, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1022, 1035, 1047, 1280], "3f": [132, 673, 676, 1234, 1237], "3i": [204, 245, 313, 825, 899], "3rd": [1212, 1235], "3xy": [641, 1202], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 172, 173, 174, 175, 176, 177, 178, 182, 184, 187, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 232, 233, 234, 236, 237, 238, 239, 245, 247, 248, 255, 256, 259, 263, 264, 265, 266, 267, 268, 271, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 326, 328, 340, 347, 348, 349, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 370, 380, 381, 382, 384, 385, 386, 390, 391, 394, 395, 396, 398, 401, 408, 411, 412, 419, 427, 428, 429, 430, 431, 432, 435, 437, 440, 442, 443, 445, 449, 450, 452, 456, 457, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 490, 491, 495, 496, 497, 504, 505, 506, 507, 508, 510, 511, 513, 521, 523, 524, 525, 526, 527, 528, 529, 533, 534, 539, 542, 543, 544, 561, 563, 565, 566, 568, 570, 572, 573, 576, 577, 578, 581, 582, 584, 585, 586, 587, 590, 592, 596, 597, 598, 599, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 626, 629, 633, 634, 635, 636, 639, 641, 647, 650, 651, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 671, 672, 673, 674, 678, 683, 684, 686, 687, 688, 690, 693, 694, 695, 696, 702, 703, 705, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 729, 730, 731, 733, 735, 736, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 782, 786, 801, 802, 804, 805, 806, 807, 808, 811, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 848, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 872, 873, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 905, 909, 914, 916, 923, 930, 932, 933, 934, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 954, 964, 971, 972, 974, 980, 985, 987, 989, 999, 1003, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1027, 1029, 1032, 1034, 1035, 1036, 1037, 1044, 1047, 1051, 1052, 1054, 1055, 1059, 1060, 1062, 1067, 1068, 1070, 1071, 1072, 1073, 1077, 1080, 1081, 1082, 1083, 1085, 1090, 1097, 1098, 1099, 1100, 1101, 1106, 1110, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1126, 1127, 1142, 1145, 1146, 1149, 1152, 1153, 1154, 1155, 1159, 1160, 1163, 1164, 1165, 1168, 1172, 1174, 1175, 1176, 1177, 1178, 1181, 1183, 1187, 1188, 1191, 1194, 1195, 1196, 1200, 1202, 1208, 1211, 1212, 1216, 1217, 1218, 1219, 1224, 1226, 1227, 1232, 1233, 1234, 1235, 1239, 1244, 1245, 1248, 1250, 1252, 1258, 1261, 1263, 1265, 1271, 1280, 1285, 1289, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1307, 1308, 1309, 1310], "40": [36, 183, 192, 219, 237, 313, 430, 443, 474, 537, 677, 687, 786, 812, 830, 843, 899, 905, 1005, 1035, 1130, 1238, 1296, 1297, 1299, 1302], "400": [282, 313, 438, 439, 441, 866, 899, 1170, 1171, 1173, 1280, 1299], "4000000": [1045, 1280], "404": [220, 313, 646, 648, 831, 899, 1207, 1209], "4096": 1301, "41": [183, 313, 618, 786, 812, 899, 1297, 1310], "412277": 159, "414214": [636, 786, 1197, 1280, 1301], "4160": 51, "416147": 1304, "4164": [219, 313, 830, 899], "42": [51, 183, 205, 230, 245, 313, 602, 786, 812, 840, 848, 899, 1066, 1280, 1296, 1309], "424778": [591, 786], "428571": [451, 786, 1046, 1280], "429101": 1297, "4294967296": [41, 313], "43": [183, 245, 313, 395, 602, 618, 786, 812, 848, 899], "4321": 905, "433013": [615, 786, 859, 899], "434949": 1304, "44": [10, 230, 313, 401, 786, 840, 899], "4411": [219, 313, 830, 899], "44225": [970, 1280], "444": 10, "44444444444": 10, "45": [36, 183, 245, 313, 408, 430, 443, 602, 618, 641, 647, 685, 711, 729, 746, 772, 773, 786, 812, 848, 899, 905, 996, 1022, 1035, 1202, 1208, 1247, 1301, 1302, 1304, 1308, 1310], "450": [1171, 1280], "4500000": 905, "456": [9, 10, 408, 905, 996, 1257, 1280], "456000": [408, 996], "456001\u00b5": 905, "4566": [219, 313, 830, 899], "456789": [905, 1023], "456789\u00b5": 905, "456m": 905, "457658": 1304, "459148": [448, 786], "46": 905, "4696": [219, 313, 830, 899], "47": [47, 183, 313, 618, 786, 812, 899, 905], "470": [844, 899], "47033": [614, 786, 1175, 1280], "47033046033698594": [614, 786, 1175, 1280], "475": [844, 899], "48": [12, 159, 245, 313, 602, 687, 786, 848, 899, 905], "4827": [219, 313, 830, 899], "485": 1310, "49": [183, 313, 812, 899, 905], "492474": [452, 786, 1047, 1280], "498": [220, 313, 831, 899], "4_500_000": 905, "4ab4a": 1302, "4d": [452, 786, 1047, 1280], "4f6228": [36, 313], "4f71": [36, 313], "4x": [216, 313], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 173, 176, 177, 178, 183, 184, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 207, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 232, 233, 234, 236, 238, 239, 240, 245, 248, 255, 256, 259, 260, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275, 277, 280, 281, 282, 283, 286, 287, 289, 290, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 322, 323, 326, 341, 342, 347, 348, 349, 351, 353, 357, 362, 364, 370, 380, 381, 382, 385, 386, 396, 397, 398, 400, 401, 404, 407, 408, 409, 410, 411, 415, 418, 419, 420, 421, 425, 429, 431, 432, 433, 435, 436, 442, 446, 450, 452, 454, 455, 458, 460, 464, 465, 469, 470, 472, 475, 477, 479, 481, 484, 487, 488, 489, 490, 491, 495, 497, 504, 507, 508, 510, 511, 513, 516, 518, 519, 523, 524, 525, 526, 527, 528, 532, 533, 537, 543, 561, 563, 565, 577, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 615, 617, 618, 619, 620, 621, 624, 635, 641, 650, 651, 654, 655, 656, 674, 678, 688, 690, 694, 695, 696, 708, 710, 711, 713, 714, 715, 716, 718, 720, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 735, 736, 740, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 765, 767, 769, 770, 771, 775, 782, 786, 804, 805, 806, 807, 808, 812, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 837, 838, 844, 848, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 868, 869, 872, 873, 875, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 899, 905, 914, 916, 920, 923, 926, 927, 930, 932, 933, 934, 936, 938, 942, 947, 948, 949, 954, 964, 972, 974, 981, 985, 986, 987, 988, 989, 992, 995, 996, 997, 998, 999, 1000, 1010, 1021, 1023, 1024, 1025, 1027, 1028, 1034, 1036, 1037, 1038, 1044, 1047, 1049, 1051, 1052, 1053, 1062, 1067, 1068, 1070, 1072, 1076, 1079, 1090, 1097, 1100, 1101, 1106, 1109, 1112, 1116, 1117, 1118, 1119, 1120, 1121, 1125, 1126, 1130, 1134, 1142, 1149, 1152, 1153, 1154, 1157, 1158, 1159, 1160, 1164, 1165, 1168, 1169, 1170, 1171, 1173, 1174, 1177, 1181, 1183, 1188, 1194, 1197, 1202, 1211, 1212, 1215, 1216, 1235, 1239, 1252, 1259, 1261, 1264, 1265, 1268, 1271, 1280, 1285, 1290, 1293, 1295, 1297, 1298, 1301, 1302, 1303, 1304, 1307, 1309, 1310], "50": [12, 27, 36, 183, 192, 202, 313, 386, 430, 443, 727, 728, 786, 812, 899, 905, 974, 987, 1035, 1280, 1296], "500": [36, 282, 313, 410, 411, 415, 418, 420, 421, 425, 431, 433, 866, 899, 1009, 1011, 1017, 1170, 1171, 1173, 1280], "5000": [275, 313, 1264, 1280], "50000": 130, "500000": [418, 1009], "500000000": [425, 1017], "5000555": 905, "500_000": [410, 411, 415, 418, 420, 421, 425, 431, 433], "500m": [1009, 1011, 1017], "51": 905, "512": [41, 131, 216, 313, 370, 587, 786, 954, 1152, 1280], "51966": [678, 1239], "52": [287, 313, 444, 621, 786, 869, 899], "523599": 1304, "527525": [1176, 1280], "53": [444, 1036, 1307], "533316061": 1289, "533_316_061": 1289, "54": [456, 786, 1087, 1280, 1301, 1310], "540": [398, 591, 786], "540302": 1304, "543": 9, "543081": [388, 786, 977, 1280], "5432": 131, "54321": 9, "544": 1310, "544705": 718, "549306": [920, 1280], "55": [36, 49, 313, 1302, 1303], "5555": 905, "55550": 905, "56": [123, 691, 786], "566371": [591, 786], "567": 27, "56789": [971, 1058, 1179, 1280], "57": [618, 786, 1179, 1280, 1304, 1310], "570796": [330, 332, 786, 915, 917, 1280, 1304], "575050513": [156, 159], "58": [238, 313], "581139": [987, 1280], "584963": [538, 786], "587401": [384, 786, 1301], "59": [123, 183, 313, 408, 421, 431, 465, 729, 772, 773, 774, 786, 812, 899, 905, 996, 1013, 1023], "59815": [456, 786, 1301], "5_000_555": 905, "5th": [36, 313], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 173, 176, 179, 180, 184, 185, 186, 187, 188, 189, 191, 192, 195, 198, 199, 200, 201, 202, 204, 206, 208, 209, 210, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 277, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 296, 306, 307, 313, 316, 317, 322, 326, 347, 348, 349, 351, 357, 365, 381, 382, 394, 395, 401, 404, 408, 412, 422, 426, 427, 428, 438, 439, 441, 444, 445, 448, 450, 459, 460, 465, 466, 469, 475, 477, 479, 497, 498, 499, 508, 511, 524, 525, 526, 527, 531, 543, 544, 577, 581, 588, 591, 592, 593, 598, 600, 602, 604, 606, 608, 610, 612, 615, 617, 618, 619, 624, 629, 635, 641, 645, 655, 656, 678, 688, 690, 695, 703, 705, 707, 714, 722, 723, 724, 726, 729, 733, 736, 742, 747, 748, 752, 765, 769, 782, 786, 804, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 828, 829, 830, 832, 834, 835, 842, 844, 846, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 864, 865, 868, 869, 872, 873, 879, 889, 890, 899, 905, 930, 932, 933, 934, 936, 942, 972, 976, 978, 983, 984, 989, 992, 1018, 1037, 1044, 1051, 1062, 1068, 1091, 1092, 1101, 1104, 1117, 1118, 1119, 1120, 1124, 1142, 1156, 1159, 1160, 1165, 1167, 1172, 1174, 1176, 1178, 1183, 1188, 1191, 1202, 1206, 1216, 1239, 1251, 1261, 1280, 1285, 1290, 1293, 1295, 1297, 1298, 1301, 1307, 1308, 1310], "60": [36, 126, 192, 238, 313, 415, 420, 421, 431, 442, 465, 618, 673, 786, 1019, 1023, 1034, 1161, 1234, 1280, 1304], "600": [282, 313, 438, 439, 441, 866, 899, 905], "60000": 418, "600000": 905, "60000000": 425, "60206": [539, 786, 1301], "605551": 767, "605551275463989": 767, "609438": 1301, "60_000": [410, 411, 415, 418, 420, 421, 425, 431, 433], "61": [238, 313], "625": [612, 786], "626172": [643, 1204], "63": [618, 786], "63204": 1310, "6331e16": [1253, 1280, 1304], "636253": 1304, "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 172, 275, 313, 389, 563, 587, 786, 1152, 1155, 1280, 1301], "64030": [678, 1239], "642093": 1304, "647961": 159, "64bit": [151, 594, 786, 1161, 1280], "65": [1041, 1280], "650": [473, 580, 786], "65280": [678, 1239], "654": [27, 765, 858, 899], "65432": 1305, "65536": 1301, "66": [219, 282, 313, 618, 703, 786, 830, 866, 899, 1087, 1174, 1280], "663053": 123, "666": 905, "666000": 905, "666667": [183, 210, 284, 301, 313, 451, 751, 786, 812, 828, 867, 884, 899, 1046, 1280], "666f6f": [643, 1204], "676": [220, 313, 831, 899], "678": [641, 647, 1202, 1208], "6789": [28, 905], "67890": 28, "686241": 1297, "69": [618, 786, 1087, 1280], "693147": [540, 786, 1131, 1133, 1280, 1301], "6_000_000": 1289, "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 173, 176, 179, 180, 181, 183, 185, 186, 188, 189, 191, 195, 198, 200, 204, 206, 208, 210, 218, 222, 224, 226, 228, 230, 231, 235, 238, 240, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 258, 261, 262, 263, 264, 269, 271, 272, 273, 281, 283, 284, 285, 313, 316, 317, 322, 326, 348, 349, 351, 360, 395, 407, 408, 412, 419, 427, 429, 430, 443, 445, 456, 469, 475, 479, 480, 497, 511, 524, 525, 526, 527, 581, 582, 592, 598, 602, 617, 618, 635, 650, 677, 690, 714, 722, 723, 726, 729, 730, 736, 741, 747, 748, 765, 769, 786, 804, 809, 810, 812, 814, 816, 818, 821, 823, 825, 826, 828, 829, 834, 840, 842, 845, 846, 848, 849, 850, 854, 858, 861, 899, 905, 920, 933, 934, 936, 945, 995, 996, 1000, 1005, 1010, 1021, 1022, 1035, 1037, 1050, 1071, 1086, 1104, 1117, 1118, 1119, 1120, 1164, 1165, 1177, 1183, 1211, 1238, 1280, 1285, 1290, 1295, 1297, 1298, 1301, 1303, 1307, 1310], "70": [183, 313, 703, 730, 786, 812, 899, 1087, 1280], "700": [282, 313, 866, 899], "702963": [36, 313], "707107": [359, 453, 615, 616, 710, 786, 944, 1048, 1280, 1304], "712389": 1304, "714": 1310, "714286": [480, 786, 1071, 1280], "718281828459045": [10, 448, 538, 786, 1041, 1131, 1280], "718282": [456, 786, 1050, 1280, 1301], "720": [398, 591, 786], "7264": 1310, "732051": [1197, 1280], "7415e16": 159, "742": [220, 313, 831, 899], "75": [36, 183, 313, 326, 581, 589, 604, 606, 608, 610, 615, 617, 619, 748, 786, 812, 899, 905, 987, 1068, 1087, 1157, 1280, 1304, 1310], "7500": [217, 313], "7508": 1310, "754": [696, 786], "754888": [448, 786], "761594": [692, 786, 1254, 1280], "7654": 905, "765431": 1023, "7654321": 27, "76933c": [36, 313], "78": 9, "780": 9, "784": [219, 313, 830, 899], "785398": [334, 710, 711, 786, 919, 1280, 1304], "789": [10, 905], "79": [1087, 1280], "7d": 905, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 173, 176, 179, 180, 181, 183, 185, 186, 187, 188, 189, 191, 195, 198, 200, 202, 206, 208, 215, 218, 219, 220, 222, 223, 224, 226, 228, 231, 240, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 258, 260, 261, 262, 264, 269, 271, 272, 273, 281, 284, 285, 287, 313, 326, 328, 340, 348, 349, 351, 392, 395, 396, 408, 469, 476, 479, 480, 505, 507, 511, 524, 525, 526, 527, 563, 581, 582, 587, 598, 599, 603, 627, 633, 635, 657, 658, 673, 703, 708, 714, 718, 720, 723, 725, 733, 735, 740, 741, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 765, 767, 770, 771, 775, 786, 804, 809, 810, 812, 814, 815, 816, 818, 821, 823, 826, 829, 830, 831, 834, 835, 844, 846, 849, 850, 854, 858, 861, 869, 899, 905, 933, 934, 936, 978, 985, 1005, 1068, 1071, 1086, 1098, 1100, 1104, 1117, 1118, 1119, 1120, 1152, 1155, 1165, 1168, 1169, 1172, 1174, 1176, 1178, 1218, 1219, 1234, 1280, 1289, 1290, 1295, 1297, 1298, 1301, 1302, 1303, 1307, 1310], "80": [36, 313], "800": [438, 439, 441], "8000": 131, "803065983": 123, "81": 1301, "814697265625": [1045, 1280], "816497": [261, 313], "8192": 129, "82": [219, 313, 830, 899], "8257e14": 1310, "83": [219, 313, 830, 899], "833": [219, 313, 830, 899], "833333": [301, 884], "848062": 1304, "848808": 159, "85": [36, 313, 1087, 1280, 1310], "850": [473, 580, 786], "8568409950394724": [1041, 1280], "8589934592": [627, 786], "86": 1310, "8601": 1302, "87": 1310, "876": 9, "88": [183, 313, 812, 899], "881374": [333, 786, 918, 1280], "888": [765, 858, 899], "8_000_000": 1289, "8a": [951, 952], "8nin": 1310, "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 173, 181, 183, 195, 197, 206, 210, 220, 222, 223, 238, 245, 247, 248, 251, 263, 264, 281, 285, 287, 306, 313, 322, 326, 328, 340, 348, 349, 351, 356, 358, 392, 395, 398, 408, 461, 469, 479, 485, 505, 511, 522, 530, 565, 581, 582, 591, 598, 602, 603, 614, 617, 618, 629, 633, 647, 677, 685, 687, 716, 722, 723, 726, 729, 741, 774, 786, 812, 821, 826, 828, 831, 834, 848, 850, 861, 869, 889, 899, 905, 928, 929, 933, 934, 936, 941, 943, 987, 1000, 1009, 1011, 1017, 1022, 1035, 1036, 1077, 1086, 1098, 1104, 1115, 1123, 1165, 1169, 1175, 1177, 1179, 1191, 1208, 1238, 1247, 1280, 1289, 1290, 1295, 1298, 1307], "90": [183, 220, 313, 677, 812, 831, 899, 1238, 1304], "901234": [971, 1058, 1179, 1280], "909": [219, 313, 830, 899], "910": [219, 313, 647, 830, 899, 1208], "910t": [641, 647, 1202, 1208], "914": [219, 313, 830, 899], "9223372036854775807": [699, 786], "9223372036854775808": [541, 786], "927295": 1304, "928571": [454, 786, 1049, 1280], "93": [1087, 1280], "94": [323, 786], "9477376373212048": [1087, 1280], "95": [17, 323, 786, 905], "95b3d7": [36, 313], "96": [17, 183, 313, 323, 786, 812, 899, 1087, 1280], "961": 51, "963624": [453, 786, 1048, 1280], "963757": 1304, "964028": [238, 313], "96_067_179": 1289, "97": [17, 209, 313, 323, 786, 1087, 1280], "9774092659964970114": [474, 786], "978307200": [414, 1002], "978307200000": 434, "978307200000000": [414, 434, 1002, 1026], "978307200000000000": 1026, "978393600": [414, 1002], "978393600000": 434, "978393600000000": [414, 434, 1002, 1026], "978393600000000000": 1026, "978480000": [414, 1002], "978480000000": 434, "978480000000000": [414, 434, 1002, 1026], "978480000000000000": 1026, "98": [17, 209, 238, 313, 380, 468, 471, 634, 677, 694, 786, 1238], "987": 27, "987000": 905, "9876": 9, "987654": [27, 905], "987654321": 10, "9876543210": 123, "987m": 905, "988": 10, "99": [17, 36, 193, 194, 209, 212, 238, 282, 313, 323, 380, 458, 460, 468, 471, 634, 694, 776, 786, 819, 820, 866, 899, 1041, 1053, 1280, 1301], "9914e218": 159, "993": [1068, 1280], "998347": [238, 313], "999": [407, 419, 905, 995, 1010, 1299, 1310], "999000": 905, "999954": [238, 313], "999999": [683, 729, 772, 773, 774, 905, 1244], "999999\u00b5": 905, "9bbb59": [36, 313], "A": [13, 33, 36, 41, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 180, 188, 197, 204, 218, 219, 225, 227, 232, 238, 263, 266, 281, 282, 283, 287, 288, 313, 321, 402, 403, 408, 432, 435, 449, 450, 458, 470, 472, 483, 486, 488, 489, 495, 535, 542, 543, 554, 567, 576, 577, 599, 604, 606, 608, 610, 612, 615, 617, 619, 639, 640, 641, 646, 647, 648, 649, 650, 651, 654, 656, 659, 660, 661, 663, 674, 683, 716, 732, 733, 737, 786, 810, 816, 825, 829, 830, 846, 866, 869, 870, 899, 905, 990, 991, 996, 1024, 1027, 1043, 1053, 1148, 1170, 1171, 1173, 1176, 1177, 1178, 1200, 1201, 1202, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1217, 1220, 1221, 1222, 1224, 1235, 1244, 1280, 1289, 1290, 1293, 1305, 1307], "AND": [704, 705, 765, 905], "ANDs": [372, 786, 956, 1280], "AS": [260, 313, 765, 766, 858, 899, 1289, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1309], "And": [681, 1242], "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 195, 270, 275, 313, 535, 776, 821, 899], "At": [41, 238, 313], "BY": [765, 858, 899, 1289, 1292, 1298, 1306, 1307], "Be": 899, "By": [5, 12, 14, 30, 47, 129, 130, 143, 204, 218, 219, 245, 247, 256, 261, 283, 284, 313, 357, 426, 430, 443, 528, 531, 537, 582, 597, 602, 605, 607, 609, 611, 613, 616, 618, 620, 626, 637, 701, 718, 720, 727, 728, 730, 731, 732, 746, 767, 773, 774, 775, 786, 807, 825, 829, 830, 848, 854, 859, 867, 899, 942, 1018, 1022, 1035, 1121, 1164, 1187, 1198, 1270, 1280], "For": [14, 35, 36, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 187, 192, 218, 219, 238, 245, 270, 299, 313, 423, 424, 451, 453, 454, 465, 535, 544, 554, 594, 632, 639, 646, 647, 648, 650, 651, 674, 722, 732, 736, 737, 782, 786, 815, 830, 848, 882, 899, 903, 1046, 1048, 1049, 1052, 1136, 1161, 1194, 1200, 1207, 1208, 1209, 1211, 1212, 1235, 1259, 1280], "IF": 1300, "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 172, 187, 192, 195, 202, 204, 206, 214, 215, 216, 219, 222, 223, 227, 234, 238, 245, 247, 248, 249, 253, 256, 258, 260, 263, 264, 267, 268, 270, 271, 277, 278, 280, 281, 282, 313, 316, 325, 327, 350, 357, 362, 382, 404, 408, 409, 423, 424, 432, 435, 461, 476, 481, 493, 514, 523, 528, 529, 535, 543, 544, 550, 556, 557, 582, 587, 589, 592, 594, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 628, 632, 633, 638, 647, 648, 650, 651, 652, 653, 663, 664, 665, 666, 668, 669, 670, 673, 674, 675, 676, 680, 683, 700, 704, 706, 709, 713, 714, 717, 718, 722, 727, 728, 730, 731, 732, 735, 736, 742, 743, 744, 746, 748, 758, 761, 762, 763, 768, 773, 774, 776, 777, 786, 807, 808, 815, 817, 821, 825, 829, 830, 835, 839, 846, 848, 852, 854, 856, 858, 863, 865, 866, 874, 882, 892, 899, 903, 905, 912, 913, 935, 942, 947, 965, 974, 992, 996, 997, 1015, 1016, 1024, 1027, 1052, 1067, 1068, 1072, 1086, 1087, 1090, 1107, 1116, 1121, 1122, 1128, 1136, 1155, 1157, 1159, 1161, 1163, 1164, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1183, 1185, 1187, 1190, 1194, 1195, 1199, 1208, 1209, 1211, 1212, 1213, 1214, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1241, 1244, 1252, 1255, 1259, 1261, 1269, 1280, 1285, 1289, 1290, 1292, 1299, 1307], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 173, 190, 192, 195, 204, 219, 220, 223, 234, 238, 245, 271, 280, 313, 316, 543, 544, 602, 786, 808, 821, 825, 830, 831, 848, 865, 899, 1045, 1052, 1155, 1160, 1280, 1285], "It": [42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 170, 183, 220, 230, 237, 260, 270, 275, 281, 282, 290, 299, 313, 316, 317, 396, 397, 430, 476, 544, 553, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 762, 763, 782, 786, 803, 807, 808, 812, 817, 831, 835, 840, 858, 866, 873, 882, 899, 907, 969, 985, 986, 1022, 1068, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1182, 1184, 1259, 1264, 1280, 1285], "Its": [205, 313, 474, 786, 1066, 1280], "NO": 905, "NOT": [119, 215, 254, 313, 535, 552, 625, 786, 853, 899, 1307], "No": 20, "Not": [193, 313, 459, 488, 489, 786, 807, 819, 899, 1054, 1280], "ON": 1307, "OR": [706, 707, 821, 899, 905], "ORs": [376, 786, 960, 1280], "On": [696, 786, 833, 899], "One": [47, 183, 234, 270, 275, 313, 326, 581, 708, 719, 735, 741, 744, 751, 753, 756, 757, 766, 786, 812, 899, 905, 987, 1280], "Or": [203, 204, 219, 245, 259, 283, 292, 313, 452, 602, 635, 727, 728, 730, 731, 773, 774, 776, 782, 786, 824, 825, 830, 848, 857, 875, 899, 1047, 1280], "That": [135, 835, 899], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 175, 183, 184, 186, 187, 188, 191, 192, 195, 202, 203, 204, 205, 210, 216, 219, 220, 223, 230, 236, 238, 245, 246, 247, 248, 251, 252, 253, 260, 270, 271, 276, 279, 283, 287, 288, 290, 291, 292, 299, 313, 324, 365, 366, 367, 368, 380, 381, 397, 399, 402, 403, 404, 412, 422, 426, 427, 430, 432, 443, 444, 455, 458, 461, 465, 466, 474, 506, 510, 543, 544, 556, 582, 589, 592, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 629, 632, 638, 642, 643, 646, 651, 652, 653, 657, 658, 659, 660, 668, 669, 670, 671, 672, 673, 674, 684, 687, 694, 695, 714, 716, 734, 738, 746, 748, 762, 763, 764, 765, 768, 776, 778, 779, 781, 782, 786, 787, 788, 791, 793, 794, 795, 802, 807, 812, 813, 815, 817, 818, 821, 824, 825, 828, 830, 831, 835, 840, 844, 848, 850, 851, 852, 858, 862, 864, 869, 870, 873, 875, 882, 899, 903, 904, 905, 911, 914, 950, 951, 952, 964, 973, 986, 987, 990, 991, 992, 1000, 1014, 1018, 1019, 1022, 1024, 1035, 1036, 1052, 1053, 1056, 1066, 1099, 1103, 1136, 1155, 1157, 1159, 1163, 1164, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1191, 1194, 1199, 1203, 1204, 1212, 1213, 1214, 1218, 1219, 1220, 1221, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1261, 1265, 1272, 1274, 1276, 1280, 1281, 1286, 1287, 1288, 1289, 1294, 1307, 1308, 1310], "Then": 148, "There": 1307, "These": [1, 36, 125, 131, 132, 168, 277, 313, 443, 785, 786, 903, 1022, 1035], "To": [35, 54, 193, 313, 386, 402, 403, 459, 460, 639, 645, 646, 647, 650, 659, 660, 669, 670, 671, 672, 681, 786, 819, 899, 974, 990, 991, 1054, 1200, 1206, 1207, 1208, 1211, 1220, 1221, 1242, 1261, 1280, 1307], "Will": [53, 54, 807, 808, 817, 844, 855, 899, 1280], "With": [138, 214, 256, 313, 357, 528, 626, 786, 807, 854, 899, 942, 1086, 1121, 1187, 1280], "_": [1, 47, 51, 238, 268, 272, 313, 350, 514, 640, 647, 649, 655, 656, 661, 664, 665, 855, 899, 968, 1201, 1208, 1216, 1217, 1222, 1226, 1256, 1280], "__array_ufunc__": 907, "__call__": 782, "__dataframe__": 117, "__enter__": 1307, "__exit__": 1307, "__getattr__": 782, "__getitem__": 684, "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 874, 1307], "__name__": [217, 313], "_bar_": 737, "_btm_by_a": [381, 786], "_btm_by_b": [381, 786], "_by_ca": [381, 695, 786], "_by_cb": [381, 695, 786], "_df": [1, 48], "_diff": [287, 313, 869, 899], "_eager": [807, 899], "_expr": [1, 49], "_foo": 549, "_geventdataframeresult": [54, 808, 899], "_is_not_nan": [489, 786], "_is_odd": [251, 313, 850, 899], "_isnan": [488, 786], "_isnul": [491, 786], "_kwarg": [807, 899], "_ldf": 1, "_lf": 50, "_lower_boundari": [204, 313, 825, 899], "_mean_squar": [292, 875], "_not_nul": [490, 786], "_o": [655, 656, 1216, 1217], "_revers": [566, 570, 599, 786], "_right": [218, 219, 220, 313, 829, 830, 831, 899], "_suffix": 571, "_sum": [292, 875], "_top_by_a": [695, 786], "_top_by_b": [695, 786], "_train": [871, 899], "_upper_boundari": [204, 313, 825, 899], "_world": 737, "a1": [36, 48, 50, 313], "a101": 1310, "a123": [36, 313], "a2": [36, 48, 50, 313], "a_1": [665, 1226, 1256, 1280], "a_2": [1256, 1280], "a_3": [1256, 1280], "a_a": 766, "a_agg_list": [204, 313, 825, 899], "a_b_doubl": 733, "a_btm_by_a": [381, 786], "a_btm_by_b": [381, 786], "a_by_ca": [381, 695, 786], "a_by_cb": [381, 695, 786], "a_div_2": 1301, "a_div_5": 1301, "a_interpol": [480, 786], "a_is_even": [260, 313, 765, 858, 899], "a_isnul": [491, 786], "a_lag_": 716, "a_log2": 1301, "a_mod_2": 1301, "a_not_nul": [490, 786], "a_revers": [566, 570, 599, 786], "a_rol": 716, "a_suffix": 571, "a_times_2": [544, 786], "a_times_b": [543, 786], "a_top_by_a": [695, 786], "a_top_by_b": [695, 786], "a_txt": 766, "aa": [455, 639, 650, 734, 786, 905, 987, 1200, 1211, 1280, 1302], "aaa": [1, 36, 313, 639, 650, 684, 686, 905, 1200, 1211], "aaaa": [951, 952], "aabcdef": 670, "aad": [951, 952], "aag": 26, "aazz": 1302, "ab": [206, 222, 264, 287, 313, 684, 686, 786, 869, 899, 905, 1067, 1090, 1252, 1280, 1300, 1302], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 322, 647, 659, 669, 786, 905, 1208, 1220, 1221], "abc123": 1302, "abc456": [659, 1220, 1221, 1302], "abcabc": 660, "abcd": 1302, "abcdeff": 669, "abf": [133, 144, 145], "abl": [91, 131], "about": [91, 131, 632, 639, 646, 647, 650, 659, 660, 786, 903, 1194, 1200, 1207, 1208, 1211, 1220, 1221, 1280, 1310], "abov": [36, 219, 238, 313, 776, 830, 899], "abs_a": 1301, "absolut": [133, 144, 145, 152, 153, 154, 155, 321, 451, 453, 454, 786, 910, 1046, 1048, 1049, 1280, 1301], "acc": [722, 723, 736, 760], "accent": 905, "accept": [127, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 159, 175, 185, 203, 251, 252, 256, 259, 276, 287, 288, 292, 313, 322, 381, 386, 455, 481, 582, 596, 597, 635, 661, 687, 695, 703, 705, 707, 712, 715, 716, 717, 725, 734, 750, 752, 755, 764, 768, 770, 776, 782, 786, 802, 814, 824, 850, 851, 854, 857, 862, 869, 870, 875, 899, 903, 904, 974, 1072, 1155, 1163, 1164, 1187, 1222, 1280], "access": [37, 48, 49, 50, 51, 135, 139, 141, 143, 145, 146, 147, 148, 172, 179, 216, 246, 247, 260, 313, 648, 684, 809, 858, 871, 899, 904, 1209, 1310], "accord": [246, 313, 589, 727, 728, 730, 731, 773, 774, 786, 1005, 1157, 1280], "accordingli": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142], "account": [36, 123, 132, 145, 313, 426, 451, 453, 454, 786, 1018, 1046, 1048, 1049, 1280], "accumul": [722, 723, 736, 760], "acg": 26, "achiev": [223, 238, 299, 313, 544, 656, 786, 1136, 1217, 1280], "aco": 1300, "acosd": 1300, "across": [36, 47, 132, 184, 205, 225, 227, 232, 253, 263, 313, 399, 474, 556, 705, 707, 722, 723, 725, 750, 752, 755, 770, 786, 813, 852, 899, 1066, 1280], "action": [35, 313], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 507, 647, 1100, 1208], "actual": [36, 119, 159, 163, 248, 313, 1189, 1280, 1302, 1309], "ad": [34, 36, 119, 134, 204, 260, 270, 275, 277, 282, 287, 288, 313, 328, 458, 550, 687, 722, 723, 765, 786, 825, 858, 866, 869, 870, 899, 905, 1053, 1259, 1264, 1280], "adbc": [34, 131, 132, 313], "adbc_driver_manag": 151, "adbc_ingest": [34, 313], "add": [35, 36, 130, 192, 204, 223, 287, 288, 289, 290, 313, 316, 397, 568, 569, 570, 571, 589, 687, 732, 736, 776, 786, 825, 829, 869, 870, 871, 872, 873, 899, 1052, 1280, 1285], "add_calendar_dai": 732, "add_calendar_month": 732, "add_calendar_year": 732, "add_chart": [36, 313], "add_dai": 732, "add_format": [36, 313], "add_hour": 732, "add_milli": 732, "add_second": 732, "add_seri": [36, 313], "add_week": 732, "add_worksheet": [36, 313], "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 187, 191, 203, 221, 236, 251, 252, 259, 272, 279, 287, 288, 292, 313, 322, 413, 455, 458, 582, 635, 639, 646, 647, 650, 659, 660, 684, 687, 712, 715, 716, 717, 734, 764, 765, 768, 782, 786, 818, 824, 850, 851, 857, 864, 869, 870, 875, 899, 905, 993, 1001, 1053, 1200, 1207, 1208, 1211, 1220, 1221, 1262, 1280, 1290, 1307], "addition": [55, 246, 313, 905], "address": 647, "adjac": [36, 313], "adjust": [451, 453, 454, 632, 786, 1046, 1048, 1049, 1194, 1280], "adl": [133, 144, 145], "adlf": 145, "advanc": [36, 238, 313, 362, 535, 565, 568, 570, 572, 573, 947, 1128, 1310], "advantag": [36, 168, 237, 313], "advis": [36, 46, 85, 313], "aedt": 729, "aeiuo": [650, 1211], "af1": 47, "af2": 47, "af3": 47, "affect": [34, 152, 153, 154, 155, 313], "afm": 145, "afoo": [871, 899], "after": [36, 55, 119, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 175, 192, 276, 279, 313, 380, 381, 455, 582, 592, 683, 694, 695, 786, 802, 862, 864, 899, 964, 1052, 1159, 1244, 1265, 1280, 1295], "afterward": [46, 776], "ag": [230, 313, 840, 899, 1308], "again": [544, 786], "against": [34, 93, 129, 131, 195, 260, 313, 507, 650, 765, 821, 858, 899, 1100, 1211, 1289, 1307, 1309, 1310], "agg": [203, 204, 238, 245, 313, 323, 381, 461, 463, 468, 471, 543, 544, 582, 634, 635, 695, 702, 727, 730, 748, 786, 807, 808, 817, 824, 825, 844, 848, 855, 899, 905], "agg_group": [739, 786], "agg_list": [543, 786], "aggreg": [129, 130, 133, 141, 197, 203, 204, 224, 226, 228, 231, 234, 238, 239, 240, 245, 261, 262, 281, 284, 292, 293, 295, 297, 313, 323, 372, 376, 379, 461, 477, 543, 544, 582, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 704, 705, 706, 707, 722, 723, 724, 725, 736, 741, 749, 750, 752, 754, 755, 760, 769, 770, 786, 825, 835, 836, 837, 838, 841, 842, 845, 848, 859, 860, 867, 875, 876, 878, 880, 899, 903, 956, 960, 963, 1069, 1169, 1170, 1171, 1173, 1176, 1177, 1178, 1280, 1296, 1298, 1300, 1306], "aggregate_funct": [238, 313, 905], "aho": [640, 649, 661, 1201, 1210, 1222], "aiosqlit": 131, "alchemy_conn": 131, "algorithm": [174, 313, 329, 640, 649, 661, 708, 786, 801, 899, 1201, 1210, 1222], "alia": [1, 12, 47, 49, 51, 83, 179, 204, 222, 238, 245, 279, 287, 290, 313, 316, 322, 326, 366, 367, 368, 369, 371, 380, 391, 392, 393, 394, 395, 397, 400, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 442, 443, 444, 445, 446, 449, 450, 463, 465, 470, 472, 478, 481, 484, 487, 495, 497, 519, 531, 537, 542, 544, 548, 550, 552, 554, 558, 561, 563, 565, 576, 577, 581, 583, 587, 589, 592, 594, 622, 624, 639, 640, 641, 642, 644, 646, 647, 649, 650, 651, 655, 656, 661, 662, 663, 664, 665, 666, 667, 671, 672, 674, 684, 685, 686, 688, 693, 694, 696, 702, 703, 709, 710, 711, 715, 716, 717, 727, 730, 732, 733, 736, 737, 742, 745, 747, 748, 760, 768, 773, 776, 786, 825, 827, 834, 848, 864, 869, 873, 899, 986, 993, 994, 997, 1000, 1001, 1002, 1003, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1090, 1157, 1162, 1207, 1208, 1226, 1227, 1280], "alias": [260, 313, 550, 858, 899], "alic": [129, 1308], "align": [10, 15, 16, 36, 47, 55, 313, 1308], "align_fram": 55, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 173, 174, 176, 183, 185, 187, 194, 206, 211, 213, 215, 216, 217, 218, 220, 221, 222, 227, 229, 233, 234, 238, 241, 242, 246, 247, 248, 252, 258, 259, 263, 264, 268, 270, 271, 275, 278, 280, 281, 282, 283, 288, 290, 313, 316, 326, 328, 350, 365, 381, 390, 396, 402, 403, 404, 405, 455, 460, 466, 473, 474, 477, 479, 483, 486, 490, 491, 496, 506, 507, 514, 532, 535, 543, 562, 565, 566, 568, 569, 570, 571, 572, 573, 580, 582, 592, 597, 599, 603, 627, 633, 635, 641, 647, 648, 651, 654, 660, 668, 669, 670, 674, 695, 705, 714, 722, 723, 724, 725, 734, 736, 741, 742, 745, 752, 760, 768, 769, 770, 776, 782, 786, 792, 798, 801, 804, 807, 808, 812, 814, 815, 817, 820, 829, 831, 835, 839, 844, 846, 851, 855, 856, 857, 863, 865, 866, 870, 871, 873, 899, 905, 935, 985, 987, 990, 991, 992, 993, 1067, 1073, 1085, 1090, 1099, 1100, 1107, 1125, 1128, 1159, 1164, 1169, 1195, 1202, 1208, 1209, 1212, 1215, 1221, 1229, 1230, 1231, 1235, 1252, 1261, 1280, 1284, 1285, 1290, 1292, 1297, 1298, 1302, 1306, 1307, 1309, 1310], "all_compat": 1292, "all_data": 1307, "all_horizont": [187, 313, 704, 815, 899], "all_stat": 30, "alloc": [129, 130, 190, 241, 313, 786, 874, 903, 1045, 1280], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 172, 216, 219, 221, 246, 247, 249, 271, 272, 275, 278, 291, 313, 426, 432, 435, 523, 543, 544, 550, 594, 623, 673, 675, 676, 786, 829, 830, 835, 839, 863, 871, 899, 903, 905, 1018, 1024, 1027, 1116, 1136, 1161, 1181, 1234, 1236, 1237, 1261, 1262, 1280, 1302, 1310], "allow_alias": 550, "allow_chunk": [159, 163], "allow_copi": [117, 172, 271, 313, 1261, 1280], "allow_dupl": [589, 786, 1157, 1280], "allow_infin": [159, 163], "allow_missing_column": [141, 148], "allow_nul": [156, 159, 163, 1310], "allow_object": 746, "allow_parallel": [219, 313, 829, 830, 899], "allow_pyarrow_filt": 149, "allow_time_zon": [159, 160, 163], "allowed_dtyp": [159, 160, 163, 1310], "almost": [54, 223, 299, 313, 673, 675, 676, 808, 899, 1136, 1234, 1236, 1237, 1280], "alpha": [451, 453, 454, 786, 817, 844, 855, 899, 905, 1046, 1048, 1049, 1280], "alpha_i": [452, 786, 1047, 1280], "alphabet": [905, 1310], "alphanumer": [681, 905, 1242], "alreadi": [34, 35, 92, 270, 313, 396, 507, 700, 786, 855, 899, 985, 1100, 1269, 1280], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 141, 143, 148, 158, 159, 162, 163, 168, 188, 203, 204, 230, 234, 238, 245, 247, 251, 259, 270, 282, 287, 290, 313, 392, 395, 404, 426, 429, 461, 481, 544, 550, 582, 592, 596, 597, 635, 659, 660, 661, 668, 669, 684, 714, 722, 723, 726, 729, 736, 738, 760, 776, 785, 786, 792, 824, 825, 840, 848, 850, 857, 866, 869, 871, 873, 899, 905, 992, 1021, 1072, 1159, 1163, 1164, 1202, 1220, 1221, 1222, 1229, 1280, 1284, 1290, 1292, 1295, 1302, 1305, 1307, 1308], "alt": [313, 316, 1280, 1285], "altair": [151, 313, 316, 1280, 1285], "altern": [36, 313, 782, 1299], "although": [260, 313, 858, 899], "alwai": [13, 33, 35, 42, 63, 65, 129, 175, 195, 203, 218, 219, 223, 276, 299, 313, 380, 381, 543, 553, 673, 694, 695, 776, 786, 802, 821, 829, 830, 835, 862, 899, 905, 964, 1136, 1234, 1265, 1280, 1289, 1290, 1307, 1310], "am": [662, 1223], "amarillo": 1302, "ambigu": [429, 430, 443, 673, 676, 729, 1021, 1022, 1035, 1234, 1237], "america": 730, "amount": [46, 64, 85, 139, 143, 146, 147, 544, 732, 786, 1297], "amsterdam": [429, 1021], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 145, 146, 147, 148, 157, 159, 163, 176, 177, 178, 179, 185, 190, 193, 197, 199, 204, 215, 216, 217, 219, 220, 223, 234, 238, 242, 243, 245, 246, 250, 260, 265, 271, 275, 277, 281, 282, 287, 290, 299, 313, 316, 324, 346, 349, 361, 367, 372, 375, 376, 377, 379, 392, 393, 394, 395, 396, 397, 404, 408, 409, 426, 429, 432, 446, 452, 460, 461, 467, 468, 471, 504, 507, 510, 512, 534, 535, 543, 544, 554, 556, 565, 566, 587, 588, 589, 597, 598, 602, 603, 604, 606, 608, 610, 612, 615, 617, 619, 638, 639, 642, 647, 650, 653, 673, 675, 676, 678, 680, 696, 704, 709, 713, 727, 728, 730, 731, 733, 735, 738, 742, 743, 744, 745, 746, 758, 760, 761, 764, 768, 773, 774, 776, 777, 782, 786, 804, 805, 806, 808, 812, 814, 817, 821, 825, 830, 831, 835, 844, 846, 848, 849, 855, 858, 866, 869, 871, 873, 874, 882, 896, 899, 903, 904, 905, 931, 934, 946, 951, 956, 959, 960, 961, 963, 973, 975, 981, 982, 983, 984, 985, 992, 996, 1024, 1038, 1045, 1047, 1086, 1097, 1100, 1103, 1105, 1127, 1136, 1164, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1182, 1184, 1199, 1200, 1203, 1208, 1211, 1214, 1234, 1236, 1237, 1239, 1241, 1261, 1280, 1298, 1299, 1302, 1306, 1307, 1309], "ana": [662, 1223], "anan": [662, 1223], "ananab": 1302, "and_": 786, "ang": 1302, "angl": [710, 711], "ani": [4, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 173, 175, 181, 185, 187, 192, 194, 195, 197, 199, 214, 216, 217, 218, 219, 220, 223, 227, 237, 242, 246, 247, 248, 260, 263, 266, 267, 270, 271, 272, 275, 276, 278, 281, 282, 290, 313, 316, 317, 322, 325, 326, 350, 380, 381, 382, 396, 397, 430, 431, 449, 450, 460, 461, 465, 468, 470, 472, 476, 485, 495, 502, 507, 514, 542, 543, 544, 550, 558, 561, 563, 565, 566, 568, 570, 572, 573, 576, 577, 581, 586, 589, 596, 597, 598, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 628, 638, 640, 652, 669, 670, 671, 672, 673, 675, 676, 678, 680, 688, 694, 695, 696, 703, 704, 705, 707, 717, 718, 719, 746, 748, 762, 763, 776, 786, 802, 807, 808, 814, 815, 817, 820, 821, 829, 830, 831, 843, 846, 858, 862, 863, 866, 873, 874, 899, 903, 905, 907, 909, 912, 935, 964, 969, 985, 986, 1022, 1023, 1042, 1043, 1052, 1055, 1059, 1061, 1063, 1068, 1077, 1086, 1088, 1095, 1100, 1107, 1135, 1136, 1147, 1148, 1157, 1163, 1164, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1182, 1183, 1199, 1201, 1213, 1234, 1236, 1237, 1239, 1241, 1259, 1260, 1261, 1262, 1264, 1265, 1280, 1285, 1307, 1310], "anna": [230, 313, 840, 899], "anoth": [86, 158, 176, 184, 189, 203, 219, 253, 313, 396, 399, 406, 480, 510, 548, 552, 556, 596, 605, 607, 609, 611, 613, 616, 618, 620, 650, 786, 804, 813, 824, 830, 852, 871, 899, 985, 994, 1044, 1052, 1071, 1103, 1163, 1164, 1211, 1280, 1301, 1302], "anti": [218, 313, 829, 882, 899, 1182, 1184, 1280, 1296], "any_horizont": 706, "anyth": [35, 246, 313], "anywher": [369, 371, 673, 675, 676, 1234, 1236, 1237], "ap": 1302, "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 171, 313, 908], "apaya": [674, 1235], "api": [0, 117, 139, 141, 143, 146, 147, 148, 149, 172, 223, 299, 313, 544, 748, 786, 882, 1136, 1280, 1306], "apia": [405, 993], "app": [667, 1228], "appear": [36, 59, 119, 154, 155, 313, 698, 786, 905, 1267, 1280, 1308], "append": [34, 35, 159, 192, 218, 219, 220, 313, 593, 776, 786, 829, 830, 831, 899, 1052, 1280], "appl": [180, 208, 218, 242, 243, 266, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 313, 381, 599, 644, 667, 695, 786, 829, 846, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 899, 1205, 1228, 1296, 1302], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 183, 197, 220, 223, 237, 259, 260, 270, 299, 313, 338, 407, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 431, 433, 444, 445, 447, 453, 454, 543, 544, 586, 604, 605, 606, 607, 610, 611, 617, 618, 635, 659, 660, 673, 675, 676, 680, 712, 722, 723, 736, 747, 748, 760, 765, 776, 786, 812, 831, 835, 843, 857, 858, 882, 899, 974, 995, 998, 999, 1000, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1023, 1025, 1036, 1037, 1039, 1048, 1049, 1136, 1170, 1171, 1173, 1177, 1220, 1221, 1234, 1236, 1237, 1241, 1280, 1289], "applic": [271, 313, 544, 786], "appropri": [36, 149, 195, 271, 313, 592, 786, 821, 899, 1159, 1280], "approx": [329, 786], "approx_n_uniqu": [313, 786, 899], "approxim": [41, 174, 313, 329, 452, 708, 786, 801, 899, 1047, 1280, 1301, 1310], "april": [432, 435, 1024, 1027, 1302, 1303], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 172, 175, 181, 183, 187, 190, 193, 195, 196, 197, 202, 203, 204, 216, 218, 219, 220, 221, 223, 229, 230, 236, 238, 245, 246, 247, 248, 251, 252, 254, 256, 259, 266, 270, 271, 272, 275, 276, 280, 282, 283, 287, 288, 291, 292, 313, 325, 327, 341, 357, 362, 380, 381, 386, 392, 394, 395, 404, 430, 443, 448, 450, 451, 452, 453, 454, 459, 461, 481, 483, 485, 486, 488, 489, 490, 491, 493, 498, 528, 535, 543, 577, 582, 589, 592, 595, 596, 597, 598, 602, 605, 607, 609, 611, 613, 614, 616, 618, 620, 626, 629, 632, 634, 635, 640, 648, 651, 653, 654, 657, 658, 659, 660, 661, 663, 674, 676, 678, 683, 687, 689, 694, 695, 704, 705, 707, 712, 715, 716, 717, 718, 725, 727, 728, 730, 731, 750, 752, 755, 764, 768, 770, 773, 774, 776, 778, 779, 781, 785, 786, 787, 788, 791, 792, 793, 794, 795, 798, 802, 807, 808, 812, 815, 819, 821, 824, 825, 829, 830, 831, 835, 839, 840, 844, 846, 848, 850, 851, 853, 854, 857, 862, 865, 866, 869, 870, 871, 875, 899, 903, 905, 912, 913, 926, 942, 947, 964, 967, 974, 983, 984, 992, 1022, 1035, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1054, 1056, 1057, 1072, 1075, 1077, 1078, 1080, 1081, 1082, 1083, 1087, 1091, 1121, 1128, 1148, 1157, 1159, 1163, 1164, 1165, 1175, 1187, 1191, 1194, 1201, 1209, 1212, 1214, 1218, 1219, 1220, 1221, 1224, 1235, 1237, 1239, 1244, 1251, 1259, 1261, 1262, 1265, 1272, 1274, 1276, 1280, 1281, 1284, 1286, 1287, 1288, 1290, 1292, 1295, 1299, 1307, 1310], "arbitrari": [74, 199, 313, 399, 786, 813, 899, 905], "arbitrarili": [223, 313], "arcco": [786, 1280], "arccosh": [786, 1280], "arcsin": [786, 1280], "arcsinh": [786, 1280], "arctan": [710, 711, 786, 1280], "arctan2": 711, "arctanh": [786, 1280], "aren": [33, 42, 313, 899], "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 195, 237, 313, 338, 586, 712, 737, 786, 821, 843, 899, 903, 1136, 1280, 1293], "arg_max": [786, 1280], "arg_min": [786, 1280], "arg_sort": [786, 1280], "arg_tru": [713, 786, 1280], "arg_uniqu": [786, 1280], "arg_wher": [339, 786], "argmax": [543, 786], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 181, 185, 191, 203, 204, 219, 236, 237, 245, 251, 252, 259, 272, 279, 283, 287, 288, 292, 313, 430, 443, 455, 461, 481, 543, 582, 586, 602, 635, 668, 669, 670, 687, 704, 710, 711, 712, 715, 716, 717, 719, 734, 764, 768, 776, 782, 786, 814, 818, 824, 825, 830, 843, 848, 850, 851, 857, 864, 869, 870, 875, 896, 899, 903, 905, 1022, 1035, 1072, 1229, 1230, 1231, 1262, 1280, 1301, 1302], "aris": 131, "arithmet": [197, 313], "arm": 151, "arm64": 151, "around": [33, 42, 313, 899], "arr": [271, 313, 778, 1261, 1272, 1280], "arr_bar": 1298, "arr_foo": 1298, "arrai": [116, 120, 129, 130, 133, 141, 170, 190, 191, 265, 270, 271, 272, 313, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 392, 393, 394, 395, 502, 517, 518, 519, 520, 522, 531, 532, 534, 537, 539, 543, 598, 604, 606, 608, 610, 612, 615, 617, 619, 625, 733, 765, 786, 818, 899, 907, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 981, 982, 983, 984, 989, 1045, 1095, 1110, 1111, 1112, 1113, 1115, 1123, 1124, 1125, 1127, 1130, 1132, 1133, 1165, 1170, 1171, 1173, 1176, 1177, 1178, 1185, 1189, 1255, 1259, 1261, 1262, 1280, 1300, 1306, 1309], "array_agg": 1300, "array_contain": 1300, "array_get": 1300, "array_length": 1300, "array_low": 1300, "array_mean": 1300, "array_revers": 1300, "array_sum": 1300, "array_to_str": 1300, "array_uniqu": 1300, "array_upp": 1300, "arraylik": [989, 1280], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 171, 216, 247, 248, 265, 267, 271, 313, 899, 908, 1255, 1261, 1280], "arrowinvaliderror": [35, 313], "as_": [1280, 1285], "as_dict": [130, 236, 313], "as_expr": 905, "as_seri": [176, 266, 313, 804, 899, 905], "asarrai": [170, 907], "ascend": [204, 245, 313, 602, 786, 825, 848, 899], "ascii": [7, 20, 640, 649, 651, 655, 656, 661, 663, 674, 683, 905, 1201, 1210, 1212, 1216, 1217, 1222, 1224, 1235, 1244], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [640, 649, 661, 1201, 1210, 1222], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1310, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 905, "ascii_uppercas": [281, 313], "asd": [641, 647, 1202, 1208], "asia": [123, 905, 998, 999, 1025], "asin": 1300, "asind": 1300, "asof": [219, 313, 830, 899], "asof_join": [219, 313], "asofjoinstrategi": [219, 313, 830, 899], "assert": [152, 153, 154, 155, 159, 163, 245, 313, 798, 905], "assert_frame_equ": [153, 154, 189, 313, 1310], "assert_frame_not_equ": [152, 155], "assert_series_equ": [152, 155, 1044, 1280, 1310], "assert_series_not_equ": [153, 154], "assert_someth": 157, "assertionerror": [152, 153, 154, 155], "assign": [157, 204, 298, 313, 362, 535, 582, 592, 665, 666, 786, 825, 881, 899, 947, 1128, 1159, 1226, 1227, 1280], "associ": [34, 36, 47, 132, 134, 158, 161, 248, 313, 904, 1291, 1293], "assum": [248, 313, 835, 882, 899, 1302], "assumpt": [543, 786], "async": [131, 808, 899], "async_engin": 131, "asynchron": [54, 131, 808, 899], "asyncio": [54, 131, 808, 899], "asyncresult": [54, 808, 899], "ata": 26, "atan": 1300, "atan2": [710, 711, 1300], "atan2_ab": 1304, "atan2d": [711, 1300], "atan2d_ab": 1304, "atand": 1300, "atg": 26, "atgataaaggag": 26, "atol": [152, 153, 154, 155], "attain": [635, 786], "attempt": [1, 399, 786, 813, 899], "attr": [313, 316, 1280, 1285], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 313, 316, 778, 779, 781, 782, 787, 788, 791, 793, 794, 795, 874, 899, 1272, 1274, 1276, 1280, 1281, 1285, 1286, 1287, 1288], "attributeerror": 1, "audi": [266, 313, 599, 786], "australia": 729, "authent": [35, 133, 141, 143, 144, 145, 146, 148, 313], "author": 1, "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 277, 313, 899, 1310], "auto_structifi": [251, 287, 313, 850, 869, 899], "autofilt": [36, 313], "autofit": [36, 313], "autogener": [129, 130, 134, 140, 143], "automat": [8, 33, 42, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 141, 143, 146, 147, 159, 163, 165, 251, 260, 287, 313, 543, 597, 668, 669, 670, 765, 786, 850, 858, 869, 899, 903, 1163, 1164, 1229, 1230, 1231, 1264, 1280, 1290, 1292, 1295, 1307], "autumn": [659, 660], "avail": [36, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 238, 260, 312, 313, 592, 765, 778, 779, 781, 785, 786, 787, 788, 791, 792, 793, 794, 795, 798, 858, 897, 898, 899, 903, 905, 987, 1159, 1272, 1274, 1276, 1280, 1281, 1284, 1286, 1287, 1288], "available_timezon": [62, 905], "averag": [36, 313, 451, 452, 453, 454, 592, 786, 1046, 1047, 1048, 1049, 1159, 1280, 1297], "avg": 1300, "avocado": 1302, "avoid": [133, 159, 163, 195, 247, 313, 324, 786, 821, 899], "avro": [31, 127, 313, 798], "avrocompress": [31, 313], "aw": [133, 139, 141, 143, 144, 146, 147, 148], "awai": 1301, "await": [54, 131, 808, 893, 899], "awar": [10, 131, 216, 247, 248, 267, 313, 452, 640, 649, 661, 676, 786, 899, 1047, 1201, 1210, 1222, 1237, 1280], "aws_access_key_id": [35, 133, 144, 148, 313], "aws_region": [35, 144, 148, 313], "aws_secret_access_kei": [35, 133, 144, 148, 313], "axi": [229, 280, 313, 710, 711, 839, 865, 899], "aya": [663, 1224, 1235], "az": [133, 144, 145], "azur": [35, 133, 139, 141, 143, 144, 145, 146, 147, 148, 313], "azure_storage_account_kei": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 172, 173, 174, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 213, 214, 215, 216, 217, 218, 221, 222, 224, 226, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 256, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 322, 324, 325, 327, 328, 338, 340, 345, 350, 365, 366, 367, 368, 369, 370, 371, 381, 382, 390, 397, 401, 432, 435, 455, 457, 459, 460, 461, 463, 466, 473, 474, 477, 479, 480, 481, 483, 486, 488, 489, 490, 491, 496, 502, 507, 514, 524, 525, 526, 527, 543, 544, 549, 556, 562, 565, 566, 567, 568, 569, 570, 571, 579, 580, 582, 586, 589, 592, 596, 597, 599, 601, 627, 633, 635, 642, 645, 650, 653, 659, 660, 684, 685, 695, 698, 702, 704, 705, 706, 707, 708, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 733, 734, 735, 736, 737, 740, 741, 742, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 762, 763, 765, 767, 768, 769, 770, 771, 775, 782, 786, 801, 802, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 899, 905, 911, 914, 935, 950, 951, 952, 953, 954, 955, 967, 968, 969, 986, 989, 1024, 1027, 1041, 1044, 1045, 1052, 1055, 1072, 1077, 1095, 1117, 1118, 1119, 1120, 1157, 1162, 1203, 1206, 1211, 1214, 1220, 1221, 1245, 1247, 1248, 1250, 1262, 1267, 1280, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1302, 1303, 1304, 1307], "b1": [48, 50], "b2": [48, 50], "b345": [36, 313], "b4": [36, 313], "b_b": [260, 313], "b_btm_by_a": [381, 786], "b_btm_by_b": [381, 786], "b_by_ca": [381, 695, 786], "b_by_cb": [381, 695, 786], "b_is_not_nan": [489, 786], "b_isnan": [488, 786], "b_isnul": [491, 786], "b_not_nul": [490, 786], "b_revers": [566, 570, 599, 786], "b_suffix": 571, "b_sum": [292, 875], "b_top_by_a": [695, 786], "b_top_by_b": [695, 786], "ba": [399, 455, 556, 667, 734, 786, 905], "back": [4, 47, 148, 192, 204, 253, 271, 272, 313, 556, 582, 786, 807, 825, 852, 874, 899, 1052, 1262, 1280], "backend": [35, 131, 132, 133, 144, 145, 313, 316, 1280, 1285], "background": [313, 317, 807, 898, 899], "backward": [41, 45, 194, 219, 313, 365, 404, 424, 460, 786, 820, 830, 899, 992, 1016, 1055, 1280], "backward_fil": [466, 626, 786], "bad": [659, 660, 1220, 1221], "balanc": [162, 164, 1310], "ballon_dor": [646, 648, 1207, 1209], "banana": [180, 266, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 381, 599, 644, 667, 695, 786, 878, 880, 883, 884, 885, 886, 887, 888, 889, 1302], "banded_column": [36, 313], "banded_row": [36, 313], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 206, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 240, 242, 243, 246, 249, 250, 251, 253, 258, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 278, 279, 284, 285, 286, 291, 313, 316, 383, 399, 478, 548, 550, 552, 553, 554, 555, 556, 557, 558, 632, 641, 643, 645, 647, 648, 662, 664, 666, 671, 672, 708, 718, 719, 720, 735, 740, 741, 744, 745, 749, 751, 753, 754, 756, 757, 764, 767, 771, 775, 776, 782, 786, 804, 809, 810, 814, 815, 816, 821, 827, 828, 829, 842, 846, 849, 850, 863, 864, 868, 899, 904, 905, 966, 1107, 1194, 1202, 1204, 1206, 1208, 1209, 1223, 1227, 1232, 1233, 1280, 1294, 1296, 1297, 1298, 1299, 1302, 1305], "bar2": 1302, "bar22": [197, 313], "bar_": 664, "bar_3": [268, 313], "bar_4": [268, 313], "bar_a": [238, 313], "bar_at_2": 1298, "bar_avg": 1297, "bar_b": [238, 313], "bar_color": [36, 313], "bar_max": 1297, "bar_median": 1297, "bar_min": 1297, "bar_negative_border_color_sam": [36, 313], "bar_negative_color_sam": [36, 313], "bar_std": 1297, "bar_sum": 1297, "bar_var": 1297, "bare": [550, 905], "base": [36, 60, 102, 104, 161, 187, 195, 204, 220, 245, 313, 405, 413, 448, 451, 452, 453, 454, 461, 476, 480, 538, 539, 543, 544, 587, 589, 597, 602, 605, 607, 609, 611, 613, 616, 618, 620, 678, 786, 815, 821, 825, 831, 848, 899, 905, 993, 1001, 1041, 1046, 1047, 1048, 1049, 1068, 1071, 1131, 1132, 1136, 1155, 1157, 1163, 1164, 1239, 1271, 1280, 1296, 1301, 1310], "base64": [367, 368, 642, 643, 951, 952, 1203, 1204], "base_nam": [277, 313], "base_utc_offset": [413, 1001], "baseexcept": 1307, "basi": [36, 134, 159, 313], "basic": [36, 170, 313, 907, 1310], "basic_chart": [36, 313], "batch": [38, 53, 54, 125, 130, 131, 137, 139, 147, 149, 247, 275, 313, 807, 808, 835, 899], "batch_siz": [33, 42, 129, 130, 131, 139, 147, 149, 275, 313, 899], "batchedcsvread": 130, "baz": [199, 209, 210, 279, 313, 648, 664, 666, 735, 744, 757, 782, 828, 864, 899, 905, 1209, 1227, 1294, 1299, 1302], "bb": [905, 987, 1280, 1302, 1307], "bbb": [1, 36, 313, 684, 686, 905], "bc": [650, 660, 769, 1211], "bcbc45": 1302, "bea": 12, "bear": 905, "beauti": 12, "becaus": [139, 147, 190, 204, 221, 223, 281, 299, 313, 465, 507, 786, 825, 882, 899, 1045, 1100, 1136, 1280], "becom": [161, 312, 897, 898], "bed3": [36, 313], "been": [5, 30, 36, 166, 172, 294, 313, 467, 544, 559, 592, 786, 877, 1159, 1280], "beetl": [266, 313, 599, 786], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 192, 204, 219, 260, 270, 275, 279, 313, 375, 377, 378, 394, 395, 396, 543, 582, 583, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 645, 683, 689, 716, 762, 763, 786, 825, 827, 830, 864, 899, 903, 959, 961, 962, 983, 984, 985, 1052, 1152, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1206, 1244, 1251, 1280, 1296], "beforehand": [673, 675, 676, 1234, 1236, 1237], "begin": [12, 36, 313, 451, 453, 454, 646, 674, 786, 1046, 1048, 1049, 1207, 1235, 1280], "behav": [195, 313, 461, 544, 669, 670, 786, 821, 899], "behavior": [41, 45, 141, 148, 187, 195, 218, 219, 313, 349, 467, 510, 512, 645, 735, 744, 786, 815, 821, 829, 830, 896, 899, 934, 1103, 1105, 1206], "behaviour": [10, 47, 55, 187, 260, 313, 639, 646, 647, 650, 659, 660, 696, 765, 786, 815, 858, 899, 1200, 1207, 1208, 1211, 1220, 1221], "behind": 165, "being": [13, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 134, 140, 141, 143, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 176, 191, 220, 260, 268, 270, 275, 281, 282, 313, 316, 317, 396, 397, 430, 476, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 645, 714, 733, 762, 763, 786, 804, 807, 808, 817, 818, 831, 858, 866, 899, 969, 985, 986, 1022, 1068, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1206, 1256, 1259, 1264, 1280, 1285, 1310], "belong": [1, 204, 313, 825, 899], "below": [19, 35, 133, 134, 144, 145, 187, 195, 238, 313, 460, 651, 674, 727, 728, 730, 731, 773, 774, 776, 782, 786, 815, 821, 899, 1212, 1235], "benchmark": 129, "best": [223, 299, 313, 544, 786, 1136, 1280], "better": [223, 270, 271, 299, 313, 544, 656, 786, 803, 882, 899, 1182, 1184, 1217, 1280], "between": [24, 55, 87, 156, 157, 159, 163, 173, 181, 240, 247, 305, 313, 350, 382, 400, 401, 481, 505, 514, 524, 525, 526, 527, 583, 589, 590, 612, 613, 638, 652, 710, 711, 714, 718, 720, 759, 762, 763, 786, 845, 888, 899, 935, 965, 968, 988, 989, 1072, 1098, 1107, 1117, 1118, 1119, 1120, 1152, 1157, 1158, 1174, 1199, 1213, 1280, 1304], "between_ab": [481, 786], "beyond": [681, 1242], "bia": [453, 454, 493, 614, 632, 786, 1048, 1049, 1087, 1175, 1194, 1280], "bias": [493, 632, 786, 1087, 1194, 1280], "big": 130, "big_fil": 130, "bigidx": 124, "bigqueri": 132, "bin": [397, 476, 589, 678, 703, 779, 786, 986, 1068, 1157, 1239, 1274, 1280, 1285], "bin_count": [476, 786, 1068, 1280], "bin_i": [703, 786], "bin_x": [703, 786], "bin_xor_xi": [703, 786], "binari": [37, 131, 184, 253, 313, 366, 367, 368, 369, 370, 371, 399, 556, 642, 786, 813, 852, 899, 905, 950, 951, 953, 954, 955, 1203], "binary_str": [703, 786], "bind": 134, "birthdai": 129, "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 373, 374, 375, 377, 378, 594, 639, 786, 957, 959, 961, 962, 1161, 1200, 1280, 1302], "bit_length": 1300, "bitmap": [190, 313, 1045, 1280], "bitwis": [326, 372, 376, 379, 581, 703, 704, 705, 706, 707, 786, 956, 960, 963, 1280], "bitwise_and": [786, 1280], "bitwise_count_on": [786, 1280], "bitwise_count_zero": [786, 1280], "bitwise_leading_on": [786, 1280], "bitwise_leading_zero": [786, 1280], "bitwise_or": [786, 1280], "bitwise_trailing_on": [786, 1280], "bitwise_trailing_zero": [786, 1280], "bitwise_xor": [786, 1280], "bla": [641, 647, 1202, 1208], "black": [223, 313, 366, 367, 368, 369, 371], "blindli": [507, 1100], "block": [20, 54, 203, 278, 313, 776, 808, 824, 846, 863, 872, 873, 882, 899, 1182, 1184, 1280], "blue": [46, 84, 85, 366, 367, 368, 369, 371, 700, 786, 1269, 1280], "bob": [129, 230, 313, 840, 899, 1308], "bodi": [36, 313, 317], "bold": [36, 313], "bom": [33, 42, 313, 899], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 175, 176, 177, 178, 183, 185, 189, 194, 195, 196, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 227, 236, 238, 242, 246, 247, 248, 249, 254, 257, 259, 260, 263, 266, 268, 271, 272, 276, 277, 278, 279, 282, 283, 285, 287, 295, 297, 300, 303, 313, 324, 325, 326, 327, 328, 338, 341, 342, 345, 349, 350, 358, 363, 366, 367, 369, 371, 381, 382, 391, 392, 393, 394, 395, 396, 397, 404, 416, 431, 448, 449, 450, 451, 453, 454, 470, 472, 473, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 503, 507, 510, 512, 514, 523, 530, 536, 542, 543, 544, 548, 549, 550, 551, 552, 553, 557, 576, 577, 579, 581, 584, 585, 589, 592, 594, 603, 604, 606, 608, 610, 612, 614, 615, 617, 619, 623, 625, 627, 632, 634, 635, 638, 639, 640, 641, 642, 644, 649, 650, 652, 659, 660, 661, 664, 665, 667, 673, 675, 676, 678, 680, 684, 686, 695, 697, 700, 703, 704, 705, 706, 707, 709, 712, 713, 714, 717, 718, 721, 722, 727, 728, 730, 731, 742, 743, 746, 748, 758, 761, 765, 768, 773, 774, 776, 777, 786, 802, 804, 805, 807, 808, 812, 814, 817, 820, 821, 824, 825, 829, 830, 835, 839, 844, 846, 853, 855, 857, 858, 862, 863, 864, 865, 866, 869, 874, 878, 880, 883, 886, 899, 903, 905, 907, 912, 913, 923, 926, 927, 930, 934, 935, 943, 948, 950, 951, 953, 955, 965, 967, 969, 973, 980, 981, 982, 983, 984, 985, 986, 992, 1004, 1023, 1041, 1043, 1044, 1046, 1048, 1049, 1056, 1057, 1064, 1065, 1068, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1091, 1092, 1096, 1100, 1103, 1105, 1107, 1116, 1123, 1129, 1136, 1148, 1150, 1153, 1154, 1157, 1159, 1160, 1161, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1184, 1185, 1189, 1194, 1196, 1199, 1200, 1201, 1202, 1203, 1205, 1210, 1211, 1213, 1220, 1221, 1222, 1225, 1226, 1228, 1234, 1236, 1237, 1239, 1241, 1256, 1261, 1262, 1266, 1269, 1280, 1289, 1290, 1292, 1298, 1302, 1307], "boolean": [47, 159, 175, 195, 197, 259, 276, 313, 325, 326, 327, 341, 342, 345, 366, 369, 371, 381, 416, 461, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 498, 499, 503, 579, 581, 584, 585, 635, 653, 695, 702, 703, 712, 713, 768, 776, 786, 802, 821, 857, 862, 899, 905, 912, 913, 924, 926, 927, 930, 950, 1004, 1056, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1091, 1092, 1096, 1150, 1153, 1154, 1184, 1200, 1271, 1280, 1299], "border": 20, "both": [10, 25, 33, 42, 46, 84, 85, 131, 148, 179, 204, 218, 219, 220, 230, 245, 246, 272, 282, 313, 328, 386, 397, 455, 481, 589, 602, 605, 607, 609, 611, 613, 616, 618, 620, 663, 727, 728, 730, 731, 773, 774, 782, 786, 797, 825, 829, 830, 831, 840, 848, 866, 899, 905, 974, 1072, 1224, 1262, 1280, 1307, 1308], "bottom": [175, 313, 381, 786, 802, 899], "bottom_k": [276, 313, 381, 694, 695, 786, 862, 899, 1265, 1280], "bottom_k_bi": [380, 694, 695, 786], "bound": [98, 129, 130, 190, 204, 313, 349, 386, 481, 510, 512, 535, 541, 699, 709, 727, 728, 730, 731, 773, 774, 786, 825, 899, 934, 974, 1045, 1072, 1103, 1105, 1134, 1268, 1280, 1298], "boundari": [204, 313, 386, 476, 681, 786, 825, 899, 974, 1068, 1242, 1280], "box": [20, 223, 313], "box_draw": 20, "branch": [53, 54, 807, 808, 817, 844, 855, 899], "break": [42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 275, 281, 282, 313, 316, 317, 396, 397, 430, 476, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 762, 763, 786, 807, 808, 817, 831, 858, 866, 899, 969, 985, 986, 1022, 1068, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1259, 1264, 1280, 1285], "breakpoint": [397, 476, 589, 786, 986, 1068, 1157, 1280], "breezah": 143, "breviti": 168, "broadcast": [661, 905, 1222], "broader": 905, "brotli": [41, 45, 313, 899], "brussel": [429, 1021], "bst": [409, 413, 429, 997, 1001, 1021], "bucket": [35, 133, 144, 145, 148, 313, 430, 443, 476, 786, 1022, 1035, 1068, 1280], "bud": [659, 660, 1220, 1221], "budget": 1289, "buffer": [129, 130, 131, 190, 216, 313, 1045, 1280], "buffer_s": [216, 313], "bug": [543, 544, 786, 835, 882, 899, 1136, 1280], "build": [52, 117, 905, 1310], "built": 87, "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 399, 786, 813, 899], "busi": [404, 714, 992], "business_day_count": [404, 992], "by_alternate_row": 1, "by_dtyp": 905, "by_first_letter_of_column_nam": 48, "by_first_letter_of_column_valu": 48, "by_index": 905, "by_left": [219, 313, 830, 899], "by_nam": 905, "by_pred": [246, 313], "by_right": [219, 313, 830, 899], "bye": 1, "byi": 1302, "bys": [204, 313, 825, 899], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 184, 190, 253, 313, 399, 556, 651, 655, 656, 663, 674, 786, 813, 852, 899, 1045, 1212, 1216, 1217, 1224, 1235, 1280, 1302], "bytesio": [36, 37, 38, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 253, 313, 399, 556, 786, 813, 852, 899], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 172, 173, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 195, 197, 200, 201, 202, 203, 204, 206, 208, 209, 217, 218, 221, 222, 224, 226, 228, 231, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 246, 249, 250, 251, 258, 259, 260, 261, 262, 264, 265, 268, 269, 270, 271, 272, 273, 276, 280, 281, 282, 284, 285, 287, 292, 295, 296, 297, 300, 301, 303, 306, 307, 313, 317, 322, 324, 325, 327, 345, 365, 381, 397, 461, 473, 481, 502, 514, 544, 550, 565, 566, 580, 582, 586, 589, 627, 665, 673, 695, 698, 705, 707, 708, 710, 711, 712, 715, 717, 718, 719, 720, 722, 723, 725, 735, 736, 737, 740, 741, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 765, 767, 769, 770, 771, 775, 782, 786, 802, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 824, 825, 829, 833, 842, 844, 846, 847, 849, 850, 855, 856, 857, 858, 862, 865, 866, 869, 871, 875, 878, 879, 880, 883, 884, 886, 889, 890, 899, 903, 905, 968, 986, 1072, 1095, 1157, 1226, 1234, 1248, 1267, 1280, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1302, 1307], "c00": 905, "c01": 905, "c02": 905, "c03": 905, "c05": 905, "c1": 362, "c123": 1302, "c2": 362, "c20": 905, "c25": 905, "c3": 362, "c40": 905, "c45": 1302, "c4d79b": [36, 313], "c50": 905, "c567": [36, 313], "c60": 905, "c75": 905, "c80": 905, "c8ae6d2b276": [36, 313], "c93": 905, "c95": 905, "c96": 905, "c97": 905, "c98": 905, "c99": 905, "c_btm_by_a": [381, 786], "c_btm_by_b": [381, 786], "c_by_ca": [381, 695, 786], "c_by_cb": [381, 695, 786], "c_c_c": [765, 858, 899], "c_contigu": [271, 313], "c_max": [582, 786], "c_mean_squar": [292, 875], "c_min": [582, 786], "c_top_by_a": [695, 786], "c_top_by_b": [695, 786], "c_total": 1307, "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 673, 675, 676, 680, 786, 797, 807, 808, 817, 844, 855, 899, 967, 1163, 1164, 1234, 1236, 1237, 1241, 1280], "cadi": [238, 313], "cafe": [678, 1239], "caf\u00e9": [655, 656, 905, 1216, 1217], "calamin": 134, "calcul": [36, 41, 45, 47, 183, 204, 261, 284, 313, 400, 451, 452, 453, 454, 493, 505, 524, 531, 537, 541, 614, 632, 637, 699, 701, 718, 720, 762, 763, 767, 775, 786, 812, 825, 859, 867, 899, 987, 988, 1046, 1047, 1048, 1049, 1087, 1098, 1117, 1175, 1194, 1198, 1270, 1280], "calendar": [61, 62, 204, 219, 245, 283, 313, 407, 417, 419, 426, 430, 443, 447, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 995, 1005, 1010, 1018, 1022, 1035, 1039, 1047, 1280], "calendar_year": [417, 447], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 175, 203, 204, 221, 223, 245, 260, 271, 276, 312, 313, 380, 381, 392, 395, 404, 543, 544, 565, 566, 568, 570, 572, 573, 596, 597, 628, 694, 695, 714, 719, 782, 786, 802, 807, 808, 817, 824, 825, 844, 848, 855, 858, 862, 896, 897, 898, 899, 903, 905, 964, 992, 1136, 1164, 1190, 1261, 1265, 1280, 1290, 1294, 1307], "callabl": [48, 49, 50, 51, 143, 197, 223, 237, 242, 299, 313, 362, 535, 543, 544, 566, 567, 586, 603, 722, 723, 736, 747, 748, 760, 786, 835, 843, 846, 882, 899, 947, 1128, 1136, 1169, 1280], "caller": [132, 230, 313, 535, 835, 840, 882, 899], "cam": [242, 313, 846, 899], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 170, 175, 177, 187, 188, 197, 199, 203, 204, 211, 213, 215, 219, 223, 234, 238, 245, 247, 248, 251, 253, 254, 259, 270, 271, 275, 276, 277, 281, 287, 290, 299, 313, 325, 362, 381, 392, 395, 396, 399, 404, 423, 424, 426, 429, 432, 435, 443, 452, 458, 461, 481, 507, 535, 543, 544, 550, 553, 556, 562, 565, 566, 568, 570, 572, 573, 582, 587, 589, 594, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 625, 627, 632, 635, 640, 648, 654, 659, 660, 661, 668, 669, 670, 673, 684, 695, 712, 714, 726, 729, 736, 738, 742, 743, 748, 765, 776, 782, 785, 786, 797, 802, 803, 807, 808, 813, 815, 817, 825, 830, 848, 850, 852, 853, 855, 857, 858, 862, 869, 872, 873, 899, 905, 907, 947, 985, 992, 1015, 1016, 1018, 1021, 1022, 1024, 1027, 1035, 1047, 1053, 1072, 1100, 1128, 1136, 1141, 1155, 1157, 1161, 1164, 1182, 1184, 1185, 1188, 1194, 1201, 1202, 1209, 1215, 1220, 1221, 1222, 1229, 1230, 1231, 1234, 1259, 1261, 1280, 1295, 1307], "cancel": [807, 899], "candid": [646, 648, 1207, 1209], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 148, 165, 223, 248, 249, 271, 290, 299, 313, 367, 455, 523, 544, 623, 642, 665, 686, 748, 786, 855, 873, 874, 882, 899, 905, 951, 1116, 1136, 1181, 1203, 1226, 1261, 1280], "capabl": [1, 36, 313], "capac": [190, 257, 313, 1045, 1189, 1280], "capit": [681, 1242, 1302], "captur": [646, 648, 659, 660, 1207, 1209, 1220, 1221], "car": [242, 266, 313, 599, 786, 846, 899], "cardin": [174, 313, 329, 708, 786, 801, 899], "care": [36, 254, 313, 544, 582, 625, 786, 853, 899, 1185, 1280], "cars_revers": [599, 786], "cartesian": [218, 313, 829, 899], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 192, 204, 216, 223, 238, 245, 247, 248, 267, 270, 271, 313, 405, 452, 543, 553, 554, 566, 602, 639, 640, 647, 649, 650, 659, 660, 661, 681, 786, 808, 825, 848, 899, 903, 905, 993, 1047, 1052, 1200, 1201, 1208, 1210, 1211, 1220, 1221, 1222, 1242, 1259, 1280], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 197, 204, 237, 245, 270, 271, 275, 287, 313, 328, 394, 395, 406, 432, 435, 446, 581, 586, 587, 594, 596, 602, 653, 654, 683, 689, 693, 716, 717, 766, 786, 825, 843, 848, 869, 899, 903, 905, 969, 983, 984, 994, 1024, 1027, 1038, 1155, 1161, 1214, 1215, 1244, 1251, 1257, 1261, 1263, 1264, 1280, 1300], "cast_str_to_int": [237, 313, 843, 899], "cast_to_supertyp": [786, 903], "cat": [26, 46, 84, 85, 397, 589, 639, 641, 679, 682, 693, 717, 781, 786, 905, 986, 1068, 1157, 1200, 1202, 1240, 1243, 1276, 1280], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 218, 268, 313, 383, 397, 589, 596, 597, 693, 786, 905, 966, 967, 968, 969, 986, 1157, 1163, 1164, 1263, 1280], "categori": [36, 46, 65, 85, 268, 313, 383, 397, 476, 589, 786, 966, 986, 1068, 1157, 1256, 1280], "categorical_as_str": [152, 153, 154, 155], "categoricalord": 59, "categoricaltyp": [265, 313], "caus": [99, 108, 117, 129, 130, 131, 143, 172, 192, 271, 313, 543, 786, 1052, 1261, 1280], "cba": 670, "cbrt": [786, 1280, 1300], "cbrt_a": 1301, "cc": [455, 734, 786, 905, 987, 1280, 1302], "ccc": [1, 36, 313, 684, 686, 905, 1302], "ccy": 1310, "cd": [684, 686, 905], "cdatainterfac": [171, 908], "cde": [905, 1302], "cdt": [430, 443, 1022, 1035], "ceil": [49, 786, 1280, 1300], "ceil_a": 1301, "cell": [15, 16, 36, 238, 313], "cent": 407, "center": [15, 16, 36, 313, 451, 453, 454, 603, 604, 606, 608, 610, 612, 615, 617, 619, 786, 1046, 1048, 1049, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1280], "central": [144, 145, 493, 632, 786, 1087, 1194, 1280], "centuri": 1303, "certain": [42, 43, 44, 45, 54, 133, 144, 209, 283, 313, 669, 670, 782, 807, 808, 844, 899, 1280], "certainli": [673, 675, 676, 1234, 1236, 1237], "cest": [429, 1021], "cet": [429, 1021], "cfg": [2, 4, 17, 168], "cfoo": [871, 899], "chain": [565, 566, 568, 570, 572, 573, 776], "chanc": [156, 159, 163, 1310], "chang": [30, 41, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 134, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 275, 281, 282, 289, 313, 316, 317, 396, 397, 400, 430, 476, 544, 582, 583, 589, 596, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 762, 763, 786, 807, 808, 817, 831, 858, 866, 872, 899, 903, 905, 968, 969, 985, 986, 1022, 1068, 1152, 1157, 1163, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1189, 1259, 1264, 1280, 1285], "changes_length": [786, 903], "char": [27, 647, 1208], "char_length": 1302, "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 313, 426, 645, 647, 651, 655, 656, 657, 658, 659, 660, 663, 664, 665, 668, 669, 670, 671, 672, 674, 681, 683, 844, 899, 905, 1018, 1206, 1208, 1212, 1216, 1217, 1218, 1219, 1220, 1221, 1224, 1225, 1226, 1229, 1230, 1231, 1235, 1242, 1244, 1302], "character_length": 1302, "characterist": [159, 163], "charli": [129, 1308], "chart": [36, 313, 316, 844, 899, 1280, 1285], "cheap": [177, 178, 252, 288, 313, 805, 806, 851, 870, 899, 973, 975, 1280], "cheaper": [510, 1103], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 189, 214, 218, 313, 345, 366, 369, 371, 473, 481, 485, 503, 639, 644, 650, 667, 786, 829, 835, 899, 930, 950, 953, 955, 1044, 1064, 1065, 1074, 1077, 1084, 1086, 1096, 1200, 1205, 1211, 1228, 1280], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1044, 1280], "check_exact": [152, 153, 154, 155], "check_nam": [154, 155, 1044, 1280], "check_ord": [154, 155], "check_row_ord": [152, 153], "choos": [41, 43, 45, 204, 238, 313, 825, 899], "chrono": [33, 42, 87, 313, 432, 435, 673, 675, 676, 680, 899, 1024, 1027, 1234, 1236, 1237, 1241, 1302, 1303], "chunk": [14, 45, 125, 129, 130, 133, 139, 141, 143, 146, 147, 148, 159, 163, 192, 217, 233, 271, 313, 328, 593, 786, 899, 914, 972, 1052, 1062, 1142, 1160, 1255, 1261, 1280], "chunk_length": 1280, "chunkedarrai": [116, 233, 313], "citi": [659, 660], "clang": 151, "clariti": [246, 313], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 248, 313, 773, 782, 786, 792, 798, 810, 816, 849, 868, 874, 899, 904, 1260, 1280, 1284, 1292, 1307], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 184, 313, 399, 467, 786, 813, 899, 1290, 1307], "claus": [798, 1298, 1306], "clean": [673, 675, 676, 1234, 1236, 1237], "cleaner": 168, "cleanli": [10, 202, 313, 1307], "clear": [46, 84, 178, 313, 806, 899, 975, 1280], "clearer": 119, "clickhous": 132, "client": 131, "clip": [786, 1280], "clipboard": [32, 128, 313, 798], "clone": [118, 119, 120, 121, 122, 177, 271, 313, 805, 899, 973, 1280], "close": [36, 131, 204, 245, 260, 313, 397, 481, 540, 589, 602, 605, 607, 609, 611, 613, 616, 618, 620, 632, 727, 728, 730, 731, 773, 774, 786, 825, 848, 858, 899, 986, 1072, 1157, 1194, 1280], "closedinterv": [204, 245, 313, 481, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 848, 899, 1072, 1280], "closest": [116, 219, 313, 830, 899, 1301], "closur": [605, 607, 616, 618, 620, 786], "cloud": [35, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 313], "cloudi": [659, 660], "cloudpickl": 151, "cluster": 148, "cluster_with_column": [53, 54, 807, 808, 817, 844, 855, 899], "co": [647, 786, 1208, 1280, 1300], "coalesc": [218, 219, 282, 313, 479, 649, 673, 786, 829, 830, 866, 899, 1234, 1296, 1300], "code": [179, 313, 366, 367, 368, 369, 371, 399, 544, 625, 786, 813, 833, 899, 1185, 1280, 1290], "coeffici": [181, 313, 632, 786, 1194, 1280], "coerc": [55, 595, 786], "coercion": [42, 43, 44, 45, 53, 54, 595, 786, 807, 808, 817, 844, 855, 899], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 195, 203, 204, 212, 214, 218, 219, 220, 223, 234, 237, 238, 245, 246, 251, 259, 270, 275, 279, 281, 287, 292, 313, 317, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 567, 569, 571, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 712, 713, 715, 716, 717, 719, 721, 724, 726, 727, 729, 730, 732, 736, 737, 738, 739, 740, 741, 749, 751, 753, 754, 756, 759, 760, 765, 767, 769, 771, 772, 775, 776, 786, 821, 824, 825, 827, 829, 830, 831, 843, 848, 850, 857, 858, 864, 869, 871, 875, 899, 905, 1018, 1021, 1100, 1182, 1184, 1215, 1234, 1280, 1310], "col0": [159, 1310], "col1": [159, 238, 313, 899, 1310], "col2": [159, 238, 313, 899, 1310], "col3": [238, 313, 1310], "col4": 1310, "col_nam": [237, 313, 544, 776, 786, 843, 899], "cole": 126, "coli": [36, 313, 572, 573, 905, 1310], "collaps": [42, 43, 44, 45, 53, 54, 807, 808, 817, 844, 855, 899], "collapse_join": [42, 43, 44, 45, 53, 54, 807, 808, 817, 844, 855, 899], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 187, 221, 238, 260, 265, 278, 279, 313, 455, 485, 544, 716, 734, 738, 765, 768, 786, 801, 802, 804, 805, 808, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 850, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 898, 899, 905, 1077, 1280, 1290, 1291, 1292, 1295, 1296, 1307, 1308, 1310], "collect_al": [50, 54, 807, 808, 899], "collect_all_async": [808, 899], "collect_async": [54, 899], "collect_schema": [50, 221, 313, 810, 816, 843, 849, 868, 899], "collis": 55, "colnam": [36, 143, 313], "color": [46, 84, 85, 299, 313, 316, 366, 367, 368, 369, 371, 642, 700, 786, 882, 950, 951, 952, 953, 955, 1203, 1269, 1280, 1302], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 173, 175, 176, 179, 181, 182, 185, 186, 187, 188, 191, 195, 196, 199, 200, 202, 203, 204, 208, 209, 214, 215, 216, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 254, 259, 261, 262, 263, 266, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 298, 313, 316, 317, 324, 325, 327, 338, 347, 356, 358, 361, 381, 386, 390, 391, 397, 407, 408, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 431, 432, 433, 435, 444, 445, 447, 455, 457, 461, 463, 476, 480, 481, 496, 502, 508, 510, 530, 534, 535, 544, 550, 551, 553, 555, 565, 567, 568, 569, 570, 571, 572, 573, 582, 589, 593, 595, 596, 597, 598, 600, 601, 602, 605, 607, 609, 611, 613, 616, 618, 620, 627, 628, 634, 635, 638, 645, 650, 651, 652, 661, 665, 666, 673, 674, 675, 676, 677, 678, 680, 685, 687, 695, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 786, 802, 804, 811, 814, 815, 816, 818, 821, 824, 825, 829, 830, 831, 835, 836, 837, 838, 839, 841, 842, 845, 846, 848, 849, 850, 851, 853, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 881, 882, 899, 904, 905, 912, 913, 932, 941, 943, 946, 967, 968, 974, 979, 980, 986, 995, 998, 999, 1000, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1023, 1024, 1025, 1027, 1036, 1037, 1039, 1051, 1068, 1071, 1095, 1101, 1103, 1123, 1127, 1157, 1164, 1165, 1168, 1188, 1199, 1206, 1211, 1213, 1226, 1227, 1234, 1236, 1237, 1238, 1239, 1241, 1247, 1250, 1256, 1257, 1269, 1280, 1296, 1298, 1299, 1301, 1302, 1304, 1305, 1308, 1309, 1310], "column_0": [1, 223, 277, 313], "column_1": [223, 277, 313, 1304], "column_2": [277, 313, 1304], "column_abc": 15, "column_format": [36, 313], "column_nam": [242, 277, 313, 846, 899], "column_tot": [36, 313], "column_width": [36, 313], "column_x": [129, 130, 134, 140, 143], "column_xyz": 15, "columnar": [120, 122, 216, 247, 313], "columnformatdict": [36, 313], "columnnameorselector": [176, 185, 187, 229, 236, 238, 248, 268, 278, 279, 280, 281, 313, 804, 814, 815, 839, 863, 864, 865, 899], "columnnotfounderror": [199, 200, 313], "columntotalsdefinit": [36, 313], "columnwidthsdefinit": [36, 313], "colx": [36, 313, 572, 573, 905, 1295, 1310], "colz": [905, 1310], "com": [36, 132, 313, 451, 453, 454, 646, 647, 648, 786, 1046, 1048, 1049, 1207, 1208, 1209, 1280], "combin": [41, 45, 53, 54, 55, 195, 204, 205, 219, 238, 245, 283, 313, 326, 339, 443, 452, 465, 581, 597, 602, 668, 669, 670, 727, 728, 730, 731, 773, 774, 776, 786, 807, 808, 817, 825, 830, 844, 848, 855, 899, 1022, 1035, 1047, 1164, 1229, 1230, 1231, 1280, 1296, 1308], "come": [111, 132, 204, 278, 280, 313, 404, 423, 424, 493, 535, 714, 786, 825, 863, 865, 899, 992, 1015, 1016, 1087, 1280], "comm_subexpr_elim": [53, 54, 807, 808, 817, 844, 855, 899], "comm_subplan_elim": [53, 54, 807, 808, 817, 844, 855, 899], "comma": [32, 33, 129, 130, 143, 313], "comment": [129, 130, 143], "comment_prefix": [129, 130, 143], "common": [47, 53, 54, 55, 91, 129, 130, 143, 282, 313, 566, 792, 807, 808, 817, 844, 855, 866, 899, 1284], "compact": 1305, "compani": 132, "compar": [148, 152, 153, 154, 155, 189, 195, 313, 449, 450, 470, 472, 481, 495, 542, 576, 577, 786, 821, 899, 968, 1043, 1044, 1148, 1280], "comparison": [149, 195, 313, 821, 899], "compat": [20, 36, 37, 38, 41, 45, 86, 265, 313, 639, 641, 646, 647, 648, 650, 659, 660, 899, 905, 1200, 1202, 1207, 1208, 1209, 1211, 1220, 1221, 1255, 1280, 1290, 1302, 1303, 1307], "compat_level": [37, 38, 265, 313, 1255, 1280], "compatibleframetyp": [1291, 1293, 1307], "compatlevel": [37, 38, 265, 313, 1255, 1280], "competit": [592, 786, 1159, 1280], "compil": [52, 343, 344, 500, 501, 928, 929, 1093, 1094], "complement": 905, "complet": [129, 131, 143, 1308], "complex": [160, 380, 381, 396, 694, 695, 786, 964, 985, 1265, 1280], "compliant": [36, 313], "compon": [408, 431, 673, 676, 732, 996, 1023, 1234, 1237], "compos": 1308, "composit": [76, 1310], "compound": [123, 248, 313, 905], "comprehens": 157, "compress": [31, 37, 38, 41, 43, 45, 313, 600, 786, 899, 1167, 1280], "compression_level": [41, 45, 313, 899], "comput": [53, 55, 89, 190, 203, 219, 238, 272, 278, 292, 305, 313, 321, 330, 331, 332, 333, 334, 335, 352, 353, 354, 359, 360, 364, 384, 387, 388, 389, 392, 393, 394, 395, 401, 448, 451, 452, 453, 454, 456, 493, 517, 518, 519, 520, 524, 525, 526, 527, 531, 537, 538, 539, 540, 562, 582, 583, 588, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 629, 630, 631, 632, 636, 691, 692, 700, 705, 707, 710, 711, 712, 718, 720, 733, 752, 762, 763, 776, 786, 807, 824, 827, 829, 830, 863, 871, 875, 888, 899, 910, 915, 916, 917, 918, 919, 920, 937, 938, 939, 944, 945, 949, 970, 976, 977, 978, 981, 982, 983, 984, 989, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1087, 1110, 1111, 1112, 1113, 1117, 1118, 1119, 1120, 1124, 1130, 1131, 1132, 1133, 1141, 1152, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1191, 1192, 1193, 1194, 1197, 1253, 1254, 1262, 1269, 1280, 1301, 1304], "computeerror": [553, 678, 1239], "concat": [46, 84, 85, 92, 130, 219, 313, 830, 871, 899, 972, 1062, 1142, 1160, 1280, 1300], "concat_list": [507, 733], "concat_w": [260, 313, 765, 858, 899, 1300, 1307], "concaten": [46, 55, 84, 85, 197, 237, 313, 586, 638, 652, 716, 717, 786, 843, 899, 972, 1142, 1199, 1213, 1280, 1302], "concatmethod": 55, "conclus": [120, 122, 313, 899], "concret": [159, 163], "condit": [36, 187, 195, 220, 246, 313, 461, 481, 644, 667, 713, 736, 776, 786, 815, 821, 831, 899, 1072, 1280, 1296, 1300, 1306], "conditional_format": [36, 313], "conditionalformatdict": [36, 313], "config": [0, 47, 183, 251, 270, 287, 313, 640, 649, 661, 727, 728, 730, 731, 732, 798, 807, 812, 850, 869, 899, 1201, 1222], "configur": [5, 35, 133, 144, 145, 168, 313, 807, 874, 899], "conflat": [481, 786], "conform": 1310, "confus": [91, 325, 488, 489, 661, 786], "conjunct": [36, 84, 131, 134, 140, 157, 313, 742, 745, 899], "conn": 131, "connect": [34, 129, 131, 132, 135, 137, 139, 141, 143, 146, 147, 148, 149, 313, 799], "connectionorcursor": [34, 131, 313], "connector": 132, "connectorx": [131, 132, 151], "consecut": [194, 313, 365, 460, 466, 638, 652, 786, 820, 899, 1055, 1199, 1213, 1280], "consid": [41, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 175, 187, 189, 215, 220, 223, 229, 247, 260, 270, 275, 276, 278, 280, 281, 282, 313, 316, 317, 381, 386, 396, 397, 430, 465, 476, 543, 544, 550, 564, 565, 568, 570, 572, 573, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 695, 722, 736, 762, 763, 782, 786, 802, 807, 808, 815, 817, 831, 839, 858, 862, 863, 865, 866, 882, 899, 905, 967, 969, 974, 985, 986, 1022, 1044, 1068, 1136, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1182, 1184, 1259, 1264, 1280, 1285, 1290], "consider": 126, "consist": [203, 236, 271, 313, 673, 727, 728, 824, 899, 905, 914, 1052, 1234, 1261, 1280], "consola": [36, 313], "const": 10, "constant": [190, 245, 313, 405, 452, 458, 786, 848, 899, 993, 1045, 1047, 1053, 1280], "constrain": [47, 143, 187, 313, 815, 899, 905], "constraint": [195, 313, 461, 565, 566, 568, 570, 572, 573, 776, 786, 821, 899, 905], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 313, 467, 758, 761, 777, 782, 786, 813, 899, 967, 1280, 1295], "construct_categor": 46, "constructor": [126, 134, 163], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 141, 144, 145, 148, 158, 159, 161, 163, 175, 180, 187, 188, 204, 212, 217, 234, 270, 271, 275, 276, 282, 294, 313, 325, 327, 350, 369, 371, 399, 473, 485, 514, 544, 638, 640, 644, 646, 648, 650, 652, 654, 666, 667, 683, 704, 705, 706, 707, 717, 748, 786, 802, 810, 813, 815, 816, 825, 844, 862, 866, 877, 899, 903, 905, 912, 913, 935, 1064, 1065, 1107, 1142, 1199, 1201, 1205, 1207, 1209, 1211, 1213, 1215, 1227, 1228, 1244, 1255, 1261, 1280, 1298], "contains_with_expr": 366, "contains_with_lit": 366, "content": [13, 628, 786, 1190, 1280], "context": [46, 84, 85, 165, 234, 260, 313, 323, 461, 507, 543, 544, 553, 634, 635, 700, 719, 735, 738, 744, 745, 748, 757, 761, 764, 785, 786, 797, 798, 858, 871, 899, 1100, 1269, 1280, 1295, 1307, 1309], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 241, 271, 313], "continu": [129, 397, 589, 632, 786, 986, 1157, 1194, 1280], "contrast": 732, "control": [10, 11, 36, 54, 55, 134, 157, 159, 259, 260, 270, 313, 597, 635, 765, 786, 807, 808, 817, 857, 858, 874, 896, 899, 1164, 1259, 1280, 1292, 1295, 1307], "conveni": [192, 275, 313, 891, 914, 1052, 1280, 1290], "convers": [117, 134, 172, 216, 217, 247, 248, 267, 271, 272, 313, 409, 673, 675, 676, 680, 798, 997, 1234, 1236, 1237, 1241, 1261, 1262, 1280, 1305, 1307], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 172, 266, 267, 268, 269, 270, 271, 272, 274, 275, 313, 361, 362, 398, 409, 432, 435, 534, 535, 543, 566, 591, 648, 673, 675, 676, 677, 678, 680, 685, 786, 899, 903, 946, 947, 968, 997, 1024, 1027, 1127, 1128, 1209, 1234, 1236, 1237, 1238, 1239, 1241, 1247, 1250, 1258, 1259, 1260, 1261, 1262, 1264, 1280, 1302, 1304, 1305, 1307], "convert_time_zon": [429, 1021], "coo": [242, 313, 846, 899], "coord": 687, "coordin": [36, 313], "copi": [32, 116, 117, 128, 170, 172, 177, 178, 217, 265, 271, 272, 287, 313, 458, 786, 805, 806, 869, 899, 907, 973, 975, 1053, 1255, 1260, 1261, 1262, 1280, 1307], "corasick": [640, 649, 661, 1201, 1210, 1222], "core": [1, 220, 313, 831, 899, 1307, 1310], "cores_right": [220, 313, 831, 899], "corner": [20, 36, 123, 313], "corr": 313, "corrcoef": [181, 313], "correct": [134, 140, 453, 454, 493, 614, 632, 786, 835, 899, 903, 1048, 1049, 1087, 1175, 1194, 1280], "correctli": [36, 313, 543, 786], "correl": [181, 313, 718, 762], "correlationmethod": 718, "correspond": [204, 219, 245, 271, 283, 313, 381, 417, 426, 430, 443, 544, 592, 602, 605, 607, 609, 611, 613, 616, 618, 620, 695, 727, 728, 730, 731, 773, 774, 786, 807, 825, 830, 848, 899, 1005, 1018, 1022, 1035, 1159, 1280], "cosd": 1300, "cosh": [786, 1280], "cosin": [330, 331, 387, 388, 543, 786, 915, 916, 976, 977, 1280, 1304], "cost": [220, 248, 313, 831, 899], "cot": [786, 1280, 1300], "cotang": [389, 786, 978, 1280, 1304], "cotd": 1300, "could": [35, 82, 89, 176, 313, 629, 722, 732, 736, 786, 804, 812, 815, 899, 1191, 1280], "count": [36, 149, 174, 183, 204, 234, 235, 245, 277, 283, 289, 304, 313, 329, 346, 355, 391, 404, 452, 476, 496, 504, 516, 521, 544, 564, 580, 602, 641, 698, 700, 708, 714, 721, 745, 756, 786, 801, 812, 825, 842, 848, 872, 887, 899, 905, 931, 940, 980, 987, 992, 1047, 1068, 1089, 1097, 1109, 1114, 1143, 1151, 1202, 1267, 1269, 1280, 1285, 1289, 1300], "count_digit": 641, "count_num": [36, 313], "counterpart": 126, "countri": [219, 313, 405, 830, 899, 993], "country_holidai": [404, 714, 992], "covari": [720, 763, 786, 903], "cover": 10, "cow": [657, 658, 1218, 1219], "cpu": [129, 130, 270, 313, 807, 874, 899, 1259, 1280], "crab": [639, 650, 1200, 1211], "crate": [33, 42, 87, 313, 639, 641, 646, 647, 648, 650, 659, 660, 673, 675, 676, 680, 899, 905, 1200, 1202, 1207, 1208, 1209, 1211, 1220, 1221, 1234, 1236, 1237, 1241], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 177, 178, 204, 235, 238, 245, 270, 271, 283, 287, 290, 313, 316, 317, 408, 430, 443, 452, 535, 543, 593, 602, 605, 607, 609, 611, 613, 616, 618, 620, 716, 726, 727, 728, 729, 730, 731, 732, 772, 773, 774, 782, 786, 805, 806, 812, 817, 825, 848, 869, 873, 899, 973, 975, 986, 996, 1022, 1035, 1047, 1149, 1157, 1160, 1259, 1261, 1280, 1285, 1306, 1307, 1310], "create_async_engin": 131, "create_engin": [34, 313], "creation": 130, "cross": [218, 313, 829, 899, 1296], "crustacean": [650, 1211], "cst": [430, 443, 1022, 1035], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 313, 798, 899], "csvencod": [129, 130, 143], "csvquotestyl": [33, 42, 313, 899], "ctx": [1289, 1291, 1292, 1293, 1294, 1295, 1307], "cube": [1, 51, 384, 587, 786, 970, 1280, 1301], "cuda": 874, "cum_count": [786, 1280], "cum_count_revers": [391, 786], "cum_max": [786, 1280], "cum_max_all_fil": [392, 786], "cum_max_revers": [392, 786], "cum_min": [786, 1280], "cum_min_revers": [393, 786], "cum_prod": [322, 786, 1280], "cum_prod_revers": [394, 786], "cum_reduc": 722, "cum_sum": [478, 582, 688, 725, 786, 827, 899, 1086, 1280], "cum_sum_revers": [395, 786], "cumsum_horizont": 724, "cumul": [391, 392, 393, 394, 395, 721, 722, 723, 724, 725, 786, 980, 981, 982, 983, 984, 1280], "cumulative_ev": [786, 1280], "cumulative_sal": [582, 786], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 139, 141, 143, 146, 147, 148, 156, 157, 159, 160, 161, 162, 163, 164, 177, 178, 185, 218, 219, 242, 260, 270, 275, 313, 316, 317, 413, 535, 583, 786, 805, 806, 814, 829, 830, 846, 858, 874, 899, 905, 973, 975, 993, 1001, 1152, 1259, 1264, 1280, 1285, 1292, 1307], "cursor": [34, 131, 313], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 183, 223, 238, 299, 313, 362, 404, 432, 435, 535, 543, 544, 603, 700, 714, 747, 748, 786, 812, 835, 882, 899, 947, 992, 1024, 1027, 1128, 1136, 1169, 1269, 1280, 1310], "customis": [36, 313], "cut": [589, 786, 1157, 1280], "cxx": 1302, "cypher": 131, "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 173, 195, 202, 204, 205, 206, 209, 218, 222, 264, 265, 275, 281, 285, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 322, 324, 391, 414, 432, 435, 481, 586, 627, 641, 647, 659, 660, 665, 673, 675, 676, 715, 732, 738, 765, 786, 821, 825, 829, 858, 878, 880, 883, 884, 885, 886, 887, 888, 889, 899, 905, 968, 980, 1002, 1024, 1027, 1072, 1095, 1202, 1208, 1220, 1221, 1226, 1234, 1236, 1237, 1248, 1280, 1296, 1298, 1299, 1302, 1303], "d1": [36, 313, 408], "d2": 408, "d3": 408, "d789": [36, 313], "d_4": [665, 1226], "dai": [61, 62, 77, 204, 217, 219, 245, 283, 313, 316, 404, 423, 424, 426, 427, 430, 432, 435, 436, 443, 445, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 714, 726, 727, 728, 729, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 905, 992, 1015, 1016, 1018, 1019, 1022, 1024, 1027, 1028, 1035, 1037, 1047, 1280, 1303], "dark": 1289, "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 170, 172, 178, 179, 188, 191, 192, 202, 203, 204, 216, 217, 218, 221, 223, 236, 237, 241, 246, 247, 248, 250, 254, 257, 265, 270, 271, 272, 275, 277, 287, 291, 311, 313, 317, 325, 326, 327, 330, 331, 332, 333, 334, 335, 338, 341, 342, 343, 344, 345, 347, 350, 352, 353, 354, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 382, 383, 386, 387, 388, 389, 390, 397, 398, 399, 404, 405, 406, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 457, 468, 470, 471, 472, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 495, 496, 500, 501, 503, 508, 514, 516, 523, 534, 536, 542, 544, 576, 577, 581, 582, 589, 591, 592, 595, 596, 597, 598, 600, 601, 621, 623, 625, 630, 631, 632, 638, 641, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 663, 664, 665, 666, 673, 674, 675, 676, 678, 680, 683, 691, 692, 693, 696, 697, 700, 703, 709, 716, 719, 726, 727, 728, 729, 730, 731, 732, 742, 743, 745, 746, 747, 748, 758, 761, 772, 773, 774, 777, 782, 786, 798, 805, 806, 807, 808, 813, 816, 818, 824, 825, 849, 853, 869, 899, 904, 907, 912, 913, 924, 926, 927, 928, 929, 930, 932, 934, 935, 946, 948, 950, 951, 952, 954, 965, 966, 973, 974, 975, 986, 987, 992, 993, 994, 995, 998, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1047, 1051, 1052, 1068, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1091, 1092, 1093, 1094, 1096, 1101, 1107, 1109, 1116, 1127, 1129, 1136, 1150, 1157, 1159, 1163, 1164, 1165, 1167, 1168, 1179, 1181, 1189, 1194, 1199, 1200, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1212, 1213, 1214, 1215, 1216, 1217, 1224, 1225, 1226, 1227, 1234, 1235, 1236, 1237, 1239, 1241, 1244, 1255, 1260, 1261, 1262, 1263, 1266, 1279, 1280, 1289, 1296, 1302, 1307, 1309], "data_bar": [36, 313], "data_bar_2010": [36, 313], "data_label": [36, 313], "data_page_s": [41, 45, 313, 899], "databas": [34, 115, 131, 132, 313, 798], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 311, 312, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 782, 786, 798, 807, 808, 810, 812, 814, 816, 818, 822, 825, 829, 830, 831, 832, 833, 835, 839, 840, 844, 847, 849, 856, 858, 863, 864, 865, 866, 868, 871, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 899, 905, 986, 987, 1021, 1047, 1068, 1136, 1157, 1215, 1226, 1227, 1250, 1256, 1257, 1269, 1280, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1310], "dataframeplot": [313, 316], "dataload": [275, 313], "datapoint": [204, 313, 825, 899], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 218, 275, 313, 493, 786, 798, 829, 835, 899, 1087, 1280, 1308], "datat": [36, 313], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 136, 138, 139, 141, 142, 147, 148, 160, 161, 163, 188, 197, 313, 382, 455, 627, 693, 734, 746, 782, 786, 798, 816, 899, 904, 905, 965, 987, 1040, 1136, 1188, 1263, 1280, 1305], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 141, 143, 146, 148, 149, 176, 183, 202, 204, 217, 219, 245, 260, 313, 316, 345, 404, 406, 407, 408, 409, 412, 414, 416, 417, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 503, 582, 602, 605, 607, 609, 611, 613, 616, 618, 620, 673, 675, 693, 714, 727, 728, 730, 731, 738, 746, 772, 786, 804, 812, 825, 830, 848, 899, 905, 930, 992, 994, 995, 996, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1047, 1096, 1145, 1146, 1234, 1236, 1263, 1280, 1300, 1303, 1305], "date32": [217, 313], "date_format": [33, 42, 313, 899], "date_min": 426, "date_minus_1y_2mon": 1018, "date_part": 1300, "date_plus_1i": [426, 1018], "date_rang": [219, 283, 313, 412, 414, 427, 434, 445, 730, 731, 830, 899, 1000, 1014, 1019, 1020, 1036, 1037], "date_right": [219, 313, 830, 899], "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 141, 144, 146, 148, 159, 160, 161, 163, 176, 183, 202, 204, 217, 219, 245, 260, 283, 313, 316, 345, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 503, 582, 602, 605, 607, 609, 611, 613, 616, 618, 620, 673, 676, 693, 714, 726, 727, 728, 730, 731, 732, 738, 746, 773, 774, 786, 804, 812, 825, 830, 848, 899, 904, 905, 930, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1047, 1096, 1145, 1146, 1234, 1237, 1261, 1263, 1280, 1302, 1303], "datetime_format": [33, 42, 313, 899], "datetime_rang": [204, 313, 406, 409, 423, 424, 426, 429, 430, 436, 437, 438, 439, 440, 441, 442, 443, 446, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 786, 825, 899, 993, 994, 997, 1001, 1002, 1003, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "datetime_str": [432, 435], "datetimeindex": 121, "david": 1308, "day_nam": [432, 435], "day_of_month": [412, 427, 445], "day_of_year": [412, 427, 445], "daylight": [204, 219, 245, 283, 313, 405, 413, 426, 430, 443, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 1001, 1018, 1022, 1035], "dayofweek": 1303, "dayofyear": 1303, "days_diff": 436, "db": [34, 131, 132, 313], "dbapi2": 131, "dbc": [641, 1202], "dbreadengin": 132, "dbwriteengin": [34, 313], "dbwritemod": [34, 313], "dd": [36, 313, 1302], "ddd": [1, 36, 313, 684, 686], "dddd": 1302, "ddof": [261, 284, 313, 359, 364, 531, 537, 615, 616, 619, 620, 637, 701, 718, 720, 762, 763, 767, 775, 786, 859, 867, 899, 944, 949, 1124, 1130, 1176, 1178, 1198, 1270, 1280], "ddww": 1302, "de": 1302, "deal": [41, 45, 216, 313, 325, 327, 429, 592, 673, 676, 704, 705, 706, 707, 729, 786, 899, 912, 913, 1021, 1159, 1234, 1237, 1280], "debug": [29, 835, 899, 1310], "decad": [1289, 1303], "decai": [451, 452, 453, 454, 786, 1046, 1047, 1048, 1049, 1280], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 313, 317, 621, 677, 786, 899, 905, 1179, 1238, 1280, 1301], "decimal_comma": [129, 130, 143], "decimal_separ": [9, 27], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 270, 275, 313, 899, 905, 1289], "decod": [129, 130, 653], "decompos": [279, 313, 864, 899], "decompress": [41, 43, 45, 313, 899], "decor": [46, 48, 49, 50, 51, 159, 163, 223, 313, 544, 786, 797, 798, 1136, 1280], "dedic": [1, 117, 216, 247, 313, 905, 1307], "deem": [183, 313, 812, 899], "deepcopi": [177, 313, 805, 899, 973, 1280], "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 237, 277, 313, 322, 586, 647, 670, 703, 747, 786, 808, 843, 899, 905, 1208, 1310], "default": [4, 5, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 183, 184, 187, 190, 199, 203, 204, 205, 216, 218, 219, 227, 229, 236, 238, 245, 246, 247, 248, 249, 253, 256, 260, 261, 263, 268, 270, 271, 275, 278, 280, 281, 282, 284, 289, 298, 313, 324, 325, 327, 350, 357, 362, 397, 399, 404, 429, 448, 450, 451, 453, 454, 474, 510, 514, 523, 528, 529, 531, 535, 537, 538, 543, 550, 553, 556, 574, 575, 577, 582, 583, 589, 592, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 623, 626, 628, 637, 638, 646, 652, 663, 668, 669, 670, 673, 675, 676, 678, 680, 700, 701, 704, 706, 709, 713, 714, 717, 718, 720, 727, 728, 729, 730, 731, 732, 735, 738, 742, 743, 744, 746, 758, 761, 767, 768, 773, 774, 775, 777, 786, 807, 808, 812, 813, 815, 817, 824, 825, 829, 830, 839, 848, 852, 854, 858, 859, 863, 865, 866, 867, 872, 874, 881, 899, 905, 912, 913, 935, 942, 947, 974, 986, 987, 992, 1021, 1041, 1045, 1046, 1048, 1049, 1066, 1103, 1107, 1116, 1121, 1122, 1128, 1145, 1146, 1152, 1157, 1159, 1163, 1164, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1181, 1187, 1190, 1198, 1199, 1200, 1207, 1211, 1213, 1224, 1229, 1230, 1231, 1234, 1236, 1237, 1239, 1241, 1259, 1261, 1269, 1270, 1280, 1301, 1310], "default_match": [639, 650], "defaultdict": [248, 313], "defer": [313, 316, 317, 1280, 1285], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 176, 187, 191, 204, 223, 234, 237, 245, 282, 299, 313, 481, 510, 544, 586, 589, 601, 602, 605, 607, 609, 611, 613, 616, 618, 620, 651, 656, 663, 674, 681, 727, 728, 730, 731, 748, 768, 773, 774, 786, 804, 815, 818, 825, 843, 848, 866, 882, 899, 904, 905, 1072, 1103, 1136, 1157, 1168, 1212, 1217, 1224, 1235, 1242, 1280], "definit": [36, 313, 493, 786, 904, 905, 1087, 1280], "deflat": [31, 313], "deg": 1304, "degre": [261, 284, 313, 531, 537, 591, 615, 616, 619, 620, 637, 701, 711, 718, 720, 762, 763, 767, 775, 786, 859, 867, 899, 1176, 1178, 1198, 1270, 1280, 1300], "delet": [1296, 1309], "delimit": [40, 42, 139, 147, 238, 268, 313, 638, 652, 899, 1199, 1213, 1256, 1280], "delta": [35, 133, 144, 261, 284, 313, 531, 537, 615, 616, 619, 620, 637, 701, 718, 720, 762, 763, 767, 775, 786, 798, 859, 867, 899, 1176, 1178, 1198, 1270, 1280], "delta_merge_opt": [35, 313], "delta_table_opt": [133, 144], "delta_write_opt": [35, 313], "deltalak": [35, 133, 144, 151, 313], "deltat": [35, 313], "demo": [36, 313], "demonstr": [129, 465, 786, 905], "dens": [20, 202, 313, 592, 786, 1159, 1280], "densiti": [1280, 1285], "depend": [41, 46, 52, 85, 131, 151, 173, 313, 343, 344, 500, 501, 544, 553, 589, 592, 732, 735, 738, 744, 786, 909, 928, 929, 1093, 1094, 1157, 1159, 1280, 1310], "deploi": [159, 163], "deprec": [35, 156, 157, 158, 159, 163, 166, 174, 229, 271, 289, 294, 313, 411, 446, 467, 559, 596, 638, 645, 702, 711, 719, 786, 801, 817, 839, 852, 865, 871, 872, 877, 899, 999, 1007, 1008, 1038, 1065, 1163, 1199, 1206, 1261, 1280], "depth": 126, "desc": [905, 1289, 1292, 1296, 1298], "descend": [47, 254, 259, 313, 338, 358, 530, 592, 625, 634, 635, 700, 712, 786, 853, 857, 899, 923, 943, 1084, 1123, 1159, 1185, 1196, 1269, 1280], "describ": [159, 202, 313, 899, 1280], "descript": [204, 313, 825, 899, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1308, 1309], "deseri": [126, 253, 313, 467, 556, 786, 852, 899], "deserializ": [184, 253, 313, 399, 556, 786, 813, 852, 899], "design": [270, 275, 313], "desir": [159, 362, 446, 535, 947, 1038, 1128], "destin": 132, "detail": [52, 117, 131, 132, 152, 154, 172, 204, 313, 825, 874, 899, 1310], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 175, 179, 197, 204, 216, 217, 223, 245, 276, 277, 283, 313, 381, 416, 429, 476, 535, 553, 589, 595, 597, 632, 640, 651, 673, 674, 676, 677, 695, 729, 758, 761, 777, 786, 802, 809, 810, 816, 825, 848, 862, 868, 899, 1004, 1021, 1068, 1128, 1157, 1163, 1164, 1194, 1201, 1234, 1237, 1238, 1280], "dev": [171, 908, 1176, 1280], "develop": [132, 159, 163], "deviat": [261, 313, 453, 615, 616, 637, 767, 786, 859, 899, 1048, 1198, 1280, 1297], "devic": [270, 313, 807, 874, 899, 1259, 1280], "devicememoryresourc": 874, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 610, 612, 614, 615, 617, 619, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 782, 786, 825, 848, 864, 866, 879, 882, 890, 899, 905, 1021, 1047, 1215, 1226, 1227, 1257, 1280, 1285, 1289, 1290, 1291, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1310], "df0": [230, 313, 840, 899, 1295], "df1": [47, 55, 152, 153, 189, 192, 230, 260, 285, 313, 840, 899, 1292, 1294, 1295, 1296, 1307], "df2": [47, 55, 152, 153, 189, 192, 285, 313, 1292, 1294, 1295, 1296, 1307], "df3": [47, 313], "df4": 313, "df5": 313, "df6": 313, "df_a": 1307, "df_a1": 55, "df_a2": 55, "df_a3": 55, "df_agg_nuniqu": [234, 313], "df_b": 1307, "df_current_batch": 130, "df_d1": 55, "df_d2": 55, "df_from_str_repr": [269, 313], "df_h1": 55, "df_h2": 55, "df_new_grid": [479, 786], "df_nuniqu": [234, 313], "df_original_grid": [479, 786], "df_panda": 1290, "df_pd": 117, "df_tempor": [605, 607, 609, 611, 613, 616, 618, 620, 786], "dfi": [117, 172], "diagon": [55, 277, 313], "diagonal_relax": 55, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 196, 216, 236, 242, 246, 247, 248, 266, 267, 270, 275, 277, 313, 786, 846, 899, 903, 904, 905, 1057, 1280, 1293], "dictat": [426, 786, 903, 1018], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 216, 236, 246, 247, 248, 266, 267, 270, 275, 313, 899, 904], "did": [405, 993], "diff": [287, 313, 436, 437, 438, 439, 440, 441, 442, 524, 786, 869, 899, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1117, 1280], "differ": [36, 41, 87, 90, 111, 129, 134, 149, 152, 154, 192, 204, 205, 216, 238, 245, 247, 248, 267, 270, 271, 277, 313, 400, 412, 426, 427, 429, 444, 450, 465, 474, 505, 524, 526, 535, 544, 574, 575, 577, 582, 596, 597, 673, 698, 735, 738, 744, 786, 817, 825, 848, 899, 905, 968, 988, 1000, 1018, 1019, 1021, 1036, 1043, 1052, 1066, 1098, 1117, 1119, 1136, 1145, 1146, 1148, 1163, 1164, 1234, 1280, 1303, 1305, 1307], "digit": [63, 586, 621, 622, 647, 786, 905, 1179, 1180, 1202, 1208, 1280, 1310], "dimens": [116, 118, 120, 122, 138, 139, 147, 313, 598, 786, 899, 1165, 1261, 1280], "dimension": [118, 120, 122, 271, 313, 899, 1280], "direct": [36, 132, 141, 145, 148, 256, 270, 281, 313, 357, 528, 626, 786, 854, 899, 942, 1121, 1187, 1280], "directli": [6, 30, 36, 54, 131, 159, 163, 168, 248, 270, 313, 451, 453, 454, 597, 761, 786, 808, 899, 1046, 1048, 1049, 1164, 1259, 1280, 1292, 1307, 1310], "directori": [36, 41, 141, 143, 146, 148, 313, 903], "dirpath": [31, 33, 37, 38, 41, 143, 313], "disabl": [41, 45, 46, 84, 85, 141, 146, 160, 216, 313, 807, 899], "disable_string_cach": 85, "disallow": 159, "discard": [195, 313, 461, 786, 821, 899, 1056, 1280], "disco": [649, 1210], "discont": [649, 1210], "discourag": [544, 786], "discoveri": [238, 313], "discret": [397, 400, 448, 476, 505, 524, 589, 786, 986, 988, 1041, 1068, 1098, 1117, 1157, 1280], "disk": [41, 42, 43, 44, 45, 135, 313, 855, 899], "dispatch": 905, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 183, 202, 313, 812, 817, 899], "distanc": [219, 313, 476, 786, 830, 899, 1068, 1280], "distinct": [36, 163, 236, 238, 291, 313, 363, 484, 487, 536, 592, 601, 732, 786, 948, 1076, 1079, 1129, 1159, 1168, 1280, 1297, 1306, 1308, 1310], "distinct_count": [41, 45, 313, 899], "distribut": [493, 632, 786, 1087, 1194, 1280], "div": 1300, "divid": [20, 397, 430, 443, 451, 453, 454, 465, 493, 589, 786, 986, 1022, 1035, 1046, 1048, 1049, 1087, 1157, 1280, 1301], "divis": [465, 696, 786, 1301], "divisor": [261, 284, 313, 531, 537, 615, 616, 619, 620, 637, 701, 718, 720, 762, 763, 767, 775, 786, 859, 867, 899, 1176, 1178, 1198, 1270, 1280], "dl": [275, 313], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 141, 143, 148, 152, 153, 154, 155, 173, 183, 185, 192, 215, 219, 238, 242, 265, 277, 281, 313, 316, 396, 404, 507, 543, 668, 669, 670, 758, 761, 777, 786, 803, 807, 808, 812, 814, 817, 830, 835, 844, 846, 855, 874, 899, 905, 985, 992, 1052, 1100, 1229, 1230, 1231, 1264, 1280, 1285], "do_polars_oper": 29, "do_someth": 131, "do_various_th": 168, "doc": [35, 37, 38, 132, 135, 137, 152, 154, 170, 171, 181, 313, 907, 908], "document": [87, 132, 170, 313, 317, 432, 435, 654, 673, 675, 676, 680, 782, 874, 907, 968, 1024, 1027, 1215, 1234, 1236, 1237, 1241], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 178, 192, 195, 199, 204, 205, 217, 218, 246, 247, 248, 278, 287, 290, 313, 316, 317, 446, 461, 465, 474, 535, 544, 640, 649, 661, 669, 670, 698, 782, 786, 806, 807, 812, 821, 825, 829, 835, 863, 869, 873, 899, 975, 1038, 1052, 1056, 1066, 1189, 1201, 1210, 1222, 1280, 1285, 1302], "doesn": [35, 129, 143, 204, 219, 313, 448, 786, 825, 830, 899, 1041, 1280], "dog": [639, 679, 682, 717, 1200, 1240, 1243], "doi": 1303, "dollar": [659, 660, 1220, 1221], "domain": [1, 647, 1208], "don": [55, 204, 219, 223, 278, 281, 313, 396, 507, 544, 582, 786, 825, 830, 863, 899, 905, 985, 1100, 1136, 1280], "done": [130, 149, 168, 174, 176, 219, 313, 328, 329, 582, 786, 801, 804, 830, 899], "dot": [47, 782, 786, 855, 899, 1280], "doubl": [272, 313], "dow": 1303, "down": [143, 146, 147, 148, 149, 464, 786, 1058, 1280], "download": [139, 143, 146, 147, 855, 899], "downstream": [271, 313, 625, 786, 1185, 1280], "dr": 145, "drago": [651, 1212], "dragon": 651, "dragonfr": 1212, "dragonfruit": [651, 663, 674, 1212, 1224, 1235], "dramat": 134, "draw": [20, 25, 159, 163, 1310], "drawback": 782, "drawfn": 1310, "drawing_charact": 20, "dremio": 131, "driver": [34, 131, 132, 313], "drop": [1, 119, 186, 187, 223, 278, 287, 313, 400, 402, 403, 505, 506, 589, 786, 815, 863, 869, 899, 988, 990, 991, 1098, 1099, 1157, 1280, 1306], "drop_dupl": [278, 313, 863, 899], "drop_first": [268, 313, 1256, 1280], "drop_in_plac": 313, "drop_nan": [403, 786, 991, 1280], "drop_nul": [313, 402, 786, 899, 990, 1280], "dset": 149, "dst": [430, 443, 1022, 1035], "dst_offset": [405, 993], "dt": [1, 36, 47, 134, 140, 245, 313, 602, 732, 786, 795, 848, 899, 905, 1288, 1302, 1303], "dt1": 1302, "dt2": 1302, "dtm": [36, 313, 408, 905, 996, 1302], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 156, 157, 158, 159, 163, 170, 172, 176, 179, 204, 219, 245, 269, 270, 271, 272, 275, 281, 290, 313, 382, 383, 394, 395, 446, 455, 468, 502, 510, 541, 543, 544, 550, 587, 594, 595, 602, 605, 607, 609, 611, 613, 616, 618, 620, 627, 629, 653, 673, 689, 693, 699, 709, 734, 738, 742, 743, 745, 746, 747, 748, 758, 761, 768, 777, 786, 804, 809, 825, 830, 848, 873, 899, 904, 905, 907, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 965, 966, 967, 968, 973, 983, 984, 987, 988, 1038, 1045, 1074, 1091, 1092, 1095, 1103, 1127, 1134, 1136, 1155, 1166, 1188, 1191, 1214, 1234, 1251, 1258, 1259, 1261, 1262, 1263, 1264, 1268, 1280, 1307, 1310], "dtype_format": [36, 313], "dtypekind": 172, "dtypelik": [170, 907], "dtypeoper": [1, 50], "dubiou": 87, "due": [176, 204, 219, 245, 248, 283, 313, 324, 413, 426, 430, 443, 565, 566, 568, 570, 572, 573, 602, 605, 607, 609, 611, 613, 616, 618, 620, 714, 727, 728, 730, 731, 773, 774, 786, 804, 825, 830, 848, 899, 1001, 1018, 1022, 1035], "dummi": [268, 313, 1256, 1280], "duplic": [47, 92, 211, 218, 219, 220, 278, 282, 313, 324, 482, 565, 589, 786, 829, 830, 831, 863, 866, 899, 1073, 1157, 1280, 1308], "duplicateerror": [589, 786, 1157, 1280], "dur": [220, 313, 831, 899], "durat": [168, 219, 283, 313, 405, 413, 436, 437, 438, 439, 440, 441, 442, 446, 452, 693, 727, 728, 730, 731, 773, 774, 786, 830, 899, 904, 905, 993, 1001, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1047, 1261, 1263, 1280], "dure": [46, 91, 129, 130, 143, 168, 192, 313, 1052, 1280], "dutch": [404, 714, 992], "dynam": [204, 313, 362, 535, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 786, 825, 899, 903, 947, 1128], "dynamicgroupbi": [204, 313], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 141, 146, 148, 149, 161, 184, 195, 202, 206, 215, 222, 264, 265, 271, 281, 313, 322, 399, 448, 452, 455, 481, 538, 544, 549, 550, 551, 553, 554, 555, 557, 558, 627, 632, 650, 669, 670, 681, 734, 748, 765, 776, 786, 813, 821, 833, 846, 899, 905, 1041, 1047, 1072, 1194, 1211, 1242, 1280, 1298, 1302, 1310], "e101": [36, 313], "e_filt": [553, 555], "e_sum_ov": [553, 555], "e_sum_slic": [553, 555], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 139, 147, 152, 153, 154, 155, 157, 180, 182, 188, 195, 202, 203, 204, 217, 219, 223, 236, 238, 245, 247, 249, 270, 275, 279, 282, 283, 291, 292, 294, 296, 298, 299, 307, 313, 338, 381, 397, 430, 443, 461, 484, 487, 513, 516, 523, 533, 540, 544, 589, 592, 600, 601, 608, 612, 623, 628, 635, 647, 651, 655, 656, 663, 665, 666, 674, 681, 695, 709, 712, 717, 742, 743, 768, 776, 786, 807, 810, 811, 816, 821, 825, 830, 844, 848, 864, 866, 875, 877, 879, 881, 882, 890, 899, 923, 972, 986, 1022, 1035, 1076, 1079, 1106, 1109, 1116, 1126, 1157, 1159, 1167, 1168, 1181, 1190, 1208, 1212, 1216, 1217, 1224, 1226, 1227, 1235, 1242, 1250, 1280, 1307, 1308, 1310], "eager": [204, 219, 238, 281, 313, 406, 409, 412, 414, 423, 424, 426, 427, 429, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 605, 607, 609, 611, 613, 616, 618, 620, 709, 713, 727, 728, 730, 731, 738, 742, 743, 758, 761, 765, 768, 773, 774, 777, 785, 786, 825, 830, 835, 899, 993, 994, 997, 1000, 1001, 1002, 1003, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1307], "eagerli": [535, 1289], "ear": [663, 674, 1224], "earlier": [219, 313, 830, 899], "earliest": [204, 313, 429, 673, 676, 729, 825, 891, 899, 1021, 1234, 1237], "easi": 168, "easiest": 173, "easili": [47, 251, 275, 287, 292, 313, 768, 782, 850, 869, 875, 899], "east": [148, 220, 313, 831, 899], "ebf1d": [36, 313], "eee": [1, 36, 313, 905], "effect": [36, 197, 204, 313, 413, 465, 544, 567, 569, 571, 786, 825, 872, 873, 899, 993, 1001], "effici": [117, 131, 215, 217, 313, 543, 786], "efgh": 1302, "eg": [17, 25, 36, 55, 132, 168, 270, 313, 430, 673, 676, 696, 786, 905, 1234, 1237], "egnaro": 1302, "either": [76, 159, 214, 218, 219, 220, 236, 245, 246, 270, 271, 313, 452, 543, 587, 589, 602, 673, 704, 712, 768, 786, 807, 829, 830, 831, 833, 848, 899, 903, 905, 1047, 1155, 1157, 1234, 1280, 1293, 1310], "element": [13, 14, 25, 154, 155, 158, 161, 173, 175, 182, 214, 238, 246, 259, 261, 276, 284, 313, 330, 331, 332, 333, 334, 335, 346, 347, 380, 381, 384, 387, 388, 389, 390, 392, 393, 394, 395, 396, 402, 403, 456, 457, 461, 474, 485, 496, 504, 506, 507, 508, 511, 516, 524, 525, 526, 527, 531, 537, 539, 540, 543, 544, 582, 583, 592, 595, 603, 604, 606, 608, 610, 612, 614, 615, 617, 619, 624, 629, 630, 631, 635, 636, 637, 665, 666, 677, 691, 692, 694, 695, 701, 712, 718, 720, 762, 763, 767, 775, 786, 802, 811, 857, 859, 862, 867, 899, 915, 916, 917, 918, 919, 920, 931, 932, 964, 970, 973, 976, 977, 978, 979, 981, 982, 983, 984, 985, 990, 991, 1050, 1051, 1056, 1067, 1077, 1086, 1089, 1090, 1097, 1099, 1100, 1101, 1104, 1109, 1117, 1118, 1119, 1120, 1132, 1133, 1136, 1152, 1159, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1183, 1191, 1192, 1193, 1197, 1198, 1226, 1227, 1238, 1252, 1253, 1254, 1258, 1265, 1266, 1270, 1280, 1297, 1298], "elementwis": [543, 582, 603, 604, 606, 608, 610, 612, 615, 617, 619, 786, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1280], "elif": 776, "elig": [835, 899], "elimin": [493, 786, 1087, 1280], "elis": [230, 313, 840, 899], "ellipsi": [202, 313], "elppa": 1302, "els": [130, 776], "email": [647, 1208], "email_part": [647, 1208], "emphas": [313, 317], "emploi": 905, "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 177, 178, 204, 229, 280, 313, 638, 645, 746, 764, 805, 806, 825, 839, 865, 899, 905, 973, 975, 1074, 1199, 1206, 1280], "en": [20, 36, 313], "enabl": [28, 29, 41, 45, 46, 84, 85, 141, 146, 148, 152, 153, 154, 155, 167, 170, 251, 272, 287, 313, 325, 327, 596, 597, 625, 640, 649, 661, 700, 782, 786, 807, 850, 869, 899, 907, 912, 913, 1163, 1164, 1185, 1201, 1210, 1222, 1262, 1269, 1280], "enable_string_cach": 84, "enclos": [467, 786], "encod": [59, 65, 75, 126, 129, 130, 143, 268, 313, 316, 367, 467, 600, 642, 685, 786, 951, 1167, 1203, 1256, 1280, 1285], "encount": [107, 129, 130, 143, 204, 313, 574, 575, 653, 654, 718, 722, 736, 786, 825, 899, 1145, 1146, 1214, 1215, 1280], "end": [33, 36, 42, 129, 130, 143, 204, 238, 313, 366, 369, 371, 405, 430, 455, 529, 639, 644, 647, 651, 657, 663, 667, 668, 669, 672, 709, 714, 726, 727, 728, 729, 730, 731, 734, 742, 743, 773, 774, 776, 782, 786, 825, 844, 899, 905, 953, 993, 1022, 1084, 1122, 1205, 1208, 1212, 1218, 1224, 1228, 1229, 1230, 1235, 1280, 1302], "endpoint": [397, 589, 786, 986, 1157, 1280], "ends_a": 1302, "ends_in_digit": 1302, "ends_with": [366, 371, 639, 667, 905, 1228, 1300], "ends_with_expr": 369, "ends_with_lit": 369, "engin": [14, 34, 131, 132, 134, 165, 203, 218, 223, 271, 278, 299, 313, 543, 765, 786, 807, 824, 829, 835, 839, 863, 874, 882, 896, 899, 1136, 1261, 1280, 1292, 1307], "engine_opt": [34, 134, 313], "enginetyp": [807, 899], "enough": [507, 632, 786, 1100, 1194, 1280], "ensur": [10, 36, 132, 158, 161, 170, 195, 203, 236, 246, 271, 313, 481, 543, 786, 821, 824, 835, 874, 899, 903, 905, 907, 1261, 1280], "enter": 168, "entir": [36, 53, 54, 134, 140, 313, 807, 808, 899], "entri": [313, 899, 1307], "entropi": [786, 1280], "enumer": [121, 129, 130, 134, 140, 143, 217, 313], "env": [4, 164], "env_onli": 30, "environ": [4, 30, 139, 141, 143, 146, 147, 148, 162, 165, 270, 313], "eol_char": [129, 130, 143], "eparg": 1302, "epoch": [61, 62, 738, 1303], "epoch_": [414, 1002], "epoch_n": [414, 1002], "epochtimeunit": [414, 738, 1002], "eq": [195, 313, 450, 461, 786, 821, 899, 1043, 1280], "eq_miss": [786, 1148, 1280], "equal": [46, 85, 129, 130, 143, 152, 153, 154, 155, 204, 219, 220, 230, 259, 313, 397, 443, 449, 450, 470, 495, 535, 577, 589, 595, 603, 604, 606, 608, 610, 612, 615, 617, 619, 635, 657, 658, 661, 683, 712, 762, 763, 776, 782, 786, 825, 830, 831, 840, 857, 899, 986, 1022, 1043, 1128, 1148, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1218, 1219, 1222, 1244, 1280, 1299, 1310], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 204, 214, 234, 313, 322, 326, 449, 450, 452, 465, 470, 472, 495, 542, 561, 563, 576, 577, 578, 581, 587, 656, 679, 681, 682, 688, 696, 703, 786, 825, 899, 1042, 1043, 1047, 1061, 1063, 1086, 1088, 1135, 1147, 1148, 1217, 1240, 1242, 1243, 1280, 1290, 1298], "err": 648, "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 141, 143, 148, 176, 238, 246, 271, 313, 324, 349, 350, 367, 404, 510, 512, 514, 565, 597, 639, 642, 646, 648, 650, 653, 654, 673, 675, 676, 680, 786, 804, 808, 874, 882, 899, 934, 935, 951, 992, 1103, 1105, 1107, 1164, 1200, 1203, 1207, 1209, 1211, 1214, 1215, 1234, 1236, 1237, 1241, 1261, 1280, 1305], "escap": [129, 130, 132, 143], "esp": 14, "especi": [157, 601, 786, 899, 1168, 1280], "espresso": 905, "est": 730, "establish": 131, "estim": [129, 130, 174, 190, 313, 329, 453, 454, 493, 708, 786, 801, 899, 1045, 1048, 1049, 1087, 1280], "estimated_s": [313, 1280], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 313, 544, 786, 903, 905, 1182, 1184, 1280, 1303], "eu": [144, 145], "eur": [202, 313, 1310], "europ": [409, 413, 429, 997, 1001, 1021], "eval": [269, 313, 543, 544, 733, 786, 1136, 1258, 1280], "evalu": [42, 43, 44, 45, 148, 193, 195, 219, 313, 326, 339, 341, 342, 373, 374, 375, 377, 378, 396, 461, 478, 498, 499, 535, 581, 582, 704, 706, 709, 713, 727, 728, 730, 731, 733, 742, 743, 758, 761, 768, 773, 774, 776, 777, 786, 807, 821, 827, 829, 830, 899, 924, 926, 927, 957, 958, 959, 961, 962, 985, 1056, 1091, 1092, 1271, 1280, 1299], "even": [33, 42, 129, 313, 452, 586, 589, 786, 899, 905, 1047, 1157, 1280], "evenli": [204, 313, 825, 899], "event": [54, 808, 899], "eventu": [34, 313], "ever": [582, 786], "everi": [14, 33, 42, 129, 130, 134, 140, 143, 198, 204, 267, 283, 313, 341, 342, 343, 344, 347, 349, 355, 392, 393, 394, 395, 396, 430, 443, 457, 469, 500, 501, 505, 508, 511, 512, 513, 521, 524, 529, 533, 601, 645, 722, 723, 786, 823, 825, 899, 926, 927, 928, 929, 932, 934, 940, 981, 982, 983, 984, 985, 1022, 1035, 1051, 1060, 1093, 1094, 1098, 1101, 1104, 1105, 1106, 1114, 1117, 1122, 1126, 1168, 1206, 1280], "everybodi": [640, 661, 1201, 1222], "everyth": 905, "ew": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "ewm_mean": [786, 1280], "ewm_mean_bi": [786, 1280], "ewm_std": [786, 1280], "ewm_var": [786, 1280], "ewma": [452, 786, 1047, 1280], "exact": [154, 157, 159, 163, 219, 257, 313, 329, 465, 645, 671, 672, 673, 675, 676, 696, 786, 830, 899, 1206, 1234, 1236, 1237], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 313, 665, 666, 671, 672, 732, 899, 1189, 1226, 1227, 1232, 1233, 1280], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 786, 798, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 903, 904, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1280, 1285, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309], "exc_tb": 1307, "exc_typ": 1307, "exc_val": 1307, "exce": [202, 313], "excel": [32, 36, 128, 134, 313, 798], "excelread": 134, "excelspreadsheetengin": 134, "except": [0, 185, 199, 206, 219, 222, 242, 264, 313, 382, 597, 651, 674, 734, 786, 798, 814, 830, 846, 899, 905, 965, 1067, 1090, 1164, 1212, 1235, 1252, 1261, 1280, 1306], "exclud": [159, 163, 204, 313, 381, 392, 395, 404, 481, 550, 695, 714, 782, 786, 825, 899, 905, 992, 1072, 1280], "excluded_dtyp": [159, 160, 163], "exclus": [246, 313, 703, 709, 742, 743, 786], "execut": [35, 46, 55, 131, 132, 221, 260, 313, 399, 507, 700, 765, 786, 803, 807, 813, 835, 844, 858, 874, 899, 903, 1100, 1269, 1280, 1290, 1291, 1292, 1294, 1307, 1309], "execute_glob": 1307, "execute_opt": [131, 132], "exist": [1, 34, 35, 36, 47, 92, 133, 141, 144, 148, 159, 185, 199, 238, 242, 277, 282, 287, 288, 313, 324, 366, 369, 371, 408, 429, 716, 786, 810, 814, 816, 846, 849, 866, 868, 869, 870, 899, 905, 996, 1021, 1309], "existing_t": 1309, "existing_table_path": [35, 313], "exit": [46, 84, 168, 1295, 1307], "exp": [451, 452, 453, 454, 786, 1046, 1047, 1048, 1049, 1280, 1300], "exp_a": 1301, "expand": [129, 141, 143, 148, 457, 549, 551, 595, 786, 903, 905, 1051, 1280], "expand_selector": 905, "expans": 684, "expect": [63, 65, 97, 105, 113, 129, 131, 143, 153, 155, 535, 544, 746, 786, 833, 835, 899], "expens": [129, 130, 139, 141, 143, 147, 148, 162, 164, 216, 223, 246, 247, 248, 277, 278, 313, 544, 786, 810, 812, 816, 849, 863, 868, 899, 1052, 1136, 1280, 1310], "experiment": [220, 275, 313, 831, 869, 899], "explain": [53, 54, 173, 221, 313, 807, 808, 899, 1306], "explainformat": [817, 899], "explicit": [36, 91, 131, 143, 157, 260, 282, 313, 760, 858, 866, 899], "explicitli": [91, 132, 157, 159, 168, 199, 313, 596, 768, 786, 797, 1307], "explod": [313, 381, 463, 582, 598, 695, 786, 899, 903, 1165, 1280, 1298], "explor": [183, 313, 812, 899], "expon": [587, 786, 1155, 1280, 1301], "exponenti": [451, 452, 453, 454, 456, 587, 786, 1046, 1047, 1048, 1049, 1050, 1280, 1301], "export": [36, 37, 38, 171, 216, 217, 247, 248, 265, 267, 270, 313, 782, 905, 908, 1255, 1280], "expos": 798, "expr": [1, 47, 48, 49, 50, 51, 191, 193, 194, 218, 219, 220, 234, 238, 246, 251, 252, 270, 275, 287, 288, 313, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 781, 782, 786, 787, 788, 791, 792, 793, 794, 795, 818, 819, 820, 829, 830, 831, 845, 850, 851, 869, 870, 899, 903, 905, 985, 992, 995, 996, 1010, 1018, 1042, 1043, 1047, 1054, 1055, 1059, 1061, 1063, 1088, 1100, 1106, 1122, 1126, 1135, 1147, 1148, 1200, 1205, 1211, 1228, 1280, 1305], "expr1": [1299, 1307], "expr2": [1299, 1307], "expr_unique_subset": [234, 313], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 175, 191, 193, 195, 203, 209, 218, 219, 223, 234, 238, 246, 251, 252, 256, 259, 270, 275, 276, 287, 288, 290, 292, 299, 313, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 338, 339, 343, 344, 345, 346, 347, 350, 361, 366, 367, 368, 369, 370, 371, 381, 386, 387, 388, 389, 390, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 455, 457, 458, 460, 461, 465, 467, 468, 470, 471, 472, 473, 478, 481, 482, 483, 484, 485, 486, 487, 495, 496, 500, 501, 503, 504, 507, 508, 514, 516, 534, 535, 541, 542, 543, 544, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 561, 563, 565, 566, 568, 570, 572, 573, 576, 577, 579, 581, 582, 586, 587, 588, 589, 591, 595, 596, 597, 598, 600, 601, 623, 624, 625, 628, 630, 631, 633, 635, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 666, 674, 678, 687, 688, 691, 692, 695, 696, 697, 699, 700, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 750, 752, 755, 758, 760, 761, 762, 763, 764, 766, 768, 770, 772, 773, 774, 776, 777, 782, 785, 798, 802, 807, 808, 817, 818, 821, 824, 829, 830, 844, 850, 851, 854, 855, 857, 862, 869, 870, 871, 873, 875, 882, 899, 903, 905, 931, 974, 985, 992, 995, 996, 1010, 1042, 1043, 1047, 1053, 1061, 1063, 1072, 1088, 1097, 1100, 1135, 1136, 1147, 1148, 1163, 1164, 1183, 1187, 1200, 1201, 1202, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1220, 1221, 1222, 1235, 1239, 1280, 1298, 1299, 1301, 1302, 1306], "exprmetanamespac": [548, 552], "ext": 131, "extend": [0, 119, 285, 313, 458, 786, 798, 903, 914, 1053, 1280], "extend_const": [786, 1280], "extens": [272, 313, 1262, 1280], "extern": [871, 899], "extra": [35, 129, 130, 133, 135, 137, 141, 143, 144, 145, 148, 192, 204, 313, 786, 825, 899, 903, 1052, 1280], "extract": [123, 173, 260, 313, 407, 410, 412, 415, 417, 418, 419, 420, 421, 422, 425, 427, 428, 431, 433, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 586, 647, 648, 649, 653, 654, 663, 665, 786, 995, 998, 999, 1000, 1003, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1039, 1208, 1209, 1210, 1214, 1215, 1224, 1300], "extract_numb": [586, 786], "extracted_nr": 647, "extrem": [458, 603, 786, 1053, 1169, 1280], "extrema": [627, 786, 1188, 1280], "f": [48, 130, 131, 195, 202, 217, 265, 271, 277, 281, 313, 322, 362, 370, 535, 627, 645, 673, 676, 716, 786, 821, 899, 905, 947, 1128, 1206, 1234, 1237, 1280, 1285, 1298], "f32": [1, 50, 176, 260, 269, 275, 313, 627, 765, 786, 804, 858, 899, 905, 1134, 1280, 1305], "f4": [271, 313], "f5ed2452": [36, 313], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 176, 177, 178, 181, 183, 184, 185, 188, 193, 194, 197, 201, 202, 203, 204, 209, 210, 218, 219, 225, 226, 227, 228, 232, 238, 239, 240, 258, 259, 261, 263, 275, 284, 287, 292, 295, 297, 300, 301, 302, 303, 305, 306, 313, 321, 324, 330, 331, 332, 333, 334, 335, 353, 359, 364, 370, 382, 384, 385, 387, 388, 389, 397, 398, 402, 403, 431, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 464, 465, 470, 472, 479, 480, 488, 489, 490, 491, 493, 495, 507, 518, 519, 531, 537, 538, 539, 540, 542, 545, 546, 547, 560, 563, 565, 574, 575, 576, 577, 583, 587, 589, 590, 591, 592, 596, 597, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 629, 630, 631, 632, 636, 637, 687, 691, 692, 696, 701, 710, 711, 715, 716, 718, 720, 733, 734, 748, 751, 752, 753, 765, 767, 775, 782, 786, 804, 805, 812, 814, 819, 820, 824, 825, 828, 829, 830, 837, 838, 845, 857, 859, 867, 869, 871, 875, 878, 880, 883, 884, 885, 886, 888, 889, 899, 905, 915, 916, 917, 918, 919, 920, 938, 944, 949, 954, 970, 971, 976, 977, 978, 986, 987, 990, 991, 1023, 1046, 1047, 1048, 1049, 1050, 1054, 1058, 1068, 1070, 1071, 1100, 1111, 1112, 1124, 1130, 1131, 1132, 1133, 1152, 1155, 1157, 1159, 1164, 1169, 1171, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1191, 1192, 1193, 1197, 1253, 1254, 1268, 1280, 1289, 1297, 1298, 1301, 1304, 1307, 1310], "f_string": 737, "fa1e": [678, 1239], "face": [139, 141, 143, 146, 147, 148], "facil": 131, "facilit": [179, 313], "factor": [451, 453, 454, 693, 786, 1046, 1048, 1049, 1263, 1280], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 172, 271, 278, 313, 339, 433, 535, 673, 675, 676, 680, 786, 863, 899, 1136, 1234, 1236, 1237, 1241, 1261, 1280, 1305], "fall": [148, 397, 589, 786, 807, 874, 899, 986, 1157, 1280], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 172, 175, 176, 177, 178, 183, 189, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 221, 226, 227, 233, 234, 236, 238, 239, 246, 247, 248, 249, 251, 254, 257, 259, 260, 263, 266, 268, 271, 272, 276, 277, 278, 282, 283, 285, 287, 295, 297, 300, 301, 303, 306, 313, 325, 326, 327, 338, 341, 342, 345, 349, 350, 358, 363, 366, 369, 371, 381, 382, 391, 392, 393, 394, 395, 396, 397, 404, 416, 431, 448, 449, 450, 451, 453, 454, 472, 473, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 503, 507, 510, 512, 514, 523, 530, 536, 542, 543, 544, 548, 550, 552, 554, 557, 576, 577, 579, 581, 584, 585, 589, 592, 603, 604, 606, 608, 610, 612, 614, 615, 617, 619, 623, 625, 627, 632, 634, 635, 638, 639, 640, 641, 644, 649, 650, 652, 653, 659, 660, 661, 664, 665, 667, 673, 675, 676, 678, 695, 697, 700, 703, 704, 705, 706, 707, 709, 712, 713, 714, 717, 718, 721, 722, 727, 728, 730, 731, 742, 743, 746, 758, 761, 765, 768, 773, 774, 776, 777, 786, 802, 804, 805, 806, 807, 808, 812, 817, 824, 825, 829, 830, 833, 835, 844, 850, 853, 855, 857, 858, 862, 863, 866, 869, 874, 878, 880, 883, 884, 886, 889, 899, 903, 905, 912, 913, 923, 926, 927, 930, 934, 935, 943, 948, 950, 951, 953, 955, 965, 967, 969, 972, 973, 980, 981, 982, 983, 984, 985, 986, 992, 1004, 1023, 1043, 1044, 1046, 1048, 1049, 1056, 1057, 1062, 1064, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1091, 1092, 1096, 1100, 1103, 1105, 1107, 1116, 1123, 1129, 1142, 1148, 1150, 1153, 1154, 1157, 1159, 1160, 1161, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1185, 1189, 1194, 1196, 1199, 1200, 1201, 1202, 1205, 1210, 1211, 1213, 1214, 1220, 1221, 1222, 1225, 1226, 1228, 1234, 1236, 1237, 1239, 1256, 1261, 1262, 1266, 1269, 1271, 1280, 1290, 1292, 1298, 1302, 1307], "far": [36, 313], "fashion": [218, 313, 817, 844, 855, 899], "fast": [41, 43, 45, 162, 164, 313, 458, 625, 786, 899, 903, 1053, 1185, 1280, 1310], "fast_executemani": [34, 313], "faster": [42, 43, 44, 45, 53, 54, 131, 134, 192, 271, 281, 313, 544, 698, 786, 807, 808, 817, 844, 855, 899, 1052, 1136, 1280], "fastexcel": [134, 151], "favor": [34, 313], "fay": 126, "feat1": [270, 275, 313], "feat2": [270, 275, 313], "feather": [37, 135, 146, 313, 798], "featur": [1, 41, 52, 63, 65, 270, 275, 313], "feature_0": [871, 899], "feature_0_train": [871, 899], "feature_1": [871, 899], "feature_nam": [275, 313], "feb": [151, 1302], "februari": 1302, "fed": 669, "feel": [640, 661, 1201, 1222], "fetch": [125, 807, 899], "fetch_california_h": [275, 313], "few": [202, 313], "fewer": [651, 674, 899, 1212, 1235], "ff": 1297, "ff00": [678, 1239], "fff": 1, "ffff00": [367, 368, 642, 951, 952, 1203], "ffffff": [36, 313], "ffi": [190, 313, 1045, 1280], "fgg": 905, "fghi": 1302, "fh": 130, "fiction": 1289, "field": [32, 33, 35, 42, 76, 109, 112, 119, 279, 313, 362, 535, 543, 544, 567, 569, 571, 600, 647, 648, 653, 665, 666, 686, 687, 700, 722, 723, 747, 768, 786, 864, 899, 947, 1128, 1136, 1167, 1209, 1226, 1227, 1248, 1250, 1280, 1303], "field_0": [362, 535, 947, 1128], "field_1": [362, 535, 947, 1128], "field_2": [947, 1128], "field_n": [362, 535, 947, 1128], "field_nam": [544, 786, 1136, 1280], "figsiz": [844, 855, 899], "figur": [622, 786, 855, 899, 1180, 1280], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 253, 313, 399, 467, 556, 559, 786, 813, 852, 899, 903, 1052, 1280], "file_cache_ttl": [139, 143, 146, 147], "filenam": 135, "filesystem": [35, 133, 144, 145, 313], "fill": [47, 55, 177, 193, 194, 256, 281, 313, 317, 365, 392, 395, 459, 460, 466, 479, 480, 604, 606, 608, 610, 612, 615, 617, 619, 626, 737, 758, 761, 777, 786, 819, 820, 854, 871, 899, 1054, 1055, 1070, 1071, 1149, 1170, 1171, 1173, 1176, 1177, 1178, 1187, 1280], "fill_char": [657, 658, 1218, 1219], "fill_nan": [194, 313, 460, 786, 820, 899, 1055, 1280], "fill_nul": [47, 193, 313, 459, 786, 819, 871, 899, 1054, 1280], "fill_valu": [256, 281, 313, 626, 786, 854, 899, 1187, 1280], "fillnullstrategi": [194, 313, 460, 786, 820, 899, 1055, 1280], "film": 1289, "filter": [1, 42, 43, 44, 45, 48, 53, 54, 133, 143, 144, 148, 149, 187, 211, 212, 213, 238, 299, 313, 553, 555, 644, 667, 702, 726, 729, 736, 765, 776, 786, 807, 808, 815, 817, 827, 844, 855, 858, 882, 899, 905, 1184, 1280, 1296], "final": [13, 36, 47, 148, 219, 221, 313, 451, 453, 454, 786, 812, 830, 899, 903, 1046, 1048, 1049, 1280, 1308], "find": [55, 200, 313, 624, 639, 640, 786, 1183, 1201, 1280], "find_pat": 650, "fine": [807, 896, 899], "finish": [192, 313, 1052, 1280], "finit": [483, 696, 718, 786, 1075, 1280], "first": [41, 47, 129, 130, 134, 135, 137, 140, 141, 143, 148, 152, 153, 154, 155, 173, 202, 204, 206, 219, 222, 223, 233, 237, 238, 245, 264, 268, 269, 277, 278, 283, 290, 296, 313, 338, 340, 349, 396, 400, 424, 426, 430, 446, 465, 475, 484, 497, 505, 507, 512, 513, 535, 543, 544, 554, 562, 586, 587, 602, 624, 635, 639, 645, 646, 650, 651, 653, 654, 659, 660, 674, 681, 715, 722, 736, 740, 776, 782, 786, 825, 826, 830, 834, 843, 848, 863, 871, 873, 879, 899, 905, 923, 934, 985, 987, 988, 1016, 1018, 1022, 1038, 1067, 1076, 1090, 1098, 1100, 1105, 1106, 1128, 1136, 1183, 1196, 1206, 1207, 1209, 1211, 1212, 1214, 1215, 1220, 1221, 1235, 1242, 1252, 1256, 1258, 1261, 1280, 1299, 1300, 1302, 1308, 1310], "first_column": [36, 313], "first_non_nul": [535, 1128], "first_part": [665, 666, 1226, 1227], "fisher": [493, 632, 786, 1087, 1194, 1280], "fit": [126, 216, 257, 281, 313, 627, 761, 786, 1188, 1189, 1280], "five": [274, 313, 1310], "fix": [10, 56, 65, 157, 446, 732, 1038], "flag": [52, 156, 271, 313, 625, 639, 646, 647, 650, 659, 660, 786, 817, 835, 899, 905, 1185, 1200, 1207, 1208, 1211, 1220, 1221, 1261, 1280, 1302], "flat": [126, 248, 313, 508, 598, 786, 1101, 1165, 1280], "flatten": 786, "flavour": [36, 131, 313], "flight": 131, "flight_sql": 131, "flightsql": 131, "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 172, 183, 190, 193, 219, 240, 249, 270, 271, 305, 313, 345, 385, 397, 402, 403, 431, 448, 449, 450, 451, 453, 454, 459, 464, 465, 470, 472, 479, 483, 486, 488, 489, 490, 491, 495, 503, 523, 538, 542, 545, 560, 574, 575, 576, 577, 587, 589, 590, 603, 604, 606, 608, 610, 612, 613, 615, 617, 619, 621, 623, 629, 696, 759, 761, 786, 812, 819, 830, 845, 855, 888, 899, 905, 930, 965, 971, 986, 987, 989, 990, 991, 1023, 1041, 1045, 1046, 1048, 1049, 1054, 1058, 1068, 1087, 1096, 1116, 1131, 1145, 1146, 1155, 1156, 1157, 1158, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1181, 1184, 1191, 1194, 1198, 1251, 1261, 1270, 1280, 1307, 1310], "float16": [275, 313], "float32": [1, 10, 33, 42, 50, 176, 197, 269, 270, 271, 275, 313, 452, 786, 804, 899, 905, 1047, 1074, 1134, 1259, 1261, 1264, 1280], "float4": [260, 313, 765, 858, 899, 1305], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 179, 188, 190, 197, 250, 275, 287, 313, 330, 331, 332, 333, 334, 335, 370, 382, 387, 388, 389, 398, 431, 452, 455, 488, 489, 591, 630, 631, 691, 692, 734, 758, 761, 777, 782, 786, 809, 816, 849, 869, 899, 905, 1023, 1047, 1262, 1268, 1280], "float_list": 72, "float_precis": [9, 10, 27, 33, 36, 42, 313, 899], "float_scientif": [33, 42, 313, 899], "floatfmt": 11, "floor": [49, 465, 786, 1280, 1300], "floor_a": 1301, "floordiv": [696, 786], "fmt": [11, 219, 313, 478, 737, 786, 827, 830, 899], "fmt_number": [313, 317], "fmt_str_length": [12, 727, 728, 730, 731], "fmt_table_cell_list_len": 13, "fmt_titl": [36, 313], "fn": [722, 723, 736, 760], "foggi": [659, 660, 1220, 1221], "fold": [313, 554, 715, 722, 723, 760], "folder": 149, "follow": [36, 41, 52, 129, 130, 131, 133, 134, 140, 143, 144, 145, 204, 219, 223, 237, 245, 271, 283, 313, 426, 430, 443, 452, 543, 586, 587, 592, 602, 605, 607, 609, 611, 613, 614, 616, 618, 620, 629, 686, 696, 711, 727, 728, 730, 731, 748, 773, 774, 776, 778, 779, 781, 786, 787, 788, 791, 793, 794, 795, 825, 830, 843, 848, 899, 905, 1018, 1022, 1035, 1047, 1155, 1159, 1182, 1184, 1191, 1261, 1272, 1274, 1276, 1280, 1281, 1286, 1287, 1288, 1305, 1310], "font": [36, 313], "font_color": [36, 313], "font_siz": [36, 313], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 240, 242, 243, 246, 249, 250, 251, 253, 255, 258, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 277, 278, 279, 284, 285, 286, 291, 313, 383, 397, 399, 426, 469, 475, 478, 497, 548, 550, 552, 553, 554, 555, 556, 557, 558, 589, 598, 638, 641, 643, 645, 647, 648, 652, 662, 664, 666, 668, 669, 670, 671, 672, 679, 682, 690, 708, 718, 719, 720, 735, 739, 740, 741, 744, 745, 749, 751, 753, 754, 756, 757, 759, 764, 767, 771, 775, 776, 782, 786, 804, 809, 810, 814, 815, 816, 821, 827, 828, 829, 842, 846, 849, 850, 863, 864, 868, 871, 899, 904, 905, 966, 986, 1018, 1107, 1155, 1157, 1165, 1202, 1204, 1206, 1208, 1209, 1223, 1227, 1232, 1233, 1240, 1243, 1280, 1294, 1296, 1297, 1298, 1299, 1302, 1305], "foo1": 1302, "foo11": [197, 313], "foo_": [551, 664, 737], "foo_1": [268, 313], "foo_2": [268, 313], "foo_3_4": 1302, "foo_a": [238, 313], "foo_a_bar_1": 737, "foo_at_1": 1298, "foo_b": [238, 313], "foo_b_bar_2": 737, "foo_bar": [548, 552, 664, 746, 1294], "foo_bar2": [548, 552], "foo_bar_baz": 664, "foo_c_bar_3": 737, "foo_low": [679, 1302], "foo_mean": 1298, "foo_std": 1297, "foo_strip": 668, "foo_strip_end": 669, "foo_strip_start": 670, "foo_sum": [1297, 1298], "foo_uniqu": 1298, "foo_upp": [682, 1302], "foo_var": 1297, "foobar": [671, 672, 1232, 1233, 1302], "foobarbar": [672, 1233], "foofoobar": [671, 1232], "foral": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "forc": [219, 223, 271, 299, 313, 535, 829, 830, 882, 899, 1136, 1261, 1280], "force_parallel": [219, 313, 829, 830, 899], "form": [33, 42, 116, 118, 119, 120, 122, 138, 139, 147, 216, 247, 281, 313, 583, 681, 786, 899, 1152, 1242, 1280, 1302], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 41, 42, 87, 127, 129, 130, 131, 134, 135, 137, 140, 143, 149, 171, 184, 191, 202, 216, 229, 238, 247, 248, 253, 267, 280, 311, 313, 317, 399, 430, 432, 435, 556, 557, 673, 675, 676, 680, 732, 786, 813, 817, 818, 839, 852, 865, 899, 908, 1024, 1027, 1234, 1236, 1237, 1241, 1279, 1302, 1303], "formula": [36, 313, 448, 786, 1041, 1280], "fortran": [270, 271, 313], "forward": [194, 219, 256, 313, 357, 404, 423, 460, 466, 528, 626, 786, 820, 830, 854, 899, 942, 992, 1015, 1055, 1121, 1187, 1280], "forward_fil": [283, 313, 365, 392, 395, 626, 786], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 141, 148, 188, 260, 313, 624, 650, 654, 671, 672, 673, 676, 786, 858, 899, 1183, 1211, 1215, 1232, 1233, 1234, 1237, 1280, 1292, 1307], "four": [274, 313, 1307], "fourth": [493, 786, 1087, 1280], "frac": [451, 452, 453, 454, 632, 786, 1046, 1047, 1048, 1049, 1194, 1280], "fraction": [33, 42, 152, 153, 154, 155, 249, 313, 431, 523, 583, 623, 673, 676, 786, 899, 1023, 1116, 1152, 1181, 1234, 1237, 1280], "fragment": 1307, "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 176, 177, 183, 216, 217, 221, 223, 230, 234, 237, 246, 247, 248, 260, 275, 281, 282, 313, 765, 804, 805, 812, 840, 843, 858, 866, 899, 905, 973, 1280, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1306, 1310], "frame_data": [1291, 1294], "frameinittyp": [313, 899], "frametyp": [47, 1307], "framework": [238, 280, 313, 865, 899], "freedom": [261, 284, 313, 531, 537, 615, 616, 619, 620, 637, 701, 718, 720, 762, 763, 767, 775, 786, 859, 867, 899, 1176, 1178, 1198, 1270, 1280], "freeli": [765, 858, 899, 905], "freez": [36, 313], "freeze_pan": [36, 313], "frequenc": [283, 313, 700, 786, 1269, 1280], "frequent": [1182, 1184, 1280], "fri": [313, 316], "fridai": [204, 313, 404, 432, 435, 714, 825, 899, 992, 1024, 1027], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 173, 176, 183, 184, 185, 190, 192, 195, 196, 202, 204, 216, 217, 218, 219, 220, 221, 229, 238, 242, 245, 246, 248, 249, 251, 252, 260, 268, 275, 277, 278, 280, 281, 282, 283, 289, 313, 316, 317, 362, 370, 397, 398, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 455, 465, 467, 479, 493, 511, 523, 535, 544, 574, 575, 577, 582, 583, 586, 589, 591, 602, 603, 605, 607, 609, 611, 613, 616, 618, 620, 623, 635, 646, 647, 651, 653, 663, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 698, 710, 711, 714, 715, 726, 727, 728, 729, 730, 731, 732, 746, 761, 765, 772, 773, 774, 782, 785, 786, 804, 812, 813, 814, 821, 825, 829, 830, 831, 839, 846, 848, 850, 851, 858, 863, 865, 866, 871, 872, 899, 905, 947, 954, 986, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1045, 1047, 1052, 1087, 1104, 1116, 1128, 1145, 1146, 1148, 1149, 1152, 1157, 1169, 1181, 1207, 1208, 1212, 1214, 1224, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1256, 1271, 1280, 1289, 1290, 1291, 1292, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310], "from_arrai": 765, "from_arrow": 117, "from_json": 786, "from_panda": 117, "from_repr": [269, 313, 1258, 1280], "fromkei": [48, 50], "front": [204, 313, 825, 899], "fruit": [266, 313, 599, 644, 667, 674, 786, 1205, 1228, 1235], "fruits_revers": [599, 786], "fsspec": [129, 130, 135, 137, 144, 145, 151], "fsspecfileio": 145, "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 139, 141, 143, 144, 145, 147, 148, 149, 218, 282, 313, 651, 653, 673, 674, 675, 676, 680, 727, 728, 829, 835, 866, 899, 905, 1212, 1214, 1234, 1235, 1236, 1237, 1241, 1280, 1296, 1310], "full_sent": 717, "fulli": [161, 237, 249, 271, 313], "funcnam": [36, 313], "function": [0, 36, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 170, 172, 175, 181, 184, 190, 197, 220, 223, 229, 237, 238, 242, 260, 270, 271, 272, 275, 276, 277, 280, 281, 282, 299, 313, 316, 317, 325, 362, 380, 381, 396, 397, 399, 430, 451, 453, 454, 476, 535, 543, 544, 566, 567, 582, 586, 589, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 629, 632, 693, 694, 695, 704, 708, 719, 721, 722, 723, 735, 736, 738, 740, 741, 744, 747, 748, 751, 753, 756, 758, 760, 762, 763, 767, 771, 775, 777, 782, 786, 798, 802, 808, 813, 831, 835, 839, 843, 846, 858, 862, 865, 866, 873, 882, 899, 903, 907, 947, 964, 969, 985, 986, 1022, 1045, 1046, 1048, 1049, 1068, 1128, 1136, 1157, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1182, 1184, 1189, 1191, 1194, 1259, 1262, 1264, 1265, 1280, 1285, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1306, 1307, 1308, 1309, 1310], "function_nam": 903, "further": 782, "futur": [54, 172, 183, 254, 313, 808, 812, 853, 899], "g": [33, 42, 126, 129, 133, 135, 137, 144, 149, 161, 172, 184, 215, 271, 281, 313, 322, 399, 452, 455, 544, 627, 734, 786, 813, 846, 899, 1047, 1280, 1310], "g1": [461, 702, 786], "g2": [461, 702, 786], "g_1": [632, 786, 1194, 1280], "gag": 26, "gamma": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "gantt": [844, 899], "gather": [130, 198, 313, 338, 469, 511, 712, 786, 823, 899, 923, 1060, 1104, 1280], "gather_everi": [313, 786, 899, 1280], "gb": [190, 313, 370, 1045, 1280], "gbp": 1310, "gc": [35, 133, 144, 145, 313], "gca": 26, "gcaacgcatata": 26, "gcp": [139, 141, 143, 145, 146, 147, 148], "gdp": [219, 313, 830, 899], "gdp2": [219, 313, 830, 899], "gdp_date": [219, 313, 830, 899], "ge": [786, 1280], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 172, 179, 181, 238, 249, 268, 271, 277, 313, 382, 523, 623, 628, 709, 727, 730, 742, 743, 745, 761, 773, 774, 786, 899, 965, 1116, 1181, 1190, 1256, 1280, 1310], "geq": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "germani": [219, 313, 830, 899], "get": [47, 54, 136, 142, 149, 173, 175, 179, 180, 188, 196, 199, 201, 204, 206, 207, 211, 213, 214, 222, 225, 232, 233, 238, 245, 246, 250, 255, 258, 264, 272, 276, 286, 296, 307, 313, 323, 336, 337, 338, 340, 348, 351, 363, 370, 381, 383, 392, 393, 394, 395, 404, 414, 462, 468, 475, 492, 494, 497, 509, 515, 536, 545, 546, 547, 553, 555, 560, 574, 575, 584, 585, 590, 601, 602, 633, 637, 645, 689, 690, 694, 695, 697, 701, 712, 714, 735, 740, 744, 748, 749, 750, 751, 753, 754, 755, 757, 767, 771, 775, 786, 802, 807, 808, 810, 816, 822, 825, 826, 832, 834, 848, 849, 856, 861, 862, 868, 879, 890, 899, 903, 904, 909, 921, 922, 923, 924, 925, 933, 936, 948, 954, 966, 972, 981, 982, 983, 984, 992, 1002, 1040, 1057, 1062, 1067, 1072, 1073, 1085, 1090, 1102, 1108, 1129, 1137, 1139, 1140, 1142, 1144, 1145, 1146, 1153, 1154, 1158, 1168, 1195, 1198, 1206, 1252, 1256, 1262, 1266, 1270, 1280], "get_chunk": 1280, "get_column": [172, 273, 313], "get_column_index": 313, "get_worksheet_by_nam": [36, 313], "gevent": [54, 151, 808, 899], "ghi": [322, 647, 786, 905, 1208], "gil": [544, 786], "git": 52, "github": [132, 313], "give": [139, 146, 147, 219, 229, 278, 280, 313, 414, 465, 493, 595, 696, 700, 786, 798, 830, 839, 863, 865, 899, 1002, 1087, 1269, 1280, 1306], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 170, 190, 191, 193, 204, 214, 223, 236, 237, 246, 247, 248, 256, 259, 275, 282, 313, 345, 357, 362, 370, 381, 386, 405, 409, 432, 434, 435, 448, 452, 476, 481, 503, 528, 535, 538, 544, 582, 586, 592, 595, 596, 598, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 626, 647, 648, 657, 658, 673, 676, 683, 686, 695, 734, 735, 744, 747, 748, 761, 762, 763, 786, 818, 825, 835, 843, 854, 857, 866, 882, 899, 904, 905, 907, 930, 942, 947, 954, 974, 993, 997, 1024, 1026, 1027, 1041, 1045, 1047, 1068, 1072, 1086, 1096, 1121, 1128, 1131, 1134, 1136, 1149, 1155, 1159, 1165, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1183, 1187, 1208, 1209, 1218, 1219, 1234, 1237, 1244, 1268, 1271, 1280, 1289, 1291, 1296, 1298, 1301, 1302, 1307, 1309, 1310], "glimps": [183, 206, 313], "glob": [129, 130, 141, 143, 146, 147, 148], "global": [46, 84, 85, 134, 150, 159, 167, 260, 313, 596, 597, 765, 786, 858, 899, 967, 968, 1163, 1164, 1280, 1290, 1292, 1306], "gmt": [409, 413, 429, 997, 1001, 1021], "go": [12, 129, 130, 143, 644, 1205], "godfath": 1289, "goe": 12, "gonfruit": 1235, "good": [41, 43, 45, 216, 313, 899, 1301], "goodby": 1, "googl": [133, 144, 145], "gpu": [270, 313, 807, 874, 896, 899, 1259, 1280], "gpu_devic": [270, 313], "gpudevic": [270, 313], "gpuengin": [807, 899], "grade": [1087, 1280], "grain": [807, 896, 899], "granular": 1307, "grape": 1302, "graph": [53, 131, 221, 313, 807, 827, 871, 899], "graphviz": [221, 313, 855, 899], "great": [313, 317], "great_tabl": [313, 317], "greater": [177, 219, 313, 470, 472, 481, 632, 657, 658, 666, 683, 786, 830, 899, 1072, 1194, 1218, 1219, 1227, 1244, 1280], "greatest": [1297, 1300], "greatli": [135, 146], "green": [46, 84, 85, 299, 700, 786, 882, 1269, 1280], "greenlet": [54, 808, 899], "greet": 1, "grid": [479, 786], "grid_point": [479, 786], "gridlin": [36, 313], "gross": 1289, "group": [9, 27, 41, 45, 130, 148, 176, 203, 204, 217, 234, 236, 238, 245, 248, 281, 283, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 323, 381, 396, 457, 463, 468, 471, 507, 543, 544, 553, 555, 582, 592, 601, 602, 634, 635, 639, 646, 647, 648, 650, 659, 660, 695, 700, 748, 786, 804, 824, 825, 848, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 903, 905, 985, 1100, 1168, 1200, 1207, 1208, 1209, 1211, 1220, 1221, 1269, 1280, 1289, 1297, 1306, 1307], "group_bi": [204, 234, 238, 245, 283, 312, 313, 323, 381, 461, 463, 468, 471, 543, 544, 582, 634, 635, 695, 702, 727, 730, 748, 786, 807, 808, 817, 825, 844, 848, 855, 897, 899, 905], "group_by_dynam": [245, 313, 848, 899], "group_by_partit": [844, 899], "group_col": [461, 702, 786], "group_df": [299, 882], "group_dtyp": [582, 786], "group_index": [646, 1207], "group_to_row": [582, 786], "groupbi": [203, 313, 544, 748, 786], "grow": [285, 313], "grown": [208, 313], "gt": [313, 317, 786, 1280], "gte": [461, 702, 786], "guarante": [41, 45, 129, 130, 175, 183, 205, 276, 278, 313, 380, 381, 474, 694, 695, 786, 802, 812, 862, 863, 899, 964, 1066, 1265, 1280], "guid": [786, 903, 1310], "gzip": [41, 45, 313, 899], "h": [281, 313, 322, 432, 435, 627, 659, 660, 673, 676, 680, 786, 1220, 1221, 1234, 1237, 1241, 1302, 1303], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 172, 283, 289, 294, 313, 380, 381, 396, 467, 543, 554, 559, 651, 674, 684, 694, 695, 735, 744, 782, 786, 808, 872, 877, 882, 899, 964, 973, 985, 987, 1212, 1235, 1265, 1280], "half": [275, 313, 430, 451, 452, 453, 454, 786, 1022, 1046, 1047, 1048, 1049, 1280], "half_lif": [451, 452, 453, 454, 786, 1046, 1047, 1048, 1049, 1280], "ham": [31, 33, 35, 37, 38, 41, 176, 179, 180, 181, 185, 186, 187, 188, 189, 195, 200, 205, 206, 208, 218, 222, 224, 226, 228, 231, 235, 240, 242, 243, 246, 249, 250, 251, 258, 261, 262, 264, 268, 269, 271, 272, 273, 278, 284, 285, 313, 383, 557, 782, 804, 809, 810, 814, 815, 816, 821, 829, 842, 846, 849, 850, 863, 871, 899, 966, 1296, 1297], "ham_a": [268, 313], "ham_b": [268, 313], "ham_right": [218, 313, 829, 899], "hamburg": 782, "hand": [36, 129, 130, 143, 313, 524, 525, 526, 527, 1117, 1118, 1119, 1120], "handi": [404, 714, 992], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 195, 199, 313, 400, 505, 645, 683, 786, 807, 808, 821, 899, 903, 988, 1098, 1206, 1244, 1280], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 399, 786, 813, 899], "happen": [131, 409, 589, 786, 997, 1157, 1280], "hard": [143, 835, 899], "harder": [204, 313, 825, 899], "hardwar": 1310, "has_head": [129, 130, 134, 140, 143], "has_nul": [786, 1065, 1280], "has_prefix": 667, "has_suffix": 644, "has_two": 1298, "has_valid": 1280, "hash": [205, 313, 786, 1280], "hash_row": 313, "hat": [659, 660, 1220, 1221], "have": [5, 14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 184, 192, 216, 218, 219, 238, 241, 245, 247, 248, 267, 275, 290, 313, 396, 399, 451, 453, 454, 544, 554, 592, 596, 597, 602, 648, 661, 786, 813, 829, 830, 839, 848, 872, 873, 899, 903, 905, 985, 987, 1046, 1048, 1049, 1052, 1159, 1163, 1164, 1222, 1280, 1306, 1308, 1310], "haystack": [647, 1208], "he": 669, "head": [143, 202, 222, 264, 313, 328, 497, 786, 834, 899, 1090, 1252, 1280], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 140, 143, 188, 277, 313, 899], "header_format": [36, 313], "header_nam": [277, 313], "headerless": 143, "heap": [190, 313, 786, 903, 1045, 1280], "heatmap": [36, 313], "heavili": 148, "height": [36, 126, 159, 187, 313], "hell": [668, 1229], "hello": [1, 20, 668, 669, 670, 905, 1107, 1229, 1230, 1231, 1291, 1294], "hello_": 737, "hello_data": 1294, "hello_world": 1294, "help": [36, 152, 153, 154, 155, 313, 899], "helper": [313, 317, 782], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 146, 147, 148, 157, 159, 163, 173, 238, 313, 404, 543, 544, 648, 654, 714, 786, 855, 899, 905, 992, 1215], "hex": [367, 368, 642, 643, 678, 951, 952, 1203, 1204, 1239], "hexadecim": [951, 952], "hf": [139, 141, 143, 146, 147, 148], "hf_token": [139, 141, 143, 146, 147, 148], "hi": [1, 1302], "hidden": [36, 313], "hidden_column": [36, 313], "hide": [21, 22, 23, 24, 36, 313], "hide_gridlin": [36, 313], "hide_password": 131, "high": [248, 313, 317, 589, 786, 798, 1157, 1280], "higher": [41, 45, 183, 240, 305, 313, 590, 612, 613, 759, 786, 812, 845, 888, 899, 987, 1158, 1174, 1280], "highest": [313, 317, 592, 699, 718, 786, 899, 1159, 1280], "highli": [786, 903], "hippopotamu": [657, 658, 1218, 1219], "hist": [786, 1280, 1285], "histogram": [1280, 1285], "hit": [803, 899], "hive": [141, 146, 148], "hive_partit": [141, 146, 148], "hive_schema": [141, 146, 148], "hmm": 905, "hold": [257, 271, 313, 1261, 1280], "holidai": [404, 714, 992], "home": [681, 1242], "horizont": [20, 55, 92, 197, 208, 225, 227, 232, 263, 281, 313, 705, 707, 716, 717, 722, 723, 725, 733, 736, 750, 752, 755, 760, 770, 871, 899], "host": [52, 129, 135, 137, 148], "hour": [139, 143, 146, 147, 204, 219, 245, 283, 313, 418, 420, 421, 425, 426, 430, 431, 437, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 729, 730, 731, 732, 772, 773, 774, 786, 825, 830, 848, 899, 905, 1018, 1022, 1029, 1035, 1047, 1280, 1303], "hours_diff": 437, "hous": [275, 313], "how": [11, 35, 36, 47, 55, 92, 132, 139, 141, 143, 146, 147, 148, 187, 195, 218, 219, 238, 281, 282, 313, 346, 400, 429, 479, 504, 505, 582, 595, 614, 673, 676, 714, 729, 776, 786, 815, 821, 829, 830, 866, 871, 899, 903, 931, 988, 1021, 1097, 1098, 1175, 1234, 1237, 1280], "howev": [1, 119, 131, 141, 148, 190, 223, 271, 313, 582, 786, 807, 899, 1045, 1280], "hstack": [92, 313], "html": [36, 37, 38, 117, 131, 135, 137, 170, 171, 172, 181, 313, 907, 908], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 313, 646, 648, 855, 899, 907, 908, 1207, 1209], "hug": [139, 141, 143, 146, 147, 148], "hut": [659, 660, 1220, 1221], "hvplot": [313, 316, 1280, 1285], "hyperbol": [331, 333, 335, 388, 631, 692, 786, 916, 918, 920, 977, 1193, 1254, 1280], "hyperloglog": [174, 313, 329, 708, 786, 801, 899], "hyphen": [638, 1199], "hypothesi": [157, 159, 162, 163, 1310], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 173, 174, 175, 178, 179, 183, 184, 187, 189, 190, 192, 195, 199, 203, 204, 205, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 229, 230, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 252, 253, 254, 256, 258, 259, 260, 261, 264, 265, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 288, 290, 291, 299, 313, 316, 317, 322, 325, 327, 328, 329, 339, 342, 349, 350, 357, 362, 380, 381, 396, 397, 399, 402, 403, 404, 405, 408, 416, 423, 424, 426, 430, 432, 443, 451, 452, 453, 454, 457, 461, 465, 474, 476, 478, 481, 493, 499, 506, 507, 510, 512, 514, 523, 528, 529, 531, 535, 537, 540, 543, 544, 548, 550, 552, 553, 554, 556, 564, 582, 587, 589, 592, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 628, 629, 632, 633, 634, 635, 637, 638, 639, 640, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 670, 673, 674, 675, 676, 678, 680, 681, 683, 687, 694, 695, 700, 701, 704, 705, 706, 707, 708, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 730, 731, 736, 740, 741, 742, 743, 745, 746, 748, 751, 753, 756, 758, 761, 762, 763, 764, 765, 767, 771, 773, 774, 775, 776, 777, 782, 786, 801, 802, 803, 806, 807, 808, 810, 812, 813, 815, 816, 817, 821, 824, 825, 828, 829, 830, 831, 833, 835, 839, 840, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 870, 873, 874, 882, 892, 899, 903, 905, 912, 913, 914, 927, 934, 935, 942, 947, 964, 967, 969, 974, 975, 985, 986, 987, 990, 991, 992, 993, 996, 1004, 1018, 1022, 1024, 1035, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1056, 1066, 1067, 1068, 1072, 1074, 1084, 1086, 1087, 1090, 1092, 1099, 1100, 1103, 1105, 1107, 1116, 1121, 1122, 1128, 1136, 1155, 1157, 1159, 1161, 1163, 1164, 1165, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1182, 1183, 1184, 1185, 1187, 1190, 1191, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1227, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1239, 1241, 1242, 1244, 1252, 1255, 1259, 1261, 1262, 1264, 1265, 1269, 1270, 1280, 1285, 1289, 1290, 1295, 1299, 1302, 1305, 1307, 1308, 1310], "i0e0": 1310, "i16": [1, 50, 412, 427, 445, 627, 786, 905, 1019, 1258, 1280, 1310], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 251, 260, 313, 348, 349, 351, 382, 407, 415, 417, 418, 419, 420, 421, 425, 447, 627, 714, 776, 786, 850, 899, 933, 934, 936, 995, 1005, 1009, 1010, 1011, 1017, 1039, 1134, 1280, 1299, 1303, 1310], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 173, 175, 176, 177, 178, 180, 184, 185, 187, 188, 191, 192, 194, 195, 198, 199, 201, 202, 203, 204, 206, 208, 209, 211, 213, 215, 218, 219, 220, 222, 223, 224, 230, 231, 236, 237, 238, 239, 242, 243, 244, 245, 249, 251, 253, 256, 258, 259, 260, 262, 264, 266, 273, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 303, 306, 307, 313, 322, 324, 328, 338, 343, 344, 346, 347, 352, 354, 355, 356, 357, 358, 360, 363, 365, 380, 381, 386, 392, 393, 394, 395, 396, 397, 400, 401, 414, 434, 436, 437, 438, 439, 440, 441, 442, 452, 455, 457, 458, 460, 461, 462, 463, 465, 466, 468, 469, 471, 475, 477, 478, 479, 480, 481, 484, 485, 487, 488, 489, 490, 491, 494, 497, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 541, 543, 544, 561, 562, 563, 565, 566, 568, 570, 572, 573, 578, 582, 583, 586, 587, 588, 589, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 623, 625, 626, 627, 628, 633, 634, 635, 651, 659, 660, 674, 678, 683, 684, 686, 687, 688, 689, 690, 694, 695, 696, 697, 699, 702, 709, 712, 715, 716, 717, 722, 723, 724, 725, 726, 729, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 754, 755, 757, 760, 764, 765, 766, 769, 770, 771, 772, 776, 782, 786, 802, 804, 805, 807, 808, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 834, 835, 836, 840, 841, 843, 844, 846, 847, 848, 850, 852, 854, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 869, 872, 873, 875, 876, 878, 879, 880, 882, 883, 886, 889, 890, 899, 905, 909, 910, 911, 914, 932, 937, 939, 941, 942, 943, 945, 948, 964, 974, 975, 981, 982, 983, 984, 985, 986, 1002, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1051, 1052, 1053, 1055, 1056, 1059, 1060, 1062, 1067, 1069, 1077, 1090, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1110, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1136, 1141, 1149, 1155, 1157, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1170, 1173, 1177, 1181, 1182, 1184, 1187, 1188, 1190, 1195, 1196, 1239, 1245, 1250, 1252, 1257, 1265, 1266, 1271, 1280, 1289, 1290, 1292, 1296, 1297, 1298, 1299, 1301, 1304, 1305, 1307, 1308, 1310], "i8": [361, 362, 412, 415, 418, 420, 421, 422, 425, 427, 428, 431, 444, 445, 534, 627, 758, 761, 777, 786, 946, 947, 988, 1000, 1003, 1013, 1014, 1020, 1023, 1036, 1037, 1127, 1166, 1188, 1268, 1280, 1303], "iceberg": [145, 798], "icon": [36, 313], "id": [26, 36, 55, 126, 129, 145, 220, 270, 277, 290, 299, 313, 601, 659, 660, 698, 786, 831, 873, 882, 899, 905, 1168, 1267, 1280, 1307, 1308, 1310], "id_char": 1310, "id_var": [229, 280, 313, 839, 865, 899], "ideal": 125, "ident": [123, 177, 178, 313, 432, 600, 601, 786, 805, 806, 899, 973, 975, 1024, 1167, 1168, 1280], "identifi": [123, 131, 229, 236, 278, 280, 291, 313, 839, 863, 865, 899], "idiograph": 905, "idiomat": [782, 810, 816, 849, 868, 882, 899], "idx": [143, 204, 217, 290, 313, 349, 362, 535, 825, 873, 899, 947, 1128, 1211], "idx_lit": 1211, "idx_rx": 1211, "ieee": [696, 786], "if_set": [5, 30], "if_table_exist": [34, 313], "ifnul": 1300, "ignor": [35, 131, 158, 159, 163, 227, 263, 282, 313, 325, 327, 350, 400, 429, 451, 453, 454, 505, 514, 574, 575, 638, 652, 704, 706, 717, 786, 866, 899, 905, 912, 913, 935, 988, 1021, 1046, 1048, 1049, 1098, 1107, 1145, 1146, 1199, 1213, 1280], "ignore_error": [129, 130, 139, 143, 147], "ignore_nul": [227, 263, 313, 325, 327, 350, 451, 453, 454, 514, 638, 652, 704, 706, 717, 786, 912, 913, 935, 1046, 1048, 1049, 1107, 1199, 1213, 1280], "ignore_spac": 905, "ijkl": 1302, "ilmsuxu": [639, 646, 647, 650, 659, 660, 1200, 1207, 1208, 1211, 1220, 1221], "imbal": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "imdb_scor": 1289, "immedi": [592, 709, 713, 727, 728, 730, 731, 742, 743, 758, 761, 768, 773, 774, 777, 786, 1159, 1280, 1290], "immut": [271, 313, 1261, 1280], "impact": [204, 313, 825, 899, 1289, 1307], "impl": 145, "implement": [41, 117, 131, 172, 205, 223, 299, 313, 316, 317, 474, 544, 565, 566, 568, 570, 572, 573, 684, 748, 786, 882, 1066, 1136, 1182, 1184, 1280, 1285], "implic": [399, 786, 813, 899], "implicit": [282, 313, 866, 899], "implicitli": [195, 313, 461, 776, 786, 821, 899, 1307], "implod": [786, 1280, 1298], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 176, 183, 184, 185, 187, 202, 204, 217, 219, 236, 238, 253, 260, 268, 270, 275, 280, 281, 283, 313, 316, 317, 370, 398, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 461, 550, 556, 582, 603, 605, 607, 609, 611, 613, 616, 618, 620, 714, 726, 727, 728, 729, 730, 731, 732, 765, 773, 774, 782, 786, 798, 804, 808, 812, 813, 814, 815, 825, 830, 835, 852, 865, 899, 954, 976, 978, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1047, 1075, 1078, 1080, 1081, 1169, 1192, 1253, 1280, 1285, 1290, 1304, 1307, 1310], "improv": [34, 45, 135, 146, 313, 543, 786, 899], "in_plac": [208, 257, 285, 313, 1160, 1189, 1196, 1280], "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 159, 160, 179, 183, 190, 195, 220, 236, 238, 248, 259, 275, 277, 281, 282, 313, 397, 431, 461, 465, 476, 481, 550, 589, 604, 606, 608, 610, 612, 614, 615, 617, 619, 664, 665, 668, 669, 714, 722, 762, 763, 786, 812, 821, 831, 857, 866, 899, 905, 986, 987, 1023, 1045, 1056, 1068, 1072, 1157, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1225, 1226, 1229, 1280, 1307], "include_bom": [33, 42, 313, 899], "include_boundari": [204, 313, 825, 899], "include_break": [397, 589, 786, 986, 1157, 1280], "include_breakpoint": [476, 786, 1068, 1280], "include_categor": 905, "include_categori": [476, 786, 1068, 1280], "include_col": 159, "include_file_path": [139, 141, 143, 146, 147, 148], "include_head": [33, 36, 42, 130, 277, 313, 899], "include_index": 121, "include_init": 722, "include_kei": [236, 248, 313], "include_nul": [282, 313, 866, 899], "inclus": [173, 204, 245, 313, 481, 602, 605, 607, 609, 611, 613, 616, 618, 620, 664, 665, 709, 727, 728, 730, 731, 742, 743, 773, 774, 786, 825, 848, 899, 1072, 1225, 1226, 1280], "incom": 131, "incompat": 110, "incomplet": [597, 786, 1164, 1280], "incorpor": 1307, "incorrect": [254, 313, 446, 543, 544, 625, 786, 853, 882, 899, 1038, 1185, 1280], "incorrectli": [129, 535], "increas": [36, 47, 129, 134, 140, 141, 148, 313, 396, 601, 786, 985, 1168, 1280], "independ": [53, 54, 156, 159, 163, 275, 313, 628, 786, 807, 808, 817, 844, 855, 899], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 151, 172, 198, 200, 204, 209, 214, 216, 238, 243, 245, 246, 247, 256, 258, 270, 271, 273, 280, 282, 283, 289, 290, 313, 323, 336, 337, 338, 340, 343, 344, 349, 357, 362, 452, 468, 469, 471, 500, 501, 510, 511, 512, 528, 529, 535, 602, 605, 607, 609, 611, 613, 616, 618, 620, 624, 626, 633, 639, 646, 650, 651, 663, 674, 684, 712, 742, 745, 786, 823, 825, 848, 854, 856, 865, 866, 872, 873, 899, 905, 921, 922, 923, 924, 925, 928, 929, 934, 942, 947, 1047, 1059, 1060, 1086, 1093, 1094, 1103, 1104, 1105, 1121, 1122, 1128, 1149, 1182, 1183, 1187, 1195, 1207, 1211, 1212, 1224, 1235, 1280, 1285, 1298, 1302], "index_column": [204, 245, 313, 602, 786, 825, 848, 899], "indexord": [270, 271, 313], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 156, 157, 163, 204, 245, 248, 254, 256, 268, 313, 339, 357, 468, 476, 482, 483, 484, 486, 487, 488, 489, 490, 491, 510, 528, 548, 549, 550, 551, 552, 602, 605, 607, 609, 611, 613, 616, 618, 620, 624, 626, 712, 713, 757, 786, 825, 848, 853, 854, 899, 903, 905, 942, 1059, 1068, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1103, 1121, 1182, 1183, 1187, 1256, 1280, 1310], "indistinguish": [33, 42, 313, 899], "individu": [36, 45, 168, 245, 270, 271, 275, 313, 544, 647, 786, 807, 848, 899, 905, 972, 1208, 1280], "inequ": [576, 786], "inexact": [152, 153, 154, 155], "inf": [156, 159, 163, 335, 397, 476, 483, 486, 589, 696, 786, 920, 978, 986, 1075, 1078, 1134, 1152, 1157, 1268, 1280, 1304], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 146, 147, 148, 223, 313, 543, 544, 598, 653, 673, 675, 676, 677, 680, 732, 746, 761, 786, 899, 1136, 1165, 1214, 1234, 1236, 1237, 1238, 1241, 1280], "infer_schema": [129, 143], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 313, 653, 899, 1214], "inference_length": [677, 1238], "inference_s": [223, 313], "infin": [681, 696, 786, 1242], "infinit": [486, 696, 786, 1078, 1280], "influenc": [134, 835, 899], "influxdb": 131, "info": [133, 144, 145, 151], "inform": [19, 23, 34, 52, 133, 139, 141, 143, 144, 145, 146, 147, 148, 152, 154, 170, 181, 183, 313, 317, 493, 544, 632, 639, 646, 647, 650, 659, 660, 786, 807, 812, 844, 899, 903, 907, 968, 1087, 1194, 1200, 1207, 1208, 1211, 1220, 1221, 1280], "inherit": [246, 313, 399, 786, 813, 899], "init": [168, 1289], "initcap": 1300, "initi": [36, 76, 168, 313, 722, 736, 776, 1307], "initialis": [131, 168, 899], "inject": [36, 47, 313], "inlin": [18, 248, 313, 639, 646, 647, 650, 659, 660, 1200, 1207, 1208, 1211, 1220, 1221, 1298], "inner": [56, 72, 158, 218, 220, 282, 313, 350, 361, 401, 514, 534, 544, 595, 693, 765, 786, 829, 831, 866, 899, 935, 946, 989, 1107, 1127, 1136, 1263, 1280, 1296, 1307], "inner_dtyp": [158, 161], "innermost": [158, 161], "innter": 934, "inprocessqueri": [807, 899], "input": [0, 47, 53, 91, 119, 121, 129, 130, 175, 185, 203, 220, 223, 227, 236, 238, 242, 251, 252, 256, 259, 263, 276, 287, 288, 292, 313, 322, 381, 386, 452, 455, 467, 481, 539, 543, 544, 554, 582, 596, 597, 629, 635, 651, 661, 663, 669, 670, 671, 672, 674, 676, 687, 695, 703, 705, 707, 709, 712, 715, 716, 717, 725, 732, 734, 742, 743, 746, 747, 748, 750, 752, 755, 764, 768, 770, 776, 782, 786, 798, 802, 814, 824, 831, 846, 850, 851, 854, 857, 862, 869, 870, 875, 899, 903, 974, 1047, 1072, 1132, 1133, 1136, 1155, 1163, 1164, 1187, 1191, 1212, 1224, 1235, 1237, 1280, 1301, 1302, 1304], "input_wildcard_expans": [786, 903], "insensit": [640, 647, 649, 659, 660, 661, 905, 1200, 1201, 1208, 1210, 1211, 1220, 1221, 1222], "insensitive_match": [639, 650], "insert": [34, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 209, 277, 279, 313, 624, 638, 652, 683, 786, 864, 899, 1183, 1199, 1213, 1244, 1280], "insert_aft": [36, 313], "insert_befor": [36, 313], "insert_chart": [36, 313], "insert_column": 313, "insid": [54, 543, 786, 808, 899], "inspect": [786, 899], "instal": [95, 121, 129, 130, 132, 135, 137, 181, 272, 313, 404, 714, 855, 899, 992, 1262, 1280], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 159, 163, 168, 176, 192, 197, 313, 554, 722, 736, 782, 804, 835, 872, 873, 899, 1052, 1280], "instanti": [34, 36, 131, 161, 251, 269, 270, 287, 313, 850, 869, 899, 904, 1258, 1259, 1280], "instantli": [54, 808, 899], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 148, 149, 156, 157, 158, 159, 163, 174, 175, 202, 215, 216, 219, 223, 229, 234, 236, 246, 247, 248, 251, 252, 253, 256, 270, 271, 272, 276, 288, 289, 313, 316, 317, 338, 357, 381, 382, 397, 411, 452, 455, 465, 528, 556, 589, 596, 626, 638, 645, 655, 656, 659, 660, 668, 669, 670, 671, 672, 683, 695, 702, 709, 711, 713, 719, 727, 728, 730, 731, 732, 742, 743, 758, 761, 765, 768, 773, 774, 777, 786, 801, 802, 808, 817, 830, 839, 850, 851, 852, 854, 862, 870, 871, 872, 874, 899, 905, 923, 942, 951, 965, 986, 999, 1007, 1008, 1047, 1065, 1121, 1157, 1163, 1182, 1184, 1187, 1196, 1199, 1206, 1216, 1217, 1220, 1221, 1229, 1230, 1231, 1244, 1261, 1262, 1280, 1285, 1289, 1290, 1294, 1307, 1308], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 177, 183, 190, 193, 194, 198, 200, 202, 205, 206, 207, 209, 214, 216, 217, 219, 222, 223, 233, 234, 243, 245, 246, 249, 255, 256, 258, 261, 264, 269, 273, 276, 281, 284, 286, 289, 290, 296, 307, 313, 322, 345, 349, 357, 359, 362, 364, 365, 380, 381, 396, 400, 404, 451, 453, 454, 458, 459, 460, 466, 468, 469, 471, 474, 475, 476, 497, 503, 505, 510, 511, 512, 513, 523, 528, 529, 531, 533, 534, 535, 537, 581, 583, 586, 587, 589, 592, 595, 598, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 628, 633, 637, 646, 651, 653, 657, 658, 659, 663, 665, 666, 674, 677, 678, 683, 690, 694, 695, 701, 703, 709, 718, 720, 726, 729, 732, 738, 740, 742, 743, 757, 758, 761, 762, 763, 767, 768, 771, 772, 775, 777, 786, 802, 805, 812, 819, 820, 823, 826, 830, 834, 844, 854, 856, 859, 861, 862, 867, 868, 872, 873, 874, 879, 890, 899, 904, 905, 921, 922, 930, 934, 942, 944, 947, 949, 964, 965, 972, 973, 979, 985, 988, 989, 992, 1045, 1046, 1048, 1049, 1053, 1054, 1055, 1059, 1060, 1066, 1067, 1068, 1086, 1089, 1090, 1096, 1098, 1103, 1104, 1105, 1106, 1116, 1121, 1122, 1124, 1126, 1127, 1128, 1130, 1142, 1143, 1145, 1146, 1149, 1151, 1152, 1155, 1156, 1157, 1159, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1186, 1187, 1190, 1195, 1198, 1207, 1212, 1214, 1218, 1219, 1220, 1224, 1226, 1227, 1235, 1238, 1239, 1244, 1251, 1252, 1258, 1265, 1270, 1280, 1292, 1295, 1307, 1310], "int16": [1, 50, 275, 313, 394, 395, 427, 689, 786, 905, 983, 984, 1019, 1251, 1258, 1280], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 204, 217, 245, 270, 313, 348, 349, 351, 382, 407, 417, 418, 419, 420, 425, 447, 452, 602, 693, 761, 786, 825, 848, 899, 905, 930, 933, 934, 936, 995, 1005, 1009, 1010, 1011, 1017, 1039, 1047, 1134, 1263, 1264, 1280], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 179, 188, 197, 204, 237, 245, 250, 251, 265, 272, 313, 343, 344, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 394, 395, 436, 437, 438, 439, 440, 441, 442, 446, 452, 455, 543, 544, 567, 569, 571, 586, 594, 602, 653, 678, 689, 693, 709, 734, 742, 743, 746, 761, 768, 782, 786, 809, 816, 825, 843, 848, 849, 850, 899, 905, 928, 929, 931, 932, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 949, 983, 984, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1040, 1047, 1136, 1161, 1239, 1251, 1261, 1262, 1263, 1264, 1280], "int64arrai": [1255, 1280], "int8": [1, 50, 76, 197, 313, 361, 362, 394, 395, 412, 415, 421, 422, 428, 431, 444, 445, 534, 689, 758, 761, 777, 786, 904, 946, 947, 983, 984, 988, 1000, 1003, 1013, 1014, 1020, 1023, 1036, 1037, 1127, 1166, 1251, 1261, 1268, 1280], "int_rang": [204, 281, 290, 299, 313, 709, 745, 825, 835, 873, 882, 899], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 187, 204, 245, 268, 271, 313, 326, 385, 431, 464, 465, 581, 587, 589, 594, 601, 602, 614, 651, 674, 678, 703, 709, 738, 742, 743, 761, 786, 815, 825, 848, 899, 905, 971, 1023, 1058, 1155, 1157, 1161, 1168, 1175, 1182, 1212, 1235, 1239, 1261, 1280, 1301, 1307, 1310], "integer_list": 72, "integr": [36, 275, 313, 1310], "intend": [1, 152, 153, 154, 155, 683, 1244], "intens": [223, 299, 313, 582, 786, 1136, 1280], "interact": [159, 163, 183, 313, 316, 812, 899, 1280, 1285], "interchang": [117, 172], "interest": [130, 432, 435, 1024, 1027], "interfac": [0, 106, 107, 171, 798, 908, 1307], "interleav": 1302, "intermedi": [210, 313, 828, 899, 1310], "intern": [37, 38, 131, 150, 216, 265, 313, 465, 786, 1255, 1280, 1290], "interoper": [170, 907], "interpol": [183, 240, 305, 313, 460, 480, 547, 590, 612, 613, 759, 786, 812, 845, 888, 899, 987, 1071, 1158, 1174, 1280], "interpolate_bi": [786, 1280], "interpolationmethod": [479, 786, 1070, 1280], "interpret": [120, 122, 129, 130, 143, 313, 899], "intersect": [36, 313, 525, 905, 1118, 1306], "interv": [204, 245, 283, 313, 397, 430, 443, 476, 481, 589, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 848, 899, 986, 1000, 1002, 1003, 1009, 1011, 1013, 1014, 1017, 1019, 1020, 1022, 1026, 1035, 1036, 1068, 1072, 1157, 1280], "intoexpr": [175, 203, 204, 245, 251, 252, 256, 259, 276, 287, 288, 292, 313, 328, 346, 366, 369, 371, 381, 404, 452, 458, 468, 476, 480, 481, 504, 524, 525, 526, 527, 582, 596, 597, 605, 607, 609, 611, 613, 616, 618, 620, 624, 626, 635, 640, 649, 661, 664, 665, 666, 671, 672, 687, 695, 705, 707, 712, 715, 716, 717, 718, 720, 722, 725, 729, 736, 750, 752, 755, 761, 764, 768, 770, 786, 802, 824, 825, 848, 850, 851, 854, 857, 862, 869, 870, 875, 899, 903, 931, 950, 953, 955, 992, 1047, 1053, 1071, 1072, 1097, 1163, 1164, 1183, 1187, 1225, 1226, 1227, 1232, 1233, 1280], "intoexprcolumn": [195, 209, 313, 345, 349, 350, 357, 380, 381, 386, 430, 458, 461, 503, 511, 514, 523, 528, 583, 587, 623, 626, 646, 651, 654, 663, 668, 669, 670, 674, 678, 683, 694, 695, 709, 714, 727, 728, 730, 731, 742, 743, 773, 774, 776, 786, 821, 854, 899, 930, 934, 935, 942, 974, 1022, 1035, 1053, 1096, 1104, 1107, 1116, 1121, 1152, 1207, 1212, 1215, 1224, 1229, 1230, 1231, 1235, 1244, 1280], "introduc": [46, 85, 673, 675, 676, 1234, 1236, 1237], "introduct": 1306, "intuit": [465, 786, 905], "invalid": [33, 42, 107, 129, 130, 143, 313, 382, 653, 654, 678, 696, 786, 899, 951, 965, 1214, 1215, 1239, 1280], "invalid_valu": 951, "invalidoperationerror": [597, 786, 1164, 1280, 1305], "invari": [835, 899], "invers": [330, 331, 332, 333, 334, 335, 786, 915, 916, 917, 918, 919, 920, 1261, 1280, 1304], "invert": 905, "invok": [543, 786], "involv": [195, 313, 821, 899], "io": [31, 33, 36, 37, 38, 41, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 184, 253, 313, 399, 467, 556, 786, 813, 852, 899], "iobas": [39, 40, 138, 139, 184, 253, 313, 399, 556, 559, 786, 813, 852, 899], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 313, 798, 899], "ipccompress": [37, 38, 313], "is_between": [786, 1280], "is_dupl": [313, 786, 1280], "is_elementwis": [543, 786, 903], "is_empti": [313, 1280], "is_finit": [786, 1280], "is_first_distinct": [786, 1280], "is_in": [93, 195, 313, 786, 1280], "is_infinit": [786, 1280], "is_last_distinct": [786, 1280], "is_nan": [786, 1280], "is_not_nan": [786, 1280], "is_not_nul": [786, 1280], "is_nul": [187, 313, 786, 815, 899, 1280], "is_numer": 1310, "is_odd": [251, 313, 850, 899, 905], "is_selector": 905, "is_sort": 1280, "is_uniqu": [313, 786, 1280], "isn": 776, "iso": [417, 444, 445, 1005, 1036, 1037, 1302], "iso8601": [129, 130, 143], "iso_lang": 1302, "iso_year": 447, "isodow": 1303, "isoweek": 1303, "isoyear": 1303, "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 143, 313, 394, 395, 689, 786, 983, 984, 1251, 1280, 1307], "ital": [36, 313], "item": [13, 55, 130, 202, 246, 249, 313, 345, 349, 350, 400, 457, 503, 505, 512, 514, 523, 623, 666, 786, 930, 934, 935, 988, 1051, 1096, 1098, 1105, 1107, 1116, 1181, 1227, 1280], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 175, 185, 195, 203, 204, 215, 216, 217, 220, 245, 246, 247, 248, 251, 252, 259, 276, 277, 287, 288, 291, 292, 313, 381, 396, 404, 461, 582, 635, 687, 695, 705, 707, 712, 714, 715, 716, 717, 725, 750, 752, 755, 764, 768, 770, 776, 782, 786, 802, 814, 821, 824, 825, 831, 848, 850, 851, 857, 862, 869, 870, 875, 899, 903, 904, 985, 992, 1182, 1280, 1310], "iter_batch": 131, "iter_column": 313, "iter_row": [217, 246, 247, 248, 313], "iter_slic": 313, "its": [123, 151, 190, 271, 313, 408, 430, 443, 452, 543, 600, 635, 776, 786, 810, 816, 868, 899, 968, 996, 1022, 1035, 1045, 1047, 1167, 1261, 1280, 1309], "itself": [157, 313, 316, 317, 544, 604, 606, 608, 610, 612, 614, 615, 617, 619, 762, 763, 786, 833, 899, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1280, 1285, 1289, 1290, 1307], "ix": [238, 313], "j": [277, 313], "jax": [270, 313, 1259, 1280], "jax_enable_x64": [270, 313], "jaxexporttyp": [270, 313], "jjk": 905, "jkl": [647, 1208], "jklmn": 1302, "job": [803, 899], "join": [42, 43, 44, 45, 46, 47, 53, 54, 55, 85, 195, 219, 220, 282, 313, 461, 479, 582, 638, 765, 786, 807, 808, 817, 821, 830, 831, 844, 855, 866, 871, 899, 1199, 1290, 1292, 1298, 1306, 1307], "join_asof": [218, 313, 829, 899], "join_nul": [218, 313, 829, 899], "join_wher": [313, 899], "joinstrategi": [47, 218, 313, 829, 899], "joinvalid": [218, 313, 829, 899], "jpy": 1310, "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 184, 253, 313, 399, 467, 556, 559, 653, 654, 685, 786, 798, 813, 852, 899, 903, 1214, 1215, 1247], "json_path": [654, 1215], "json_path_match": [653, 1214], "json_stat": 5, "json_str": [138, 139], "json_val": [654, 1215], "jsonpath": [653, 654, 1214, 1215], "jst": [123, 905], "jul": [673, 1234, 1302], "juli": [1302, 1303], "just": [36, 121, 131, 143, 229, 280, 313, 839, 865, 899, 905], "k": [175, 248, 276, 277, 313, 380, 381, 391, 493, 694, 695, 786, 802, 862, 899, 964, 980, 1087, 1265, 1280], "k_2": [632, 786, 1194, 1280], "k_3": [632, 786, 1194, 1280], "kanji": 905, "karen": [238, 313], "kathmandu": [998, 999, 1025], "kb": [190, 313, 370, 954, 1045, 1280], "kde": [1280, 1285], "keep": [47, 129, 130, 139, 143, 146, 147, 195, 278, 282, 283, 313, 467, 543, 558, 566, 596, 715, 786, 821, 863, 866, 899, 1163, 1280], "kei": [36, 41, 45, 47, 52, 55, 139, 141, 143, 145, 146, 147, 148, 173, 204, 216, 218, 219, 230, 236, 238, 242, 244, 247, 248, 282, 313, 461, 544, 596, 597, 661, 727, 730, 768, 786, 825, 829, 830, 840, 846, 847, 866, 899, 905, 909, 1163, 1164, 1222, 1280, 1296], "kept": [278, 313, 863, 899], "keyerror": 16, "keystrok": 782, "keyword": [35, 133, 141, 144, 159, 163, 181, 203, 237, 246, 251, 252, 272, 287, 288, 292, 313, 461, 586, 687, 764, 768, 776, 786, 824, 843, 850, 851, 869, 870, 875, 899, 1262, 1280, 1293], "kleen": [325, 327, 704, 705, 706, 707, 786, 912, 913, 1280], "klmnoopqrstuvwxyz": [217, 313], "knight": 1289, "know": [47, 131, 238, 280, 313, 535, 543, 786, 865, 899], "known": [135, 362, 535, 882, 947, 1128], "kurtosi": [786, 1280], "kuzu_db_conn": 131, "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 181, 195, 237, 272, 313, 316, 586, 786, 821, 843, 874, 899, 903, 1262, 1280, 1285, 1293, 1307], "k\u00f9zudb": 131, "l1": 55, "l2": 55, "label": [204, 270, 275, 313, 317, 397, 589, 603, 604, 606, 608, 610, 612, 615, 617, 619, 786, 825, 844, 899, 986, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1280], "label_column": [275, 313], "lag": [256, 313, 357, 528, 626, 716, 786, 854, 899, 942, 1121, 1187, 1280], "lake": [35, 133, 144, 313, 798], "lambda": [143, 197, 223, 237, 238, 242, 299, 313, 362, 453, 454, 535, 543, 544, 566, 567, 722, 723, 736, 747, 748, 760, 786, 835, 843, 846, 882, 899, 947, 1048, 1049, 1128, 1136, 1280], "land": [404, 992], "languag": [143, 204, 219, 245, 283, 313, 426, 430, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035, 1047, 1280], "larg": [10, 11, 14, 47, 131, 134, 140, 148], "large_str": [217, 265, 272, 313], "larger": [10, 42, 43, 44, 45, 53, 54, 465, 718, 786, 807, 808, 899], "largest": [175, 276, 313, 381, 694, 695, 786, 802, 862, 899, 1265, 1280], "last": [35, 139, 143, 146, 147, 152, 153, 154, 155, 206, 219, 222, 238, 248, 259, 264, 271, 278, 307, 313, 338, 349, 358, 396, 412, 423, 427, 444, 487, 512, 530, 533, 535, 565, 566, 568, 570, 572, 573, 597, 634, 635, 651, 666, 674, 690, 712, 771, 782, 786, 830, 857, 861, 863, 890, 899, 905, 923, 934, 943, 985, 1000, 1015, 1019, 1036, 1067, 1079, 1090, 1105, 1123, 1126, 1164, 1196, 1212, 1227, 1235, 1252, 1261, 1280, 1300, 1302], "last_column": [36, 313], "later": [219, 253, 313, 556, 830, 852, 899], "latest": [117, 133, 144, 172, 429, 466, 554, 673, 676, 729, 786, 1021, 1234, 1237], "latt": 905, "latter": [36, 192, 313, 1052, 1280], "lazi": [1, 55, 143, 159, 219, 237, 238, 260, 313, 544, 738, 758, 761, 777, 786, 812, 829, 830, 871, 875, 876, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 899, 905, 1289, 1290, 1291, 1292, 1293, 1295, 1307, 1310], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 808, 899], "lazy_fram": [53, 54], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 179, 184, 221, 237, 238, 253, 260, 313, 399, 461, 535, 556, 765, 786, 798, 896, 897, 898, 905, 1289, 1290, 1293, 1295, 1307, 1308, 1310], "lazygroupbi": [824, 825, 848, 899], "lbl": [270, 275, 313], "ldf": [1, 875, 876, 878, 880, 883, 884, 885, 886, 887, 888, 889], "ldot": [452, 786, 1047, 1280], "le": [644, 786, 1280], "lead": [14, 41, 123, 149, 227, 254, 256, 263, 313, 357, 468, 471, 528, 543, 544, 625, 626, 668, 670, 718, 786, 835, 853, 854, 882, 899, 942, 1121, 1136, 1185, 1187, 1229, 1231, 1280], "leap": [416, 426, 1004, 1018], "leap_year": 416, "learn": [275, 313], "least": [97, 238, 313, 377, 378, 583, 646, 648, 786, 961, 962, 1152, 1207, 1209, 1280, 1300], "leav": [6, 229, 280, 313, 535, 839, 865, 899], "left": [15, 16, 36, 47, 152, 153, 154, 155, 204, 218, 219, 245, 282, 313, 397, 451, 452, 453, 454, 479, 481, 589, 602, 605, 607, 609, 611, 613, 616, 618, 620, 624, 693, 715, 722, 723, 727, 728, 730, 731, 736, 760, 773, 774, 776, 786, 825, 829, 830, 848, 866, 899, 986, 1046, 1047, 1048, 1049, 1072, 1157, 1183, 1263, 1280, 1292, 1296, 1300], "left_clos": [397, 589, 786, 986, 1157, 1280], "left_on": [218, 219, 282, 313, 829, 830, 866, 899], "leftmost": [624, 786, 1183, 1280, 1302], "len": [12, 36, 159, 163, 179, 217, 238, 290, 294, 299, 313, 390, 544, 553, 555, 600, 719, 742, 786, 809, 868, 873, 877, 882, 899, 904, 979, 1167, 1280], "len_byt": [12, 656, 1217], "len_char": [655, 1216], "length": [55, 56, 72, 134, 140, 143, 157, 161, 202, 204, 245, 258, 313, 316, 396, 430, 443, 529, 535, 554, 596, 597, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 633, 651, 655, 656, 657, 658, 661, 663, 674, 683, 758, 761, 762, 763, 777, 786, 825, 844, 848, 856, 899, 903, 972, 985, 996, 1022, 1035, 1122, 1128, 1149, 1163, 1164, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1195, 1212, 1216, 1217, 1218, 1219, 1222, 1224, 1235, 1244, 1280, 1298, 1300], "leq": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "less": [143, 219, 313, 465, 495, 542, 543, 666, 786, 830, 899, 1227, 1310], "letter": [191, 296, 307, 313, 455, 640, 647, 649, 661, 681, 734, 786, 818, 879, 890, 899, 905, 1201, 1208, 1210, 1222, 1242, 1302], "level": [10, 36, 37, 38, 41, 45, 126, 143, 146, 147, 148, 197, 223, 234, 260, 265, 313, 317, 461, 786, 798, 858, 899, 1255, 1280, 1307], "lexic": [59, 905, 969], "lf": [42, 43, 44, 45, 50, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 852, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 877, 881, 899, 1297, 1307, 1310], "lf1": [765, 858, 899, 1293, 1295, 1308], "lf2": [765, 858, 899, 1293, 1295, 1308], "lf3": [899, 1293], "lf4": [899, 1293], "lf5": 899, "lf6": 899, "lf_other": [871, 899], "lib": [786, 1255, 1280], "librari": [1, 99, 131, 134, 543, 786, 903, 1310], "life": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "lifetim": [168, 797, 1295], "light": [36, 313], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 184, 204, 211, 213, 218, 248, 253, 270, 271, 313, 316, 399, 405, 467, 507, 543, 558, 592, 646, 669, 670, 700, 782, 786, 803, 808, 813, 825, 899, 903, 993, 1100, 1159, 1207, 1269, 1280, 1285], "limit": [10, 11, 45, 131, 132, 165, 194, 313, 365, 460, 466, 786, 820, 899, 1055, 1280, 1298, 1306], "line": [10, 20, 36, 129, 130, 134, 143, 202, 211, 213, 313, 316, 646, 1207, 1280, 1285], "line_termin": [33, 42, 313, 899], "linear": [183, 210, 240, 305, 313, 479, 480, 502, 547, 590, 612, 613, 716, 717, 759, 786, 812, 828, 845, 888, 899, 987, 1070, 1071, 1095, 1158, 1174, 1280], "lineitem": [125, 130, 132], "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 180, 185, 188, 190, 191, 195, 201, 203, 204, 208, 216, 233, 236, 245, 246, 247, 248, 251, 259, 266, 267, 275, 277, 278, 279, 281, 287, 292, 293, 313, 323, 350, 361, 362, 363, 397, 404, 457, 463, 468, 477, 485, 543, 544, 554, 555, 582, 589, 595, 598, 603, 604, 606, 608, 610, 612, 615, 617, 619, 634, 635, 645, 647, 649, 664, 684, 686, 693, 712, 714, 716, 727, 728, 730, 731, 733, 741, 743, 746, 748, 766, 768, 774, 782, 786, 810, 816, 818, 821, 824, 825, 850, 857, 863, 864, 869, 871, 875, 876, 899, 904, 905, 935, 946, 947, 948, 972, 986, 992, 1045, 1051, 1056, 1059, 1062, 1068, 1069, 1077, 1136, 1157, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1201, 1206, 1208, 1210, 1222, 1225, 1260, 1263, 1280, 1289, 1294, 1298, 1299, 1309, 1310], "list_of_seri": 748, "lit": [1, 324, 366, 481, 565, 650, 716, 722, 736, 758, 761, 777, 786, 1055, 1280], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 251, 252, 256, 282, 287, 288, 313, 324, 366, 386, 408, 449, 450, 458, 465, 470, 472, 481, 495, 542, 561, 563, 576, 577, 587, 596, 597, 639, 640, 641, 649, 650, 659, 660, 661, 687, 688, 696, 705, 707, 709, 715, 716, 717, 725, 726, 729, 742, 746, 750, 752, 755, 764, 768, 770, 772, 786, 820, 850, 851, 854, 866, 869, 870, 899, 905, 950, 974, 996, 1043, 1053, 1072, 1148, 1163, 1164, 1182, 1184, 1187, 1200, 1201, 1202, 1210, 1211, 1220, 1221, 1222, 1280, 1302], "littl": [247, 313], "lmn": 905, "ln": [451, 452, 453, 454, 786, 1046, 1047, 1048, 1049, 1280, 1300], "ln_a": 1301, "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 313, 786, 798, 899, 903, 1310], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 134, "load_workbook": 134, "loader": [275, 313], "lobster": [650, 1211], "loc": [313, 317], "local": [4, 35, 131, 133, 144, 145, 148, 313, 443, 584, 585, 786, 967, 968, 998, 999, 1022, 1025, 1035, 1153, 1154, 1280, 1290], "localhost": 131, "localis": [430, 443, 1035], "locat": [36, 141, 143, 146, 148, 192, 243, 273, 279, 313, 624, 786, 864, 899, 1052, 1059, 1182, 1183, 1280], "lock": 165, "log": [29, 49, 381, 448, 540, 563, 587, 695, 786, 1041, 1280, 1300], "log10": [786, 1280, 1300], "log10_a": 1301, "log16_a": 1301, "log1p": [786, 1280, 1300], "log1p_a": 1301, "log2": 1300, "logarithm": [538, 539, 540, 786, 1131, 1132, 1133, 1280, 1301], "logic": [55, 223, 299, 313, 316, 317, 325, 327, 399, 544, 693, 704, 705, 706, 707, 748, 786, 813, 817, 829, 852, 882, 899, 912, 913, 1136, 1261, 1263, 1280, 1285], "london": [409, 413, 429, 997, 1001, 1021], "london_timezon": [429, 1021], "london_to_amsterdam": [429, 1021], "long": [191, 229, 238, 280, 281, 313, 818, 839, 865, 899], "longer": [129, 130, 143], "longest": 535, "look": [10, 204, 313, 366, 535, 825, 899, 950], "lookup": 782, "loop": [544, 786], "lose": [406, 994], "lossi": [129, 130, 143], "love": [640, 661, 1201, 1222], "low": [17, 131, 589, 786, 1157, 1280], "low_memori": [129, 130, 139, 141, 143, 147, 148], "lower": [143, 183, 204, 240, 305, 313, 386, 481, 541, 566, 590, 594, 612, 613, 709, 727, 728, 730, 731, 759, 773, 774, 786, 812, 825, 845, 888, 899, 974, 987, 1072, 1134, 1158, 1161, 1174, 1268, 1280, 1298, 1300], "lower_bound": [204, 313, 386, 481, 786, 825, 899, 974, 1072, 1268, 1280], "lowercas": [572, 679, 681, 1240, 1242, 1302], "lowest": [541, 786], "lru_cach": [223, 313, 544, 786, 1136, 1280], "lst": 158, "lt": [461, 702, 786, 1280], "ltrim": 1300, "lyric": [640, 661, 1201, 1222], "lz4": [37, 38, 41, 43, 45, 313, 899], "lzo": [41, 45, 313, 899], "m": [62, 64, 218, 313, 405, 406, 408, 413, 414, 432, 434, 435, 446, 646, 673, 675, 676, 680, 729, 730, 731, 732, 738, 829, 899, 904, 905, 993, 994, 996, 1001, 1002, 1024, 1026, 1027, 1038, 1207, 1234, 1236, 1237, 1241, 1293, 1302, 1303], "m_2": [632, 786, 1194, 1280], "m_3": [632, 786, 1194, 1280], "m_i": [632, 786, 1194, 1280], "machin": 1310, "maco": 151, "made": [36, 131, 313], "mai": [1, 35, 41, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 183, 184, 190, 192, 204, 219, 220, 223, 245, 253, 260, 270, 272, 275, 281, 282, 283, 313, 316, 317, 396, 397, 399, 404, 405, 406, 417, 426, 430, 432, 435, 443, 455, 476, 510, 535, 543, 544, 553, 556, 589, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 649, 653, 655, 714, 722, 723, 727, 728, 730, 731, 736, 760, 762, 763, 773, 774, 786, 807, 808, 812, 813, 817, 825, 830, 831, 835, 848, 852, 858, 866, 872, 873, 882, 899, 968, 969, 985, 986, 987, 992, 993, 994, 1005, 1018, 1022, 1024, 1027, 1035, 1045, 1052, 1068, 1103, 1136, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1210, 1214, 1216, 1259, 1262, 1264, 1280, 1285, 1310], "main": [151, 808, 899], "maintain": [42, 43, 44, 45, 259, 313, 363, 536, 624, 635, 697, 712, 786, 812, 857, 899, 948, 1129, 1183, 1266, 1280], "maintain_ord": [42, 43, 44, 45, 203, 236, 238, 259, 278, 283, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 323, 363, 381, 468, 471, 536, 544, 635, 695, 697, 712, 786, 808, 817, 824, 844, 855, 857, 863, 876, 878, 880, 883, 884, 885, 886, 887, 888, 889, 899, 948, 1129, 1266, 1280], "major": [134, 270, 313], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 230, 234, 241, 271, 283, 313, 453, 454, 476, 572, 573, 582, 595, 665, 786, 840, 899, 903, 1048, 1049, 1068, 1226, 1261, 1280], "man": [662, 1223], "manag": [46, 84, 85, 797, 798, 1295, 1307], "mandatori": [36, 313], "mango": [644, 667, 1205, 1228], "mani": [131, 132, 148, 192, 313, 649, 661, 1052, 1210, 1222, 1280, 1284], "manner": 131, "many_to_mani": [218, 313, 829, 899], "many_to_on": [218, 313, 829, 899], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 176, 179, 196, 216, 223, 242, 246, 247, 248, 250, 266, 313, 324, 430, 443, 543, 544, 565, 567, 568, 570, 572, 573, 596, 597, 661, 700, 747, 786, 804, 846, 849, 899, 904, 905, 987, 1022, 1035, 1136, 1163, 1164, 1222, 1269, 1280, 1290, 1292, 1293, 1307], "map_": 103, "map_batch": [786, 899], "map_el": [94, 223, 313, 543, 703, 786, 1280], "map_field": [569, 571], "map_row": 313, "mapelementsstrategi": [544, 786], "mapping_strategi": [582, 786], "march": [432, 435, 1024, 1027], "mariadb": 132, "mark": [126, 382, 786, 965, 1280], "mark_area": [1280, 1285], "mark_attr": [313, 316, 1280, 1285], "mark_bar": [313, 316, 1280, 1285], "mark_lin": [313, 316], "mark_point": [313, 316], "markdown": 20, "marker": [36, 313], "mask": [148, 211, 213, 313, 367, 482, 484, 487, 492, 584, 585, 639, 642, 650, 786, 951, 1056, 1072, 1073, 1076, 1079, 1085, 1153, 1154, 1184, 1200, 1203, 1211, 1271, 1280], "mass": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "massag": [229, 280, 313, 839, 865, 899], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 129, 131, 138, 139, 141, 147, 148, 152, 153, 154, 155, 176, 194, 218, 219, 246, 282, 313, 550, 551, 596, 597, 614, 639, 640, 641, 644, 646, 647, 649, 650, 653, 654, 659, 660, 661, 667, 673, 675, 676, 776, 782, 786, 804, 820, 829, 830, 866, 899, 905, 1044, 1163, 1164, 1175, 1200, 1201, 1202, 1205, 1207, 1208, 1210, 1211, 1214, 1215, 1220, 1221, 1222, 1228, 1234, 1236, 1237, 1280, 1302], "matches_overlap": 649, "matches_supertyp": [194, 313, 820, 899], "materi": [223, 248, 299, 313, 807, 844, 882, 892, 899, 905, 1136, 1280], "materialis": [216, 217, 246, 247, 313], "math": [1, 10, 51, 238, 313, 398, 786, 976, 978, 1192, 1253, 1280, 1300, 1304, 1306], "mathemat": [696, 733, 786, 1300], "mathshortcut": [1, 51], "matplotlib": [151, 844, 855, 899], "matter": [204, 216, 245, 247, 248, 267, 313, 602, 669, 670, 786, 825, 848, 899], "max": [25, 36, 41, 45, 126, 183, 194, 203, 225, 238, 245, 313, 317, 392, 460, 535, 543, 582, 592, 596, 597, 602, 604, 605, 625, 666, 727, 730, 750, 766, 786, 812, 820, 824, 848, 899, 981, 987, 1055, 1128, 1159, 1170, 1185, 1227, 1280, 1289, 1298, 1300], "max_a": [245, 313, 602, 786, 848, 899], "max_binary_s": 131, "max_col": [157, 159], "max_colname_length": [202, 313], "max_color": [36, 313], "max_data_s": 163, "max_elem": 1298, "max_horizont": [313, 749], "max_items_per_column": [202, 313], "max_level": 126, "max_siz": [158, 159, 161, 163, 1310], "max_text_s": 131, "max_valu": 1310, "max_width": [535, 1128], "maxim": [300, 336, 786, 883, 921, 1280], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 149, 157, 158, 159, 161, 163, 202, 204, 224, 225, 313, 343, 500, 545, 574, 584, 592, 651, 653, 656, 663, 674, 749, 750, 786, 825, 836, 899, 928, 1006, 1093, 1137, 1145, 1153, 1159, 1212, 1214, 1217, 1224, 1235, 1280, 1297], "mb": [190, 313, 370, 1045, 1280], "me": [640, 661, 681, 1201, 1222, 1242], "mean": [41, 45, 129, 130, 135, 141, 143, 146, 183, 194, 203, 204, 219, 227, 238, 245, 283, 292, 313, 426, 430, 443, 457, 460, 465, 602, 605, 606, 607, 609, 611, 613, 616, 618, 620, 632, 638, 646, 652, 727, 728, 730, 731, 732, 752, 773, 774, 776, 786, 812, 820, 824, 825, 830, 835, 848, 875, 899, 987, 1018, 1022, 1035, 1051, 1055, 1171, 1194, 1199, 1207, 1213, 1280, 1297, 1298], "mean_horizont": [313, 751], "measur": [229, 280, 313, 317, 839, 865, 899], "measure_a": [313, 317], "measure_b": [313, 317], "median": [183, 238, 313, 460, 608, 609, 786, 812, 871, 899, 987, 1172, 1280, 1300], "mediat": 1307, "medium": [36, 313], "megan": [230, 313, 840, 899], "melt": [280, 313, 865, 899], "member": [204, 313, 825, 899, 1077, 1280], "membership": [345, 503, 930, 1096], "memori": [14, 41, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 139, 141, 143, 146, 147, 148, 172, 192, 223, 247, 248, 257, 271, 299, 313, 582, 593, 627, 786, 807, 808, 874, 899, 1052, 1136, 1160, 1188, 1189, 1261, 1280], "memory_map": [135, 141, 146], "memory_resourc": 874, "merg": [35, 218, 219, 230, 313, 829, 830, 840, 899], "merge_sort": [313, 899], "messi": [646, 648, 1207, 1209], "met": 776, "meta": [399, 786], "metadata": [0, 145, 798], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 170, 179, 183, 184, 187, 192, 199, 203, 210, 216, 223, 234, 240, 246, 247, 248, 256, 278, 287, 294, 299, 305, 313, 322, 325, 326, 357, 386, 399, 432, 435, 449, 450, 458, 465, 467, 470, 472, 479, 495, 528, 542, 544, 559, 561, 563, 565, 566, 568, 570, 572, 573, 576, 577, 578, 581, 587, 590, 592, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 626, 640, 649, 661, 669, 670, 671, 672, 677, 683, 688, 696, 698, 703, 718, 748, 759, 778, 779, 781, 782, 786, 787, 788, 791, 792, 793, 794, 795, 798, 808, 812, 813, 815, 828, 845, 854, 863, 869, 874, 877, 882, 888, 899, 904, 907, 914, 942, 974, 987, 1024, 1027, 1042, 1043, 1052, 1053, 1061, 1063, 1070, 1088, 1121, 1135, 1136, 1147, 1148, 1158, 1159, 1174, 1187, 1201, 1210, 1222, 1238, 1244, 1263, 1272, 1274, 1276, 1280, 1281, 1284, 1286, 1287, 1288, 1290, 1294], "metric": 131, "micro": [431, 1023], "microsecond": [62, 64, 204, 216, 219, 245, 247, 248, 267, 283, 313, 426, 430, 438, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 729, 730, 731, 732, 772, 773, 774, 786, 825, 830, 844, 848, 899, 905, 1018, 1022, 1030, 1035, 1047, 1280, 1303], "microsoft": [36, 313], "mid_color": [36, 313], "midnight": 77, "midpoint": [183, 240, 305, 313, 590, 612, 613, 759, 786, 812, 845, 888, 899, 987, 1158, 1174, 1280], "might": [129, 130, 143, 165, 238, 271, 280, 313, 544, 698, 786, 857, 865, 899], "millennia": 1303, "millennium": 1303, "milli": [431, 1023], "millisecond": [204, 219, 245, 283, 313, 415, 421, 426, 430, 439, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 905, 1018, 1022, 1031, 1035, 1047, 1280, 1303], "milliseconds_diff": [438, 439, 441], "mimic": 716, "min": [36, 41, 45, 183, 194, 232, 238, 245, 313, 393, 460, 544, 582, 592, 602, 610, 611, 727, 730, 755, 764, 786, 812, 820, 848, 899, 903, 982, 987, 1055, 1159, 1173, 1280, 1298, 1300, 1303, 1310], "min_a": [245, 313, 602, 786, 848, 899], "min_col": [157, 159], "min_color": [36, 313], "min_elem": 1298, "min_horizont": [313, 754, 764], "min_period": [396, 451, 453, 454, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 762, 763, 786, 985, 1046, 1048, 1049, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1280], "min_siz": [158, 159, 161, 163, 1310], "min_valu": 1310, "mincol": 157, "minim": [303, 337, 344, 501, 627, 635, 786, 886, 922, 929, 1094, 1140, 1188, 1280], "minimum": [41, 45, 157, 158, 159, 161, 163, 197, 231, 232, 313, 451, 453, 454, 560, 575, 585, 592, 754, 755, 786, 841, 899, 1012, 1046, 1048, 1049, 1146, 1154, 1159, 1280, 1297, 1310], "minu": [426, 578, 786, 1018], "minut": [204, 219, 245, 283, 313, 415, 418, 420, 425, 426, 430, 431, 440, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 729, 730, 731, 732, 772, 773, 774, 786, 825, 830, 848, 899, 905, 1018, 1022, 1032, 1035, 1047, 1280, 1303], "minutes_diff": 440, "misc": 1295, "miscellan": 798, "mismatch": [55, 108, 139, 147, 152, 154], "miss": [55, 129, 130, 143, 193, 199, 313, 365, 451, 453, 454, 459, 466, 488, 489, 535, 786, 819, 899, 1046, 1048, 1049, 1054, 1280], "missing_utf8_is_empty_str": [129, 130, 143], "mix": [11, 219, 271, 313, 765, 830, 858, 899, 905, 987, 1280], "mixin": 1, "mlnm": 419, "mm": [36, 313], "mn": 1302, "mno": [16, 20], "mnop": 1302, "mo": 732, "mocha": 905, "mod": [786, 1300], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 238, 260, 313, 647, 758, 761, 777, 786, 807, 808, 817, 899, 1208, 1280, 1289, 1290, 1307], "model": [275, 313], "modifi": [129, 130, 143, 165, 168, 192, 208, 215, 216, 285, 313, 339, 429, 446, 639, 646, 647, 650, 659, 660, 679, 681, 682, 786, 914, 1021, 1038, 1052, 1200, 1207, 1208, 1211, 1220, 1221, 1240, 1242, 1243, 1280], "modul": [87, 95, 134, 785, 905, 1310], "modulu": [561, 786], "moment": [41, 181, 313, 493, 632, 786, 1087, 1194, 1280], "mon": [313, 316, 1303], "mondai": [204, 313, 404, 443, 445, 714, 825, 899, 992, 1035, 1037], "monkei": [657, 658, 1218, 1219], "month": [204, 219, 245, 283, 313, 412, 423, 424, 426, 430, 432, 435, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 726, 727, 728, 729, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 1000, 1015, 1016, 1018, 1022, 1024, 1027, 1035, 1047, 1280, 1303], "month_nam": [432, 435], "monthbegin": [424, 1016], "monthend": [423, 1015], "moos": 905, "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 147, 152, 154, 159, 168, 170, 181, 183, 195, 215, 216, 223, 229, 234, 246, 247, 249, 260, 270, 271, 275, 278, 280, 299, 313, 317, 326, 363, 461, 465, 473, 493, 523, 536, 540, 543, 544, 581, 582, 623, 632, 647, 655, 673, 675, 676, 697, 708, 719, 735, 741, 744, 751, 753, 756, 757, 766, 776, 782, 786, 812, 821, 839, 858, 863, 865, 874, 899, 903, 905, 907, 948, 968, 987, 1064, 1065, 1087, 1116, 1129, 1136, 1181, 1194, 1208, 1216, 1234, 1236, 1237, 1259, 1261, 1266, 1280, 1295, 1296, 1305, 1308, 1309, 1310], "more_bi": [236, 259, 313, 635, 786, 857, 899], "more_column": [191, 279, 313, 455, 734, 786, 818, 864, 899, 905], "more_expr": [582, 712, 715, 716, 717, 786], "more_nam": [684, 782], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 271, 313, 375, 554, 562, 583, 597, 666, 786, 959, 1141, 1152, 1164, 1227, 1261, 1280, 1292, 1307], "mostli": [265, 313, 461, 786], "move": [18, 238, 248, 313, 404, 451, 452, 453, 454, 604, 606, 610, 617, 786, 992, 1046, 1047, 1048, 1049, 1170, 1171, 1173, 1177, 1280], "mr": 874, "mssql": [34, 313], "much": [223, 281, 299, 313, 396, 510, 544, 655, 656, 748, 786, 882, 985, 1103, 1136, 1216, 1217, 1280], "mul": 786, "multi": [8, 36, 129, 130, 275, 313, 455, 646, 786, 1207], "multi_fram": [36, 313], "multicolselector": 173, "multiindexselector": [173, 909], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 185, 190, 192, 195, 203, 204, 208, 217, 220, 236, 238, 248, 251, 254, 259, 282, 287, 292, 313, 381, 510, 543, 549, 554, 562, 563, 582, 596, 598, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 635, 684, 695, 712, 719, 736, 747, 749, 754, 760, 766, 769, 776, 782, 786, 807, 808, 814, 821, 824, 825, 831, 850, 853, 857, 866, 869, 875, 882, 899, 914, 943, 1045, 1052, 1103, 1123, 1141, 1163, 1165, 1196, 1280, 1293, 1298], "multipli": [543, 603, 604, 606, 608, 610, 612, 615, 617, 619, 687, 786, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1280], "multithread": [259, 313, 635, 712, 786, 857, 899, 943, 1123, 1196, 1280], "must": [36, 65, 117, 118, 129, 133, 141, 144, 145, 148, 149, 183, 191, 204, 219, 220, 230, 238, 245, 246, 313, 397, 535, 544, 589, 596, 597, 602, 605, 607, 609, 611, 613, 616, 618, 620, 661, 727, 728, 776, 786, 812, 818, 825, 830, 831, 835, 840, 848, 855, 874, 899, 903, 986, 987, 1157, 1163, 1164, 1222, 1280], "mutual": [246, 313], "my": [145, 149], "my_column": 882, "my_column_": [277, 313], "my_column_0": [277, 313], "my_column_1": [277, 313], "my_column_2": [277, 313], "my_custom_aggreg": 748, "my_fil": 135, "my_holidai": [404, 714, 992], "my_larger_than_ram_fil": [42, 43, 44, 45, 899], "my_long_fil": 143, "my_struct": 768, "mydf": 143, "myrol": 132, "mysql": 132, "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 177, 192, 198, 204, 206, 216, 217, 222, 223, 247, 248, 249, 256, 261, 264, 267, 269, 284, 296, 298, 307, 313, 329, 357, 362, 370, 380, 381, 396, 400, 404, 406, 408, 414, 434, 446, 452, 458, 461, 469, 475, 497, 505, 511, 513, 523, 524, 528, 531, 533, 535, 537, 583, 586, 595, 615, 616, 619, 620, 623, 626, 632, 637, 651, 655, 656, 659, 665, 666, 668, 669, 674, 676, 690, 694, 695, 696, 700, 701, 703, 718, 720, 729, 730, 731, 732, 738, 740, 758, 761, 762, 763, 767, 771, 775, 777, 786, 805, 823, 825, 826, 834, 854, 859, 861, 867, 879, 881, 890, 899, 905, 942, 947, 954, 964, 973, 985, 988, 992, 994, 996, 1002, 1026, 1038, 1047, 1052, 1053, 1060, 1067, 1090, 1098, 1104, 1106, 1116, 1117, 1121, 1126, 1128, 1152, 1176, 1178, 1181, 1187, 1194, 1198, 1212, 1216, 1217, 1220, 1226, 1227, 1235, 1237, 1252, 1258, 1265, 1269, 1270, 1280, 1292, 1293, 1299, 1302, 1303, 1305, 1307, 1310], "n0": [362, 535], "n00": [947, 1128], "n01": [947, 1128], "n02": [947, 1128], "n1": [362, 535], "n2": [1, 362], "n3": 1, "n_1": [461, 786], "n_2": [461, 786], "n_3": [461, 786], "n_bar": 1297, "n_bit": 1302, "n_byte": [370, 655, 656, 1302], "n_char": [655, 656, 1302], "n_chunk": [313, 914, 1052, 1160, 1280], "n_elem": 1298, "n_even": 905, "n_field_strategi": [535, 1128], "n_film": 1289, "n_foo_uniqu": 1297, "n_kilobyt": 370, "n_row": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 217, 313, 899], "n_thread": [129, 130], "n_uniqu": [313, 329, 786, 1280], "na": [272, 313, 667, 1262, 1280], "naiv": [408, 409, 676, 996, 997, 1237], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 175, 176, 179, 180, 185, 186, 187, 191, 195, 196, 199, 200, 202, 203, 214, 215, 216, 218, 219, 220, 223, 225, 227, 229, 230, 232, 236, 238, 242, 246, 247, 248, 250, 251, 252, 259, 260, 263, 266, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 292, 298, 313, 317, 324, 362, 366, 367, 369, 371, 381, 397, 432, 435, 455, 461, 481, 488, 489, 490, 491, 535, 544, 549, 551, 553, 555, 558, 582, 589, 599, 635, 647, 648, 659, 660, 661, 684, 686, 687, 695, 700, 704, 705, 706, 707, 708, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 724, 725, 734, 735, 740, 741, 744, 749, 750, 751, 752, 753, 754, 755, 756, 759, 762, 763, 764, 765, 767, 768, 769, 770, 771, 775, 776, 782, 786, 802, 804, 809, 810, 814, 815, 818, 821, 824, 829, 830, 831, 839, 840, 846, 849, 850, 851, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 875, 881, 899, 903, 904, 905, 911, 947, 973, 986, 1024, 1027, 1044, 1128, 1157, 1162, 1207, 1208, 1209, 1220, 1221, 1245, 1248, 1256, 1257, 1262, 1269, 1280, 1285, 1290, 1291, 1292, 1293, 1294, 1295, 1306, 1307, 1310], "name_gener": [277, 313], "named_agg": [292, 875], "named_bi": [203, 313, 824, 899], "named_expr": [251, 252, 287, 288, 313, 687, 764, 768, 850, 851, 869, 870, 899], "named_fram": [1293, 1307], "nameless": 121, "namespac": [1, 131, 312, 313, 316, 684, 765, 785, 798, 897, 898, 1280, 1285, 1310], "nan": [121, 159, 172, 193, 271, 272, 313, 402, 403, 449, 450, 459, 470, 472, 479, 488, 489, 490, 491, 495, 542, 545, 560, 574, 575, 576, 577, 603, 629, 696, 718, 786, 819, 899, 916, 920, 990, 991, 1054, 1080, 1081, 1145, 1146, 1169, 1191, 1261, 1262, 1280, 1310], "nan_as_nul": 172, "nan_max": [786, 1280], "nan_min": [786, 1280], "nan_to_nul": [121, 313, 899, 1280], "nana": 1302, "nanmax": [574, 575, 786, 1145, 1146, 1280], "nanosecond": [77, 204, 219, 245, 283, 313, 426, 430, 431, 441, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1023, 1033, 1035, 1047, 1280, 1303], "nansum": [603, 786, 1169, 1280], "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 216, 223, 247, 248, 267, 271, 299, 313, 544, 748, 765, 786, 792, 858, 882, 899, 1136, 1261, 1280, 1284, 1307, 1310], "natur": [540, 786, 1133, 1280, 1296, 1301], "ndarrai": [120, 170, 195, 271, 313, 468, 624, 786, 821, 899, 907, 1059, 1182, 1183, 1261, 1280], "ndjson": [44, 899], "ne": [577, 786, 1148, 1280], "ne_miss": [195, 313, 786, 821, 899, 1043, 1280], "nearest": [49, 183, 219, 240, 305, 313, 385, 464, 479, 590, 612, 613, 759, 786, 812, 830, 845, 888, 899, 971, 987, 1058, 1070, 1158, 1174, 1280, 1301], "nearest_pow2": 49, "necessari": [33, 34, 42, 46, 85, 134, 271, 313, 899, 1261, 1280], "need": [55, 86, 95, 123, 129, 130, 132, 141, 143, 146, 148, 204, 245, 248, 257, 313, 316, 535, 602, 627, 661, 677, 732, 758, 761, 777, 786, 825, 848, 899, 1188, 1222, 1238, 1280, 1285, 1310], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 206, 222, 245, 256, 258, 264, 290, 313, 357, 528, 529, 586, 587, 602, 626, 633, 651, 663, 674, 786, 848, 854, 856, 872, 873, 899, 905, 942, 1067, 1090, 1121, 1122, 1155, 1187, 1195, 1212, 1224, 1235, 1252, 1280], "negat": [579, 786, 1150, 1280], "neither": [123, 134, 140, 249, 313, 362, 535, 947, 1128], "nest": [46, 123, 126, 160, 161, 190, 313, 798, 1045, 1280, 1307, 1310], "nest_asyncio": 151, "nesting_level": 160, "net": [647, 1208], "netherland": [219, 313, 830, 899], "never": [33, 42, 131, 218, 219, 246, 313, 829, 830, 899], "new": [34, 35, 36, 143, 168, 173, 198, 208, 209, 223, 234, 235, 238, 242, 277, 279, 281, 282, 287, 288, 313, 324, 408, 457, 467, 469, 479, 566, 567, 582, 596, 597, 601, 659, 660, 665, 666, 684, 686, 782, 786, 798, 823, 846, 864, 866, 869, 870, 882, 899, 909, 911, 996, 1051, 1060, 1149, 1162, 1163, 1164, 1168, 1220, 1221, 1226, 1227, 1245, 1248, 1257, 1280, 1307, 1309], "new_column": [129, 130, 134, 143], "new_dat": 426, "new_df": [282, 313, 866, 899], "new_fil": [31, 33, 37, 38, 41, 313], "new_from_index": 1280, "new_id": [277, 313], "new_lf": [866, 899], "new_tabl": 1309, "new_valu": [722, 723, 736, 760], "new_york": 730, "newli": 47, "newlin": [40, 139, 147, 313], "next": [49, 204, 219, 245, 283, 313, 365, 404, 426, 430, 443, 592, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 992, 1018, 1022, 1035, 1159, 1280], "next_batch": 130, "next_pow2": 49, "nfruit": 674, "nl": [404, 714, 992], "nnel_id": 123, "no1": 905, "no_default": [199, 313, 596, 597, 661, 786, 1163, 1164, 1222, 1280], "no_optim": [42, 43, 44, 45, 53, 54, 807, 808, 835, 844, 899], "nodataerror": [129, 130, 134, 140, 143], "nodd": [646, 1207], "node": [803, 807, 827, 835, 839, 844, 846, 899], "nodefault": [199, 313, 596, 597, 661, 786, 1163, 1164, 1222, 1280], "non": [4, 5, 33, 35, 36, 42, 47, 62, 63, 121, 150, 175, 182, 217, 229, 245, 251, 252, 256, 276, 277, 280, 282, 287, 288, 313, 380, 381, 386, 390, 391, 404, 429, 481, 535, 543, 544, 582, 583, 596, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 641, 647, 655, 661, 681, 683, 687, 694, 695, 705, 707, 715, 716, 717, 719, 721, 725, 732, 750, 752, 755, 762, 763, 764, 768, 770, 786, 802, 811, 839, 848, 850, 851, 854, 862, 865, 866, 869, 870, 899, 903, 905, 964, 974, 979, 980, 987, 992, 1021, 1072, 1128, 1136, 1152, 1163, 1164, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1187, 1202, 1208, 1216, 1242, 1244, 1261, 1265, 1280, 1299, 1307], "non_exist": [429, 1021], "non_numer": [33, 42, 313, 899], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 54, 56, 59, 62, 63, 64, 65, 72, 76, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 171, 177, 182, 183, 187, 193, 194, 195, 197, 199, 202, 204, 205, 210, 214, 218, 219, 221, 223, 226, 229, 234, 235, 238, 245, 246, 249, 253, 256, 258, 259, 265, 266, 268, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 294, 298, 313, 325, 327, 328, 340, 341, 342, 349, 350, 362, 365, 386, 390, 391, 392, 395, 397, 402, 403, 411, 426, 429, 450, 451, 452, 453, 454, 455, 458, 459, 460, 466, 473, 474, 476, 479, 480, 481, 488, 489, 490, 491, 496, 498, 499, 506, 512, 514, 516, 523, 524, 525, 526, 527, 529, 535, 543, 544, 553, 556, 557, 559, 564, 577, 578, 579, 580, 582, 583, 589, 592, 593, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 623, 626, 627, 628, 629, 633, 634, 638, 639, 641, 643, 644, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 678, 680, 683, 684, 685, 686, 693, 700, 705, 706, 707, 709, 715, 716, 717, 719, 721, 725, 727, 728, 729, 730, 731, 732, 734, 735, 742, 743, 744, 745, 746, 747, 748, 750, 752, 755, 761, 762, 763, 768, 770, 772, 773, 774, 776, 786, 805, 806, 808, 811, 812, 815, 817, 819, 820, 821, 825, 828, 829, 830, 833, 835, 839, 842, 848, 852, 854, 855, 856, 857, 863, 864, 865, 866, 871, 874, 877, 881, 882, 891, 892, 899, 903, 904, 905, 907, 908, 912, 913, 921, 922, 926, 927, 934, 935, 947, 973, 974, 979, 980, 986, 987, 989, 990, 991, 999, 1006, 1007, 1008, 1012, 1021, 1041, 1043, 1046, 1047, 1048, 1049, 1053, 1054, 1055, 1064, 1066, 1068, 1070, 1071, 1072, 1082, 1083, 1086, 1087, 1089, 1091, 1092, 1095, 1099, 1105, 1107, 1109, 1116, 1117, 1118, 1119, 1120, 1122, 1128, 1136, 1137, 1138, 1139, 1140, 1148, 1151, 1157, 1158, 1159, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1181, 1182, 1183, 1184, 1187, 1190, 1191, 1194, 1195, 1198, 1199, 1200, 1202, 1204, 1205, 1208, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1239, 1241, 1244, 1247, 1255, 1257, 1258, 1259, 1261, 1262, 1263, 1269, 1270, 1280, 1289, 1291, 1292, 1293, 1295, 1298, 1299, 1303, 1307], "nonexist": [429, 1021], "nor": [134, 140, 249, 313], "normal": [35, 126, 204, 313, 448, 493, 632, 700, 786, 825, 899, 1041, 1087, 1194, 1269, 1280], "normalised_scor": 131, "norowsreturnederror": [246, 313], "not_": [287, 313, 786, 869, 899, 905, 1280], "not_c": [287, 313, 869, 899], "notabl": 131, "notat": [11, 36, 313], "note": [4, 10, 20, 35, 36, 41, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 147, 149, 152, 154, 157, 159, 163, 165, 168, 172, 179, 181, 183, 184, 193, 195, 204, 205, 214, 215, 216, 218, 219, 223, 234, 237, 238, 242, 245, 246, 247, 248, 253, 256, 260, 267, 270, 272, 275, 277, 278, 280, 282, 283, 287, 289, 290, 313, 357, 386, 394, 395, 399, 402, 403, 409, 423, 424, 426, 430, 443, 452, 459, 465, 467, 474, 481, 488, 489, 507, 510, 528, 535, 544, 556, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 626, 628, 632, 638, 639, 640, 645, 646, 647, 648, 649, 650, 651, 655, 656, 659, 660, 661, 663, 668, 669, 670, 673, 674, 681, 683, 684, 689, 696, 705, 707, 714, 722, 727, 728, 730, 731, 732, 736, 746, 758, 760, 761, 765, 773, 774, 776, 777, 782, 786, 797, 808, 812, 813, 819, 821, 825, 829, 830, 846, 848, 852, 854, 855, 857, 858, 863, 865, 866, 869, 872, 873, 899, 905, 942, 974, 983, 984, 987, 990, 991, 997, 1015, 1016, 1018, 1022, 1035, 1047, 1054, 1066, 1072, 1100, 1103, 1121, 1136, 1163, 1164, 1168, 1175, 1182, 1184, 1187, 1189, 1194, 1199, 1200, 1201, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1216, 1217, 1220, 1221, 1222, 1224, 1229, 1230, 1231, 1234, 1235, 1242, 1244, 1251, 1262, 1264, 1280, 1289, 1290, 1294, 1295, 1305, 1307], "noth": [20, 646, 654, 1207, 1215], "notic": [131, 195, 313, 821, 899, 1280], "notimplementederror": 172, "now": [47, 134, 245, 271, 313, 848, 899, 1261, 1280], "np": [120, 170, 195, 271, 313, 468, 543, 624, 786, 821, 899, 907, 1059, 1075, 1078, 1080, 1081, 1182, 1183, 1280], "npt": [170, 907], "nr": [296, 307, 879, 890], "nth": [198, 313, 469, 666, 782, 786, 823, 899, 1060, 1227, 1280], "nthe": [646, 1207], "nthose": [646, 1207], "nu": 644, "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 141, 143, 147, 148, 149, 156, 159, 163, 172, 175, 177, 182, 183, 187, 189, 194, 195, 197, 210, 218, 226, 227, 228, 235, 238, 240, 256, 259, 261, 262, 263, 266, 271, 272, 276, 279, 282, 284, 287, 294, 313, 325, 327, 328, 338, 341, 342, 349, 350, 357, 358, 365, 367, 380, 381, 382, 386, 390, 391, 392, 395, 400, 402, 403, 426, 429, 436, 437, 438, 439, 440, 441, 442, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 466, 473, 479, 480, 488, 489, 490, 491, 496, 498, 499, 505, 506, 509, 510, 512, 514, 515, 516, 524, 525, 526, 527, 528, 530, 535, 543, 544, 564, 577, 578, 579, 580, 583, 593, 597, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 626, 627, 629, 634, 635, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 673, 674, 676, 678, 683, 684, 685, 686, 693, 694, 695, 704, 705, 706, 707, 712, 715, 716, 717, 719, 721, 725, 729, 734, 745, 746, 750, 752, 755, 762, 763, 768, 770, 776, 786, 802, 805, 811, 812, 815, 820, 821, 828, 829, 842, 854, 857, 862, 864, 866, 869, 871, 877, 899, 905, 912, 913, 923, 926, 927, 934, 935, 942, 943, 951, 964, 965, 973, 974, 979, 980, 988, 990, 991, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1043, 1044, 1046, 1047, 1048, 1049, 1053, 1055, 1056, 1064, 1065, 1070, 1071, 1082, 1083, 1084, 1089, 1091, 1092, 1095, 1098, 1099, 1102, 1103, 1105, 1107, 1108, 1109, 1118, 1120, 1121, 1123, 1128, 1136, 1148, 1151, 1152, 1164, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1187, 1191, 1196, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1224, 1226, 1227, 1228, 1234, 1235, 1237, 1239, 1244, 1247, 1258, 1261, 1262, 1263, 1265, 1280, 1292, 1296, 1298, 1299, 1303, 1305, 1307, 1308, 1310], "null_behavior": [400, 505, 786, 988, 1098, 1280], "null_count": [41, 45, 183, 187, 313, 396, 786, 812, 899, 985, 987, 1280], "null_equ": [189, 313, 1044, 1280], "null_on_oob": [349, 510, 512, 934, 1103, 1105], "null_prob": [156, 159, 163], "null_valu": [33, 42, 129, 130, 143, 313, 899], "nullabl": [35, 313], "nullbehavior": [400, 505, 786, 988, 1098, 1280], "nullif": 1300, "nulls_last": [259, 313, 338, 358, 530, 634, 635, 712, 786, 857, 899, 923, 943, 1084, 1123, 1196, 1280], "num": [13, 36, 274, 313, 481, 786, 1072, 1280], "num_row": 172, "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 175, 177, 182, 190, 191, 193, 194, 202, 206, 207, 216, 217, 222, 233, 234, 245, 249, 256, 261, 264, 276, 281, 284, 286, 294, 296, 298, 307, 313, 339, 355, 357, 362, 365, 373, 374, 375, 377, 378, 380, 381, 390, 396, 397, 400, 404, 407, 415, 417, 419, 421, 422, 431, 444, 445, 447, 451, 452, 453, 454, 458, 459, 460, 466, 475, 488, 489, 496, 497, 505, 513, 516, 521, 523, 528, 531, 533, 535, 537, 582, 586, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 628, 637, 651, 653, 655, 656, 659, 663, 665, 666, 674, 677, 690, 694, 695, 701, 714, 718, 719, 720, 732, 740, 745, 762, 763, 767, 771, 775, 786, 802, 805, 811, 818, 819, 820, 826, 834, 844, 854, 859, 861, 862, 867, 868, 877, 879, 881, 890, 899, 904, 940, 942, 947, 957, 958, 959, 961, 962, 964, 973, 979, 985, 986, 988, 992, 995, 1003, 1005, 1010, 1013, 1014, 1023, 1036, 1037, 1039, 1045, 1046, 1047, 1048, 1049, 1053, 1054, 1055, 1067, 1089, 1090, 1098, 1106, 1109, 1114, 1116, 1121, 1126, 1128, 1142, 1143, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1187, 1190, 1198, 1212, 1214, 1216, 1217, 1220, 1224, 1226, 1227, 1235, 1238, 1252, 1265, 1270, 1280, 1296, 1301, 1310], "number_of_two": [346, 504], "numbers_decim": 677, "numer": [10, 16, 33, 36, 42, 133, 144, 176, 185, 219, 271, 272, 280, 281, 313, 322, 382, 386, 465, 481, 540, 561, 563, 587, 595, 627, 629, 648, 683, 688, 696, 786, 798, 804, 814, 830, 865, 899, 905, 965, 974, 987, 1072, 1188, 1191, 1209, 1244, 1261, 1280, 1301, 1310], "numeric_dtyp": 1310, "numericliter": [386, 786, 974, 1280], "numpi": [90, 120, 151, 170, 181, 216, 247, 248, 267, 271, 272, 313, 543, 574, 575, 603, 786, 899, 907, 1075, 1078, 1080, 1081, 1145, 1146, 1169, 1261, 1262, 1280], "nworld": 668, "o": [135, 146, 370, 380, 381, 396, 645, 694, 695, 786, 954, 964, 985, 1206, 1229, 1265, 1280, 1293], "oauth": 145, "obj": 905, "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 171, 172, 179, 184, 203, 204, 219, 221, 236, 245, 248, 253, 260, 270, 271, 272, 313, 399, 556, 727, 728, 730, 731, 746, 765, 773, 774, 786, 798, 807, 813, 825, 830, 833, 848, 858, 896, 899, 905, 908, 1255, 1280, 1290, 1292, 1295, 1307, 1309], "observ": [397, 451, 452, 453, 454, 589, 786, 986, 1046, 1047, 1048, 1049, 1157, 1280], "obtain": 535, "obvious": 686, "occur": [36, 53, 54, 91, 100, 106, 220, 313, 346, 504, 562, 592, 786, 807, 808, 817, 831, 844, 855, 899, 931, 1097, 1141, 1159, 1261, 1280], "occurr": [476, 484, 487, 700, 786, 1068, 1076, 1079, 1269, 1280], "oct": 1302, "octet_length": 1300, "octob": 1302, "od": [140, 798], "odbc": [34, 131, 313], "odd": 646, "odi": 649, "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 313, 404, 714, 807, 808, 817, 829, 830, 835, 844, 899, 992], "offer": [237, 313, 586, 786, 843, 899, 1303, 1307], "offic": [36, 313], "offset": [64, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 198, 204, 245, 258, 289, 290, 313, 404, 405, 413, 423, 424, 426, 430, 443, 469, 511, 529, 602, 633, 663, 676, 786, 823, 825, 848, 856, 872, 873, 899, 992, 993, 1001, 1015, 1016, 1018, 1022, 1035, 1060, 1104, 1122, 1195, 1224, 1237, 1280, 1306], "offset_bi": 732, "often": [132, 168, 204, 245, 313, 346, 504, 595, 602, 786, 825, 848, 899, 931, 1097, 1295, 1307], "ok": 535, "old": [35, 242, 313, 596, 597, 786, 846, 899, 1163, 1164, 1280], "old_tabl": 1309, "older": [41, 45, 313, 899], "oldw": 669, "omit": [27, 119, 123, 157, 168, 234, 248, 270, 275, 313, 727, 730, 742, 743, 773, 774, 905, 1308], "onc": [129, 130, 165, 223, 247, 249, 292, 313, 523, 543, 544, 623, 671, 672, 786, 803, 875, 899, 1116, 1136, 1181, 1232, 1233, 1280, 1293], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 147, 162, 164, 168, 176, 184, 194, 195, 202, 203, 204, 216, 220, 221, 229, 238, 245, 246, 247, 253, 254, 256, 271, 274, 280, 293, 313, 323, 357, 397, 399, 460, 461, 465, 468, 471, 473, 528, 535, 540, 556, 565, 566, 568, 570, 572, 573, 582, 601, 602, 626, 634, 646, 647, 648, 661, 684, 727, 730, 748, 766, 776, 782, 786, 804, 813, 820, 821, 824, 825, 831, 839, 848, 852, 853, 854, 865, 871, 876, 899, 914, 942, 947, 986, 1055, 1064, 1065, 1121, 1128, 1133, 1157, 1168, 1187, 1207, 1208, 1209, 1222, 1245, 1261, 1280, 1295, 1296, 1298, 1301, 1309], "one_to_mani": [218, 313, 829, 899], "one_to_on": [218, 313, 829, 899], "oneormoredatatyp": [36, 157, 313], "ones": 905, "onf": [663, 1224], "onli": [1, 5, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 139, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 187, 192, 204, 205, 216, 219, 220, 223, 238, 245, 247, 248, 267, 269, 270, 271, 282, 283, 299, 313, 323, 325, 327, 339, 385, 386, 399, 404, 426, 433, 455, 464, 474, 543, 544, 550, 565, 566, 567, 568, 569, 570, 571, 572, 573, 582, 594, 640, 649, 661, 698, 714, 748, 786, 810, 813, 815, 816, 825, 830, 831, 848, 849, 866, 868, 882, 899, 903, 905, 912, 913, 914, 971, 974, 992, 1018, 1052, 1058, 1066, 1136, 1161, 1201, 1210, 1222, 1255, 1258, 1261, 1280, 1289, 1292, 1307, 1308, 1310], "onlin": [192, 313, 1052, 1280], "ont": [649, 1210], "onto": 159, "oof": [662, 1223, 1298, 1302], "op": [20, 163, 242, 313, 550, 595, 786, 833, 846, 899, 1280], "opaqu": 882, "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 399, 786, 813, 899], "openoffic": 140, "openpyxl": [134, 151], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 178, 192, 195, 197, 203, 209, 221, 223, 230, 234, 236, 237, 238, 241, 243, 245, 248, 249, 254, 256, 265, 271, 272, 277, 280, 281, 291, 292, 313, 322, 323, 326, 357, 391, 392, 393, 394, 395, 396, 449, 450, 465, 467, 470, 472, 495, 523, 524, 525, 526, 527, 528, 535, 542, 558, 561, 563, 564, 565, 566, 568, 570, 572, 573, 576, 577, 578, 581, 582, 587, 594, 623, 626, 688, 696, 703, 704, 706, 716, 717, 721, 733, 765, 776, 786, 798, 806, 810, 812, 816, 821, 824, 829, 839, 840, 849, 853, 854, 858, 865, 868, 875, 899, 903, 942, 975, 980, 981, 982, 983, 984, 985, 1042, 1043, 1052, 1061, 1063, 1088, 1116, 1117, 1118, 1119, 1120, 1121, 1135, 1147, 1148, 1161, 1181, 1187, 1255, 1260, 1261, 1262, 1280, 1306, 1307], "operand": [696, 786], "opp": 905, "oppos": 714, "opposit": [256, 313, 357, 528, 626, 786, 854, 899, 942, 1121, 1187, 1280], "opt": [275, 313], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 216, 221, 237, 241, 247, 278, 313, 803, 807, 808, 817, 835, 844, 855, 863, 872, 873, 882, 899, 970, 1182, 1280], "optimis": [131, 223, 248, 299, 313, 899, 1136, 1184, 1280, 1310], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 184, 199, 204, 214, 219, 229, 253, 260, 266, 277, 280, 282, 313, 399, 404, 493, 550, 556, 582, 603, 604, 606, 608, 610, 612, 615, 617, 619, 632, 640, 649, 661, 663, 700, 768, 776, 786, 798, 807, 813, 825, 829, 830, 839, 852, 858, 865, 866, 874, 899, 905, 992, 1087, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1194, 1201, 1210, 1222, 1224, 1257, 1269, 1280, 1298, 1302], "optional_memb": [485, 786, 1077, 1280], "or_": 786, "oracl": 132, "orang": [180, 294, 295, 297, 298, 300, 301, 303, 305, 306, 313, 381, 695, 786, 877, 878, 880, 881, 883, 884, 886, 888, 889, 1302], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 129, 131, 150, 152, 153, 154, 155, 175, 179, 180, 187, 188, 195, 203, 204, 218, 220, 236, 237, 238, 245, 247, 249, 250, 254, 259, 270, 271, 276, 278, 283, 313, 338, 358, 363, 380, 381, 402, 403, 461, 506, 523, 530, 536, 582, 587, 592, 602, 623, 624, 625, 634, 635, 662, 669, 670, 671, 672, 686, 694, 695, 697, 698, 700, 712, 765, 776, 786, 797, 802, 810, 815, 816, 821, 824, 825, 829, 831, 839, 848, 849, 853, 857, 858, 862, 863, 899, 904, 905, 923, 943, 948, 964, 969, 990, 991, 1056, 1084, 1099, 1116, 1123, 1129, 1155, 1159, 1166, 1181, 1183, 1185, 1196, 1223, 1248, 1265, 1266, 1267, 1269, 1280, 1289, 1292, 1298, 1306, 1307, 1310], "order_bi": [582, 786], "ordin": [427, 592, 786, 1019, 1159, 1280, 1308], "ordinal_dai": [412, 445], "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 313, 855, 899, 907, 908], "orient": [48, 50, 91, 120, 122, 234, 313, 899, 1289], "origin": [47, 129, 130, 143, 187, 195, 278, 313, 402, 403, 429, 430, 443, 461, 506, 544, 565, 582, 594, 595, 596, 597, 598, 600, 641, 646, 654, 710, 711, 786, 815, 821, 863, 899, 990, 991, 1021, 1022, 1035, 1056, 1099, 1163, 1164, 1165, 1167, 1202, 1207, 1215, 1280], "orld": 1230, "other": [1, 20, 32, 36, 41, 54, 128, 129, 130, 131, 134, 143, 148, 152, 153, 154, 155, 187, 189, 192, 195, 218, 219, 220, 229, 230, 238, 246, 248, 251, 252, 275, 280, 282, 285, 287, 288, 311, 313, 316, 322, 326, 328, 338, 339, 386, 401, 449, 450, 461, 465, 470, 472, 481, 485, 495, 502, 524, 525, 526, 527, 542, 548, 552, 561, 563, 576, 577, 581, 596, 597, 628, 635, 661, 687, 688, 693, 696, 703, 705, 707, 712, 715, 716, 717, 725, 732, 750, 752, 755, 764, 768, 770, 786, 798, 808, 815, 821, 829, 830, 831, 839, 840, 850, 851, 865, 866, 869, 870, 871, 899, 905, 914, 974, 989, 1042, 1043, 1044, 1052, 1061, 1063, 1077, 1088, 1095, 1117, 1118, 1119, 1120, 1135, 1147, 1148, 1163, 1164, 1263, 1271, 1279, 1280, 1285, 1295, 1307], "other_df": [218, 313], "other_lf": [829, 899], "otherwis": [34, 131, 134, 141, 146, 158, 161, 165, 199, 223, 230, 248, 251, 270, 275, 299, 313, 362, 367, 386, 397, 451, 452, 453, 454, 535, 544, 553, 582, 586, 587, 589, 594, 629, 639, 642, 645, 650, 651, 656, 663, 674, 700, 704, 732, 735, 744, 748, 776, 786, 840, 850, 882, 899, 947, 951, 974, 986, 1046, 1047, 1048, 1049, 1128, 1136, 1155, 1157, 1161, 1182, 1184, 1191, 1200, 1203, 1206, 1211, 1212, 1217, 1224, 1235, 1269, 1280, 1299], "our": 173, "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 148, 151, 195, 245, 248, 313, 349, 367, 510, 512, 639, 642, 650, 776, 821, 848, 899, 934, 951, 1103, 1105, 1200, 1203, 1211, 1305], "outcom": [582, 786], "outer": [47, 55, 282, 313, 866, 899], "outermost": 46, "outlin": 7, "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 41, 42, 175, 183, 216, 223, 227, 230, 236, 238, 247, 251, 253, 263, 276, 283, 287, 313, 325, 327, 350, 380, 381, 397, 514, 535, 543, 544, 553, 556, 566, 589, 596, 638, 652, 656, 694, 695, 700, 704, 705, 706, 707, 716, 717, 718, 747, 748, 786, 798, 802, 812, 817, 835, 839, 840, 850, 852, 862, 869, 882, 899, 912, 913, 935, 964, 986, 1107, 1136, 1157, 1199, 1213, 1217, 1265, 1269, 1280], "output_path": [855, 899], "outsid": [386, 786, 974, 1280], "over": [125, 129, 130, 131, 133, 134, 140, 143, 148, 159, 160, 175, 192, 215, 216, 217, 223, 246, 247, 248, 260, 276, 277, 291, 299, 313, 317, 380, 381, 396, 399, 452, 460, 543, 544, 553, 555, 556, 557, 558, 566, 567, 592, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 694, 695, 722, 723, 736, 747, 748, 760, 765, 786, 802, 807, 858, 862, 874, 882, 896, 899, 905, 964, 985, 1047, 1052, 1136, 1170, 1171, 1173, 1177, 1265, 1280, 1307], "overflow": [176, 313, 382, 394, 395, 678, 689, 786, 804, 899, 965, 983, 984, 1239, 1251, 1280], "overhead": [46, 85, 143, 146, 147, 148], "overlap": [641, 647, 649, 1202, 1208, 1210], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 147, 156, 157, 163, 165, 313, 899], "overridden": [36, 116, 118, 120, 122, 138, 139, 147, 165, 313, 899], "overview": [313, 786, 798, 899, 1280, 1306, 1310], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 172, 282, 313, 324, 687, 786, 866, 899], "overwrite_schema": [35, 313], "ow": 668, "own": [776, 1261, 1280, 1310], "p": [49, 237, 313, 586, 768, 786, 843, 899, 905, 1211, 1212, 1293], "pa": [35, 116, 149, 313, 765], "pa_tabl": 765, "pacif": [405, 993], "pack": [234, 313], "packag": [131, 313, 317, 404, 714, 903, 992], "pad": [657, 658, 683, 1218, 1219, 1244], "pad_end": [658, 1219], "pad_start": [657, 683, 1218, 1244], "page": [41, 45, 135, 141, 146, 148, 313, 786, 798, 899, 1280, 1306], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 242, 313, 846, 899, 1310], "pairwis": [181, 313], "panda": [34, 117, 121, 126, 151, 195, 204, 272, 278, 280, 313, 423, 424, 693, 765, 786, 821, 825, 863, 865, 899, 1015, 1016, 1262, 1263, 1280, 1290, 1292, 1307], "pandas_df": 1307, "pane": [36, 313], "panic": 99, "pap": 1212, "papa": 651, "papai": [651, 1212], "papaya": [651, 663, 674, 1212, 1224, 1235], "parallel": [53, 55, 125, 132, 141, 148, 204, 219, 221, 237, 252, 288, 313, 396, 507, 700, 776, 786, 798, 825, 829, 830, 851, 870, 882, 899, 985, 1100, 1269, 1280], "parallelis": [223, 299, 313, 1136, 1280], "parallelstrategi": [141, 148], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 147, 158, 159, 163, 246, 313, 899], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 175, 176, 177, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 214, 216, 217, 218, 219, 220, 222, 223, 227, 229, 230, 233, 234, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 296, 298, 299, 305, 307, 313, 322, 324, 325, 326, 327, 328, 338, 345, 346, 349, 350, 357, 358, 362, 363, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 386, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 404, 406, 408, 409, 414, 426, 429, 430, 431, 432, 434, 435, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 479, 480, 481, 485, 493, 495, 497, 502, 503, 504, 505, 507, 510, 511, 512, 513, 514, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 542, 543, 544, 550, 556, 557, 561, 563, 566, 567, 568, 569, 570, 571, 576, 577, 581, 582, 583, 586, 587, 589, 590, 592, 594, 595, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 686, 687, 688, 690, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 786, 802, 804, 805, 807, 808, 812, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 826, 829, 830, 831, 834, 835, 839, 840, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 879, 881, 882, 888, 890, 899, 903, 904, 905, 909, 911, 912, 913, 914, 923, 930, 931, 934, 935, 942, 943, 947, 948, 950, 951, 952, 953, 955, 964, 965, 973, 974, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 994, 996, 997, 1002, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1035, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1059, 1060, 1066, 1067, 1068, 1070, 1071, 1072, 1084, 1087, 1090, 1095, 1096, 1097, 1098, 1100, 1103, 1104, 1105, 1106, 1107, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1126, 1127, 1128, 1129, 1136, 1148, 1152, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1190, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1244, 1245, 1248, 1252, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1265, 1266, 1269, 1270, 1271, 1280, 1289, 1290, 1291, 1292, 1293, 1295, 1299, 1302, 1307], "parameteris": 131, "parametr": 798, "paramount": [835, 899], "parent": [36, 197, 313], "parenthes": 18, "parquet": [41, 45, 141, 142, 148, 313, 798, 899], "parquetcompress": [41, 313], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 141, 143, 146, 147, 148, 175, 203, 251, 252, 256, 259, 276, 287, 288, 292, 313, 381, 386, 481, 582, 596, 597, 635, 653, 661, 677, 678, 687, 695, 705, 707, 712, 715, 716, 717, 725, 738, 750, 752, 755, 764, 766, 768, 770, 776, 786, 802, 824, 850, 851, 854, 857, 862, 869, 870, 875, 899, 974, 1072, 1163, 1164, 1187, 1214, 1238, 1239, 1280, 1289], "parseerror": [678, 1239], "parser": [129, 134], "part": [116, 134, 173, 270, 275, 313, 582, 647, 665, 666, 786, 817, 844, 855, 871, 899, 909, 1208, 1226, 1227, 1303], "parti": [543, 786], "partial": [119, 129, 143, 313, 899], "particip": [36, 313], "particular": [129, 135, 137, 175, 190, 276, 313, 380, 381, 694, 695, 786, 802, 862, 899, 964, 1045, 1265, 1280], "partit": [41, 132, 133, 141, 144, 146, 148, 149, 217, 236, 313, 582, 786], "partition_bi": [41, 130, 217, 313, 582, 786], "partition_chunk_size_byt": [41, 313], "partition_col": [41, 132, 313], "partition_df": 130, "partition_num": 132, "partition_on": 132, "partition_rang": 132, "partitioned_object": [41, 313], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 146, 149, 152, 154, 157, 159, 161, 163, 175, 181, 185, 203, 204, 206, 219, 222, 236, 237, 238, 242, 245, 251, 256, 259, 264, 272, 275, 276, 283, 287, 292, 313, 357, 381, 404, 414, 426, 429, 458, 478, 528, 543, 544, 582, 586, 596, 597, 602, 626, 635, 661, 668, 669, 670, 695, 704, 712, 714, 738, 768, 776, 782, 786, 802, 814, 824, 825, 827, 830, 835, 843, 846, 848, 850, 854, 855, 857, 862, 869, 874, 875, 882, 899, 903, 904, 942, 992, 1002, 1021, 1053, 1067, 1090, 1121, 1136, 1163, 1164, 1187, 1222, 1229, 1230, 1231, 1252, 1262, 1280, 1293, 1307], "pass_nam": [544, 786], "pass_name_to_appli": [786, 903], "password": [129, 132, 135, 137], "past": [32, 313, 835, 899], "pat": [650, 1211], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 253, 313, 399, 556, 559, 625, 654, 786, 813, 852, 855, 899, 903, 1185, 1215, 1280, 1310], "pathlib": [31, 33, 37, 38, 41, 143, 313], "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 216, 313, 551, 639, 640, 641, 644, 646, 647, 648, 649, 650, 659, 660, 661, 667, 882, 905, 1182, 1184, 1200, 1201, 1202, 1205, 1207, 1208, 1209, 1210, 1211, 1220, 1221, 1222, 1228, 1280, 1302], "paya": 674, "pct": 159, "pct_chang": [786, 1280], "pd": [117, 121, 693, 765, 786, 1262, 1263, 1280, 1290, 1307], "pd_df": 121, "pd_frame": 765, "pd_seri": 121, "pdsh": [125, 130], "pea": 651, "peak": [247, 313, 584, 585, 786, 1153, 1154, 1280], "peak_max": [786, 1280], "peak_min": [786, 1280], "pear": [651, 663, 674, 1212, 1224, 1235], "pearson": [181, 313, 493, 632, 718, 786, 1087, 1194, 1280], "penalti": [673, 675, 676, 1234, 1236, 1237], "per": [14, 33, 36, 42, 134, 157, 159, 175, 202, 234, 235, 238, 252, 259, 276, 288, 302, 304, 305, 313, 349, 381, 507, 510, 512, 543, 544, 565, 566, 568, 570, 572, 573, 635, 695, 700, 712, 786, 802, 851, 857, 862, 870, 885, 887, 888, 899, 903, 934, 1100, 1103, 1105, 1269, 1280], "percent": [583, 786, 1152, 1280], "percentag": [156, 159, 163, 583, 786, 1152, 1280], "percentil": [183, 313, 812, 899, 987, 1280], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 139, 141, 143, 146, 147, 148, 172, 195, 203, 204, 219, 220, 223, 241, 245, 247, 248, 271, 299, 313, 372, 376, 379, 465, 535, 543, 544, 582, 602, 640, 649, 655, 656, 661, 673, 675, 676, 786, 821, 825, 830, 831, 848, 857, 872, 873, 899, 956, 960, 963, 1136, 1201, 1210, 1216, 1217, 1222, 1234, 1236, 1237, 1261, 1280], "perhap": [277, 313], "period": [129, 130, 143, 204, 245, 313, 430, 443, 451, 453, 454, 583, 602, 727, 728, 730, 731, 773, 774, 786, 825, 848, 899, 1022, 1035, 1046, 1048, 1049, 1152, 1280], "persist": 1295, "phase": [34, 281, 313], "philadelphia": [659, 660], "phone": [681, 1242], "physic": [46, 59, 85, 129, 130, 219, 238, 313, 693, 786, 803, 829, 830, 899, 968, 1263, 1280], "pi": [10, 398, 786, 976, 978, 1192, 1253, 1280, 1300, 1304], "pick": [160, 776], "pickl": [399, 786, 813, 899], "pip": [404, 714, 992], "pipe": [313, 786, 899], "pipelin": [134, 275, 313], "pitfal": 101, "pivot": [281, 313, 905], "pivot_long": [280, 313, 865, 899], "pivot_wid": [238, 313], "pivotagg": [238, 313], "pixel": [36, 313], "pk": [448, 786, 1041, 1280], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 786, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 904, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1280, 1285, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1310], "pl_frame": 765, "place": [10, 11, 33, 42, 186, 192, 208, 209, 238, 243, 248, 259, 285, 313, 317, 338, 350, 358, 514, 530, 634, 635, 712, 786, 857, 899, 914, 923, 935, 943, 1052, 1107, 1123, 1160, 1196, 1280], "placehold": 737, "plai": [12, 717], "plain": [817, 899], "plan": [219, 221, 313, 399, 786, 803, 807, 813, 817, 829, 830, 852, 855, 899, 1309], "plane": [710, 711], "platform": 151, "ple": 1302, "pleas": [121, 131, 132, 195, 204, 229, 313, 317, 452, 719, 732, 786, 821, 825, 839, 899, 1047, 1280], "plenti": 905, "plot": [313, 844, 855, 899, 1280], "plu": [397, 540, 786, 986, 1133, 1157, 1280, 1301], "plugin": [0, 786, 798], "plugin_path": 903, "point": [10, 11, 36, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 193, 204, 220, 221, 260, 270, 275, 281, 282, 313, 316, 317, 385, 396, 397, 402, 430, 431, 459, 464, 465, 476, 488, 489, 523, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 762, 763, 786, 807, 808, 817, 819, 825, 831, 835, 846, 858, 866, 899, 969, 971, 985, 986, 990, 1022, 1023, 1054, 1058, 1068, 1116, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1259, 1264, 1280, 1285, 1307], "poison": [574, 575, 786, 1145, 1146, 1280], "pola": 313, "polar": [1, 313, 316, 317, 785, 786, 792, 798, 899, 903, 904, 905, 1280, 1284, 1285, 1306, 1307, 1309], "polars_df": 1307, "polars_file_cache_ttl": [139, 143, 146, 147], "polars_hypothesis_profil": [162, 164], "polars_max_thread": 165, "polars_seri": 1307, "polars_verbos": [807, 899], "polarsdatafram": 172, "polarsdataset": [275, 313], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 176, 223, 270, 275, 313, 382, 455, 543, 544, 596, 597, 653, 734, 746, 747, 748, 758, 761, 777, 782, 786, 804, 899, 905, 965, 1136, 1163, 1164, 1214, 1280], "polarsintegertyp": [709, 742, 743], "polarstemporaltyp": [673, 1234], "polarstyp": 55, "pool": [14, 54, 165, 166, 808, 899], "poor": 131, "pop2": [219, 313, 830, 899], "popul": [219, 313, 830, 899], "port": [34, 129, 131, 132, 135, 137, 313], "portion": 1302, "pos_a": 1302, "posit": [36, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 173, 185, 191, 203, 236, 251, 252, 256, 259, 279, 287, 288, 292, 313, 357, 451, 453, 454, 455, 528, 582, 587, 589, 626, 635, 648, 650, 659, 660, 678, 687, 710, 711, 712, 715, 716, 717, 734, 764, 768, 782, 786, 814, 818, 824, 850, 851, 854, 857, 864, 869, 870, 875, 899, 905, 942, 1046, 1048, 1049, 1121, 1155, 1157, 1187, 1209, 1239, 1280, 1308], "position": 1280, "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 203, 216, 223, 247, 278, 299, 313, 541, 544, 553, 603, 666, 699, 786, 807, 824, 857, 863, 899, 1136, 1169, 1227, 1280], "post": 47, "postgresql": [34, 131, 132, 313, 582, 786, 1305], "potenti": [101, 103, 134, 143, 146, 147, 216, 246, 248, 313, 565, 810, 812, 816, 849, 868, 899, 903], "pow": [786, 1280, 1300], "pow_n": 49, "power": [766, 1155, 1280, 1301], "powersofn": 49, "pre": [535, 544, 589, 758, 761, 777, 786, 1157, 1280], "preced": [159, 905], "precis": [10, 11, 33, 36, 42, 63, 131, 216, 247, 248, 267, 270, 275, 313, 406, 677, 899, 905, 994, 1238], "predefin": [238, 313], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 195, 214, 220, 246, 313, 461, 702, 736, 776, 786, 807, 808, 817, 821, 831, 835, 844, 846, 855, 872, 873, 899, 1056, 1182, 1184, 1280], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 807, 808, 817, 835, 844, 855, 899], "predict": [238, 241, 283, 313], "prefer": [129, 130, 133, 134, 143, 164, 175, 192, 216, 223, 246, 247, 276, 299, 313, 380, 381, 455, 544, 694, 695, 786, 802, 862, 899, 964, 1052, 1136, 1265, 1280, 1290, 1310], "prefilt": 148, "prefix": [35, 129, 130, 143, 168, 313, 324, 371, 551, 566, 569, 570, 572, 573, 667, 670, 671, 683, 786, 905, 955, 1228, 1232, 1244], "prefix_": 569, "prefix_a": 569, "prefix_b": 569, "prefix_field": [567, 571], "presenc": [735, 744, 905], "present": [119, 159, 199, 313, 485, 669, 670, 786, 855, 899], "preserv": [187, 195, 203, 218, 220, 223, 271, 272, 313, 402, 403, 404, 423, 424, 461, 506, 582, 596, 629, 645, 786, 815, 821, 829, 831, 899, 990, 991, 992, 1056, 1099, 1163, 1191, 1206, 1262, 1280], "pressur": [45, 129, 130, 139, 141, 143, 147, 148, 627, 786, 899, 1188, 1280], "presum": [543, 786], "prev_pow2": 49, "prevent": [271, 313, 324, 394, 395, 565, 689, 786, 899, 983, 984, 1251, 1280], "preview": [202, 313], "previou": [49, 168, 313, 316, 404, 565, 566, 568, 570, 572, 573, 583, 686, 786, 992, 1152, 1280, 1285], "previous": [2, 3], "price": [313, 316, 1310], "primari": [134, 1307, 1310], "primarili": 1, "primit": [35, 313, 485, 786], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 188, 202, 203, 217, 221, 269, 291, 313, 478, 557, 727, 730, 786, 807, 827, 899, 905, 1077, 1258, 1280, 1310], "prior": [121, 313, 316, 1280, 1285], "prioriti": 160, "probabl": [448, 589, 786, 1041, 1157, 1280], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 247, 313, 807, 808, 899], "process_index": [270, 313], "produc": [2, 3, 159, 163, 218, 313, 346, 504, 553, 747, 829, 835, 899, 931, 1097], "product": [47, 181, 218, 313, 394, 401, 786, 829, 899, 983, 989, 1280], "profil": [162, 164, 807, 899], "programmat": [183, 313, 812, 899], "progress": [63, 65], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 634, 635, 786, 807, 808, 817, 835, 844, 846, 855, 899], "projection_pushdown": [42, 43, 44, 45, 53, 54, 807, 808, 817, 835, 844, 855, 899], "prompt": 123, "propag": [350, 450, 514, 574, 575, 577, 638, 652, 716, 717, 786, 935, 1043, 1107, 1145, 1146, 1148, 1199, 1213, 1280], "propagate_nan": 718, "proper": [220, 313, 831, 899], "properti": [36, 172, 179, 180, 188, 196, 207, 250, 255, 286, 290, 313, 316, 317, 809, 810, 816, 849, 868, 873, 899, 904, 905, 1040, 1057, 1144, 1186, 1280, 1285, 1310], "proport": [700, 786, 1269, 1280], "protocol": [35, 117, 132, 172, 313], "prototyp": 782, "provid": [34, 36, 129, 130, 132, 133, 134, 139, 141, 143, 144, 145, 146, 147, 148, 159, 163, 195, 199, 214, 260, 270, 313, 316, 367, 368, 455, 476, 535, 543, 544, 642, 643, 646, 653, 654, 669, 670, 671, 672, 738, 768, 786, 798, 807, 821, 858, 874, 896, 899, 951, 952, 1068, 1086, 1136, 1203, 1204, 1207, 1214, 1215, 1259, 1280, 1293, 1299, 1302, 1307, 1310], "prune": [141, 146, 148, 835, 899], "public": [132, 313, 786, 798, 899, 1280, 1306], "pulp": 1289, "pure": [36, 313, 550], "purpos": [564, 786, 899], "push": [143, 146, 147, 148, 149], "pushdown": [42, 43, 44, 45, 53, 54, 807, 808, 817, 835, 844, 846, 855, 872, 873, 899, 1182, 1184, 1280], "put": [33, 42, 313, 317, 899], "pwd": 131, "py": 145, "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 265, 271, 272, 313, 765, 798, 1255, 1261, 1262, 1280, 1290, 1292, 1307], "pyarrow_opt": [41, 133, 141, 144, 313], "pyarrow_t": 1307, "pycapsul": [171, 908], "pycapsuleinterfac": [171, 908], "pydant": 151, "pyiceberg": [145, 151], "pyodbc": [34, 313], "pyodbc_uri": [34, 313], "pyspark": 165, "pytest": [152, 154], "python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 172, 216, 223, 247, 248, 267, 299, 313, 399, 404, 408, 465, 543, 544, 648, 714, 727, 728, 730, 731, 773, 774, 776, 786, 792, 813, 882, 899, 904, 992, 996, 1006, 1007, 1008, 1012, 1136, 1209, 1260, 1280, 1284, 1306], "pythondatatyp": [56, 72, 904], "pythonliter": [1137, 1138, 1139, 1140, 1182, 1280], "pytorch": [275, 313, 1264, 1280], "q": [248, 313, 768, 1280, 1285, 1293], "q1": [36, 313], "q2": [36, 313], "q3": [36, 313], "q4": [36, 313], "qcut": [397, 786, 986, 1280], "qhoo": 1310, "qmark": 131, "qqr": 905, "quad": [452, 786, 1047, 1280], "qualifi": [34, 313], "quantifi": [647, 1208], "quantil": [313, 589, 612, 613, 786, 899, 1157, 1174, 1280], "quarter": [204, 219, 245, 283, 313, 426, 430, 443, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035, 1303], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 192, 221, 237, 260, 313, 543, 544, 654, 765, 786, 807, 808, 817, 844, 855, 858, 872, 873, 874, 882, 891, 899, 1052, 1136, 1215, 1280, 1289, 1290, 1292, 1296, 1306, 1308, 1309], "quick": [782, 987, 1280, 1310], "quit": [219, 313, 830, 899], "quot": [33, 34, 42, 129, 130, 132, 143, 313, 681, 899, 1242], "quote_char": [33, 42, 129, 130, 143, 313, 899], "quote_plu": 132, "quote_styl": [33, 42, 313, 899], "quotes_titl": 681, "quotient": 1301, "r": [129, 130, 143, 313, 586, 641, 645, 646, 647, 648, 659, 660, 786, 905, 1202, 1206, 1207, 1208, 1209, 1220, 1221, 1235, 1293, 1302], "r1": 55, "r2": 55, "r3": 55, "rab": [639, 662, 1200, 1223, 1298], "rad": 1304, "radian": [398, 710, 786, 1300], "radix": [678, 1239], "rai": [710, 711], "raini": [659, 660, 1220, 1221], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 141, 143, 148, 152, 154, 172, 199, 238, 246, 271, 313, 349, 367, 404, 429, 510, 512, 553, 587, 589, 597, 639, 642, 650, 673, 675, 676, 678, 680, 729, 746, 786, 874, 934, 951, 992, 1021, 1103, 1105, 1155, 1157, 1164, 1200, 1203, 1211, 1234, 1236, 1237, 1239, 1241, 1261, 1280], "raise_if_empti": [129, 130, 134, 140, 143], "raise_if_undetermin": 553, "raise_on_fail": 874, "raker": 126, "ram": [42, 43, 44, 45, 899], "ran": [786, 903], "random": [36, 37, 135, 150, 157, 205, 249, 313, 474, 523, 592, 623, 628, 700, 786, 798, 1066, 1116, 1159, 1181, 1190, 1269, 1280], "randomli": 158, "rang": [17, 36, 131, 132, 183, 190, 204, 217, 313, 329, 398, 404, 412, 422, 427, 428, 430, 443, 444, 479, 709, 714, 716, 726, 727, 728, 729, 730, 731, 742, 743, 772, 773, 774, 786, 812, 825, 899, 905, 987, 992, 1000, 1014, 1019, 1020, 1022, 1035, 1036, 1045, 1152, 1280, 1302], "rank": [338, 507, 712, 718, 733, 786, 923, 1100, 1280], "rankmethod": [592, 786, 1159, 1280], "rare": [405, 993], "rather": [219, 313, 467, 543, 557, 589, 601, 683, 786, 830, 899, 1157, 1168, 1244, 1280], "raw": 132, "raw_output": [855, 899], "re": [199, 204, 215, 278, 280, 313, 423, 424, 432, 435, 825, 863, 865, 899, 1015, 1016, 1024, 1027, 1307], "reach": [657, 658, 683, 1218, 1219, 1244], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 313, 399, 467, 776, 786, 813, 899, 1052, 1280], "read_arrow_batches_from_odbc": 131, "read_clipboard": [32, 313], "read_csv": [128, 134, 143], "read_csv_batch": 125, "read_databas": 132, "read_database_uri": 131, "read_excel": 140, "read_ndjson": 138, "read_od": 134, "read_opt": 134, "read_parquet": 148, "read_tabl": 141, "readabl": 782, "reader": [41, 45, 125, 129, 130, 135, 137, 141, 313, 899], "readi": 892, "readthedoc": [36, 313], "real": [647, 1208], "realli": [396, 640, 661, 786, 985, 1201, 1222, 1280], "realloc": [139, 143, 146, 147, 192, 313, 1052, 1280], "rearrang": [223, 313], "reason": [165, 183, 313, 535, 543, 786, 812, 899], "receiv": [47, 131, 143, 223, 237, 299, 313, 544, 586, 786, 843, 899, 1310], "recent": [152, 153, 154, 155, 271, 313, 583, 597, 786, 1152, 1164, 1261, 1280, 1292, 1307], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 192, 313, 786, 972, 1052, 1062, 1142, 1280], "recognis": [15, 16, 20, 905], "recommend": [36, 165, 183, 216, 221, 237, 313, 803, 812, 899, 905], "record": [33, 38, 42, 126, 137, 149, 313, 899], "record_batch": [217, 313], "recordbatch": [116, 217, 313, 765, 1290, 1292, 1307], "recurs": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "red": [46, 84, 85, 299, 700, 786, 882, 1269, 1280], "redempt": 1289, "redshift": 132, "reduc": [45, 129, 130, 139, 141, 143, 146, 147, 148, 247, 300, 301, 303, 306, 313, 627, 723, 736, 786, 883, 884, 886, 889, 899, 1138, 1156, 1188, 1251, 1280], "reduct": [197, 313, 544, 786], "ref": [646, 648, 1207, 1209], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 184, 313, 317, 399, 432, 435, 592, 646, 659, 660, 673, 675, 676, 680, 786, 813, 899, 1024, 1027, 1159, 1220, 1221, 1234, 1236, 1237, 1241, 1280], "referenc": [36, 313, 543, 686, 786, 1290, 1307], "refin": 134, "reg": 126, "regard": [129, 718], "regardless": [121, 175, 203, 219, 276, 313, 381, 409, 654, 695, 776, 786, 802, 830, 862, 899, 997, 1215], "regex": [455, 550, 551, 639, 641, 646, 647, 648, 650, 659, 660, 684, 734, 786, 905, 1200, 1202, 1207, 1208, 1209, 1211, 1220, 1221], "regexp_lik": 1300, "region": [36, 145, 313], "regist": [1, 48, 49, 50, 51, 162, 164, 260, 313, 786, 858, 899, 903, 1289, 1290, 1292, 1293, 1294, 1295, 1307, 1309], "register_dataframe_namespac": [1, 49, 50, 51], "register_expr_namespac": [1, 48, 50, 51], "register_glob": [1291, 1293, 1295, 1307], "register_lazyframe_namespac": [1, 48, 49, 51], "register_mani": [1291, 1292, 1295], "register_plugin": 786, "register_plugin_funct": [786, 903], "register_series_namespac": [1, 48, 49, 50], "registr": [260, 313, 765, 798, 858, 899, 1295, 1307], "regrid": [479, 786], "regular": [124, 216, 246, 247, 283, 290, 313, 455, 639, 640, 641, 646, 647, 648, 649, 650, 659, 660, 661, 714, 734, 782, 786, 873, 899, 905, 1200, 1201, 1202, 1207, 1208, 1209, 1210, 1211, 1220, 1221, 1222, 1305], "reinterpret": [786, 1280], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 313, 426, 451, 453, 454, 700, 786, 1018, 1046, 1048, 1049, 1269, 1280], "relat": [131, 168, 659, 660, 905, 1220, 1221, 1296], "releas": [54, 544, 786, 808, 899, 1310], "release_year": 1289, "relev": 55, "reliabl": [84, 85], "remain": [129, 130, 143, 187, 190, 195, 238, 313, 402, 403, 461, 506, 596, 665, 666, 786, 815, 821, 835, 899, 990, 991, 1045, 1056, 1099, 1163, 1226, 1227, 1280, 1295], "remaind": [666, 1227, 1301], "remap": 86, "remot": [129, 130, 135, 137], "remov": [4, 129, 130, 143, 172, 185, 268, 313, 455, 566, 668, 669, 670, 671, 672, 734, 786, 814, 899, 1229, 1230, 1231, 1232, 1233, 1256, 1280, 1309], "removes_pronoun": 661, "renam": [1, 119, 129, 130, 166, 203, 251, 252, 287, 288, 292, 294, 313, 324, 467, 558, 559, 565, 566, 567, 568, 570, 572, 573, 686, 687, 764, 768, 786, 824, 850, 851, 869, 870, 875, 877, 899, 911, 1211, 1248, 1257, 1280, 1307], "rename_field": [665, 666, 1226, 1227], "render": [855, 899], "render_as_str": 131, "reoconstruct": [248, 313], "repeat": [135, 146, 593, 595, 758, 777, 786], "repeat_bi": 786, "replac": [34, 35, 129, 130, 143, 193, 194, 243, 277, 280, 287, 288, 313, 316, 408, 429, 459, 543, 544, 597, 660, 661, 676, 786, 819, 865, 869, 870, 899, 996, 1021, 1054, 1164, 1182, 1184, 1221, 1222, 1237, 1280, 1285, 1300], "replace_al": [597, 659, 786, 1163, 1164, 1220, 1280], "replace_column": 313, "replace_strict": [596, 786, 1163, 1280], "replace_time_zon": [405, 411, 413, 998, 999, 1025], "replace_with": [661, 1222], "replic": [693, 786, 1263, 1280], "report": 131, "repr": 123, "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 238, 260, 261, 270, 271, 284, 291, 313, 465, 488, 489, 531, 537, 543, 637, 651, 656, 663, 674, 701, 704, 718, 720, 732, 734, 746, 747, 748, 757, 762, 763, 767, 775, 782, 786, 858, 859, 867, 899, 905, 1182, 1198, 1212, 1217, 1224, 1235, 1261, 1270, 1280, 1307], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 253, 269, 313, 407, 412, 415, 417, 418, 419, 420, 421, 422, 425, 427, 428, 431, 444, 445, 447, 556, 693, 786, 817, 833, 852, 899, 968, 995, 1000, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1023, 1036, 1037, 1039, 1258, 1263, 1280], "requested_schema": [171, 908], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 181, 246, 270, 271, 272, 275, 313, 363, 451, 453, 454, 536, 544, 582, 627, 673, 675, 676, 697, 761, 786, 810, 816, 857, 868, 899, 948, 1044, 1046, 1048, 1049, 1129, 1188, 1234, 1236, 1237, 1261, 1262, 1266, 1280], "require_al": 905, "rerais": [54, 808, 899], "rerun": [192, 313, 1052, 1280], "resampl": [204, 313, 825, 899], "reset": [4, 168], "reset_index": [121, 204, 313, 825, 899], "reshap": [238, 271, 313, 508, 786, 1101, 1280], "resolv": [408, 809, 810, 816, 849, 868, 899], "resourc": [874, 903], "respect": [36, 313, 640, 649, 661, 905, 1201, 1210, 1222, 1264, 1280], "respons": [132, 230, 313, 840, 899], "rest": [681, 1242], "restor": [168, 313, 316, 1280, 1285], "restore_default": 168, "restrict": [30, 666, 1227], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 192, 195, 204, 205, 218, 219, 220, 234, 238, 245, 248, 253, 254, 256, 270, 271, 272, 283, 290, 292, 298, 313, 404, 430, 432, 435, 443, 451, 452, 453, 454, 458, 465, 474, 481, 493, 534, 535, 543, 544, 556, 582, 587, 589, 596, 597, 598, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 625, 626, 645, 664, 665, 676, 696, 700, 722, 723, 727, 729, 730, 731, 732, 746, 747, 758, 761, 762, 763, 765, 777, 786, 803, 807, 812, 821, 825, 829, 830, 831, 835, 844, 848, 852, 853, 854, 873, 875, 881, 892, 893, 899, 905, 914, 1022, 1024, 1027, 1035, 1046, 1048, 1049, 1052, 1053, 1066, 1072, 1087, 1127, 1136, 1155, 1157, 1163, 1164, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1185, 1187, 1206, 1225, 1226, 1237, 1261, 1262, 1269, 1280, 1290, 1296, 1307, 1308, 1310], "resultset": 131, "retri": [139, 141, 143, 146, 147, 148], "retriev": [199, 270, 313, 343, 344, 500, 501, 684, 757, 928, 929, 1093, 1094, 1245, 1259, 1280, 1296], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 165, 166, 170, 173, 175, 177, 180, 181, 182, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 221, 222, 223, 225, 227, 232, 233, 234, 236, 237, 238, 242, 245, 246, 247, 248, 249, 253, 260, 263, 264, 270, 271, 272, 275, 276, 277, 278, 283, 286, 287, 288, 294, 296, 298, 299, 302, 307, 313, 325, 327, 330, 331, 332, 333, 334, 335, 338, 339, 343, 344, 345, 347, 349, 350, 361, 366, 367, 368, 369, 370, 371, 380, 381, 387, 388, 389, 390, 391, 397, 398, 404, 405, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 452, 457, 465, 468, 469, 471, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 497, 500, 501, 503, 508, 510, 512, 513, 514, 516, 523, 533, 534, 541, 543, 544, 554, 556, 557, 562, 586, 589, 591, 595, 596, 597, 598, 600, 601, 623, 624, 629, 630, 631, 638, 639, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 662, 663, 664, 665, 666, 674, 678, 683, 690, 691, 692, 694, 695, 696, 698, 699, 700, 703, 704, 709, 710, 711, 712, 713, 714, 719, 721, 726, 727, 728, 729, 730, 731, 732, 735, 738, 740, 742, 743, 744, 745, 746, 747, 748, 758, 761, 764, 765, 768, 771, 772, 773, 774, 776, 777, 786, 802, 805, 807, 808, 810, 811, 812, 816, 817, 823, 825, 826, 829, 833, 834, 835, 843, 844, 846, 848, 852, 855, 861, 862, 863, 868, 869, 870, 877, 879, 881, 885, 890, 892, 899, 903, 904, 905, 907, 909, 912, 913, 914, 921, 922, 924, 925, 926, 927, 928, 929, 930, 932, 934, 935, 946, 948, 950, 951, 952, 954, 964, 967, 969, 973, 979, 980, 986, 987, 992, 993, 995, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1045, 1047, 1051, 1052, 1060, 1067, 1068, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1101, 1103, 1105, 1106, 1107, 1109, 1116, 1126, 1127, 1134, 1136, 1141, 1150, 1157, 1163, 1164, 1165, 1166, 1167, 1168, 1181, 1183, 1191, 1199, 1200, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1235, 1239, 1244, 1252, 1255, 1262, 1265, 1267, 1268, 1269, 1271, 1280, 1289, 1290, 1294, 1296, 1297, 1298, 1299, 1301, 1302, 1305, 1307, 1308, 1309, 1310], "return_as_str": [202, 313, 557], "return_dtyp": [36, 223, 313, 543, 544, 596, 597, 703, 747, 748, 786, 1136, 1163, 1164, 1280], "return_typ": [270, 275, 313], "returns_scalar": [543, 544, 748, 786, 903], "reus": [53, 54, 807, 808, 817, 844, 855, 899], "rev": [220, 313, 831, 899], "revers": [175, 190, 276, 313, 381, 391, 392, 393, 394, 395, 566, 568, 570, 695, 721, 786, 802, 862, 899, 980, 981, 982, 983, 984, 1280, 1298, 1300], "reverse_": 568, "reverse_a": 568, "reverse_b": 568, "revert": [7, 9, 10], "rhap": 649, "rhapsodi": 649, "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 204, 218, 219, 245, 282, 313, 397, 451, 452, 453, 454, 481, 524, 525, 526, 527, 589, 602, 605, 607, 609, 611, 613, 616, 618, 620, 624, 632, 715, 727, 728, 730, 731, 773, 774, 786, 825, 829, 830, 848, 866, 899, 986, 1046, 1047, 1048, 1049, 1072, 1117, 1118, 1119, 1120, 1157, 1183, 1194, 1280, 1296, 1300], "right_on": [218, 219, 282, 313, 829, 830, 866, 899], "rightmost": [624, 786, 1183, 1280, 1302], "rld": [668, 670, 1231], "rle": [601, 786, 1168, 1280], "rle_id": [600, 786, 1280], "rle_id_a": [601, 786], "rle_id_ab": [601, 786], "rmm": 874, "rn": [129, 130, 143], "role": 132, "roll": [204, 313, 404, 423, 424, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 716, 762, 763, 786, 825, 899, 992, 1015, 1016, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1280], "rollback": [424, 1016], "rolled_forward": 404, "rollforward": [423, 1015], "rolling_map": [786, 1280], "rolling_max": [786, 1280], "rolling_max_bi": 786, "rolling_mean": [786, 1280], "rolling_mean_bi": 786, "rolling_median": [786, 1280], "rolling_median_bi": 786, "rolling_min": [786, 1280], "rolling_min_bi": 786, "rolling_quantil": [786, 1280], "rolling_quantile_bi": 786, "rolling_row_max": [605, 786], "rolling_row_mean": [607, 786], "rolling_row_median": [609, 786], "rolling_row_min": [611, 786], "rolling_row_quantil": [613, 786], "rolling_row_std": [616, 786], "rolling_row_sum": [618, 786], "rolling_row_var": [620, 786], "rolling_skew": [786, 1280], "rolling_std": [786, 1280], "rolling_std_bi": 786, "rolling_sum": [603, 786, 1169, 1280], "rolling_sum_bi": 786, "rolling_var": [786, 1280], "rolling_var_bi": 786, "rollinggroupbi": [245, 313], "rollinginterpolationmethod": [183, 240, 305, 313, 590, 612, 613, 759, 786, 812, 845, 888, 899, 987, 1158, 1174, 1280], "ronaldo": [646, 1207], "root": [133, 144, 384, 555, 565, 566, 568, 570, 572, 573, 636, 785, 786, 970, 1197, 1280, 1301], "round": [20, 36, 49, 123, 131, 313, 385, 389, 464, 622, 691, 786, 971, 1058, 1180, 1280, 1300], "round_sig_fig": [786, 1280], "round_str": 1022, "round_td": 1022, "rounded_corn": 20, "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 173, 175, 177, 187, 192, 195, 197, 198, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 229, 234, 238, 245, 248, 249, 258, 264, 267, 269, 270, 275, 276, 278, 280, 281, 282, 289, 290, 294, 296, 298, 299, 307, 313, 317, 338, 339, 347, 362, 381, 457, 465, 469, 475, 497, 508, 535, 582, 583, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 628, 633, 635, 645, 653, 690, 695, 709, 712, 717, 719, 736, 740, 742, 743, 745, 760, 762, 763, 771, 776, 786, 802, 805, 815, 821, 822, 823, 825, 826, 829, 830, 831, 832, 834, 835, 839, 856, 861, 862, 863, 865, 866, 872, 873, 877, 879, 881, 882, 890, 899, 909, 923, 932, 1051, 1052, 1060, 1067, 1090, 1101, 1152, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1195, 1206, 1214, 1252, 1280, 1289, 1296, 1298, 1308, 1310], "row_group": [141, 148], "row_group_s": [41, 45, 313, 899], "row_height": [36, 313], "row_index": [36, 313], "row_index_nam": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_nr": [289, 313, 872, 899], "row_tot": [36, 313], "rowname_col": [313, 317], "rows_by_kei": [216, 247, 313], "rowserror": [246, 313], "rowtotalsdefinit": [36, 313], "rpc": 131, "rstrip": 566, "rtol": [152, 153, 154, 155], "rtrim": 1300, "ru": 1302, "rule": [129, 141, 143, 148, 197, 313, 640, 661, 676, 1201, 1222, 1237], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 203, 221, 223, 252, 278, 288, 299, 313, 396, 507, 543, 544, 600, 601, 656, 764, 786, 807, 808, 817, 824, 835, 839, 844, 851, 855, 863, 870, 874, 899, 905, 985, 1100, 1136, 1167, 1168, 1217, 1280, 1307, 1310], "runtimeerror": [271, 313, 1261, 1280], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 223, 299, 313, 648, 899, 903, 1136, 1209, 1280], "s1": [46, 84, 85, 154, 155, 197, 313, 947, 1043, 1044, 1062, 1086, 1095, 1128, 1148, 1160, 1271, 1280], "s2": [1, 46, 84, 85, 154, 155, 197, 313, 947, 972, 989, 1043, 1044, 1062, 1077, 1086, 1095, 1128, 1142, 1148, 1160, 1271, 1280], "s3": [1, 35, 133, 144, 145, 148, 149, 313, 947, 1128, 1280], "s_bar": 1298, "s_dt": [1302, 1303], "s_dt1": 1302, "s_dt2": 1302, "s_foo": 1298, "s_from_str_repr": [1258, 1280], "s_head_5": 651, "s_head_n": 651, "s_tail_5": 674, "s_tail_n": 674, "s_tm": [1302, 1303], "safe": [594, 786, 1161, 1280], "sale": [582, 786], "sam": 12, "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 195, 203, 223, 238, 247, 248, 259, 278, 287, 288, 292, 299, 313, 321, 328, 361, 402, 403, 461, 465, 467, 468, 471, 534, 548, 552, 582, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 628, 635, 645, 655, 686, 782, 786, 807, 808, 821, 824, 833, 835, 857, 863, 869, 870, 875, 899, 905, 910, 946, 990, 991, 996, 1127, 1136, 1163, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1206, 1216, 1271, 1280, 1294, 1296, 1303], "samoa": [405, 993], "sampl": [129, 130, 299, 313, 628, 632, 786, 882, 1194, 1280, 1297], "sample_s": [129, 130], "sampled_from": 1310, "sandwich": [200, 313], "sat": [313, 316], "satisfi": [481, 786, 1072, 1280], "saturdai": [204, 313, 825, 899], "save": [2, 3, 6, 204, 219, 245, 283, 313, 405, 413, 426, 430, 443, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 732, 773, 774, 782, 786, 798, 825, 830, 848, 899, 1001, 1018, 1022, 1035], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [173, 214, 223, 246, 313, 543, 624, 651, 656, 663, 674, 746, 748, 786, 903, 909, 1086, 1183, 1212, 1217, 1224, 1235, 1280], "scale": [28, 63, 190, 313, 370, 544, 586, 677, 786, 905, 1045, 1238, 1280], "scale_negative_even": [586, 786], "scan": [119, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 313, 653, 899, 1214], "scan_csv": [42, 43, 44, 45, 129, 130, 899], "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "scatter": [313, 316, 1280], "scenario": 1280, "schedul": [54, 808, 899], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 177, 178, 179, 185, 188, 190, 217, 221, 223, 230, 234, 242, 271, 275, 313, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 411, 534, 535, 544, 553, 567, 569, 571, 653, 703, 768, 786, 798, 805, 806, 809, 810, 814, 816, 835, 840, 846, 868, 882, 899, 905, 975, 1214, 1280, 1289], "schema_mod": [35, 313], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 217, 271, 313, 899, 905], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 313, 899], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 146, 148, 313, 768, 835, 882, 899], "schindler": 1289, "scientif": [11, 33, 42, 313, 899], "scikit": [275, 313], "scipi": [493, 632, 786, 1087, 1194, 1280], "scope": [168, 797, 905, 1292, 1295, 1307], "score": [36, 238, 313], "script": [313, 316, 1280, 1285], "scroll": [36, 313], "sdiff": 526, "search": [219, 313, 535, 640, 649, 661, 830, 857, 899, 1201, 1210, 1222], "search_sort": [786, 1280], "searchsortedsid": [624, 786, 1183, 1280], "searchstrategi": [156, 158, 159, 160, 161, 163], "season": [659, 660], "sec": [1303, 1310], "second": [33, 42, 139, 143, 146, 147, 152, 153, 154, 155, 204, 219, 245, 283, 313, 415, 418, 420, 421, 425, 426, 430, 442, 443, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 659, 660, 673, 676, 729, 730, 731, 732, 772, 773, 774, 776, 786, 825, 830, 848, 899, 905, 1018, 1022, 1034, 1035, 1047, 1220, 1221, 1234, 1237, 1280, 1302, 1303, 1308, 1310], "second_part": [665, 666, 1226, 1227], "seconds_diff": 442, "secret": [145, 148], "section": [238, 313, 639, 646, 647, 650, 659, 660, 727, 728, 730, 731, 773, 774, 1200, 1207, 1208, 1211, 1220, 1221], "secur": [399, 786, 813, 899], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 159, 163, 170, 181, 195, 204, 218, 237, 238, 313, 317, 375, 377, 378, 386, 460, 493, 543, 632, 639, 646, 647, 650, 651, 659, 660, 674, 727, 728, 730, 731, 760, 773, 774, 782, 786, 807, 808, 821, 825, 874, 899, 903, 905, 907, 959, 961, 962, 968, 974, 1087, 1194, 1200, 1207, 1208, 1211, 1212, 1220, 1221, 1235, 1280, 1310], "seed": [150, 205, 249, 313, 474, 523, 592, 623, 628, 786, 1066, 1116, 1159, 1181, 1190, 1280], "seed_1": [205, 313, 474, 786, 1066, 1280], "seed_2": [205, 313, 474, 786, 1066, 1280], "seed_3": [205, 313, 474, 786, 1066, 1280], "seen": [365, 466, 786], "seen_group": 130, "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 173, 174, 214, 215, 219, 223, 234, 237, 246, 252, 258, 260, 273, 279, 283, 290, 313, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 352, 353, 354, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 380, 381, 383, 384, 385, 387, 388, 389, 390, 396, 398, 400, 401, 402, 403, 406, 408, 409, 417, 423, 424, 426, 429, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 451, 453, 454, 455, 456, 457, 458, 462, 464, 466, 469, 473, 474, 475, 476, 477, 478, 479, 482, 483, 486, 492, 493, 494, 496, 497, 507, 508, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 550, 560, 562, 564, 565, 567, 569, 571, 574, 575, 579, 580, 581, 582, 584, 585, 588, 590, 591, 592, 593, 594, 595, 598, 599, 600, 603, 614, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 645, 646, 647, 648, 649, 650, 652, 673, 684, 686, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 704, 706, 708, 711, 712, 713, 716, 718, 719, 720, 721, 724, 731, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 749, 751, 753, 754, 756, 757, 760, 761, 765, 766, 767, 768, 769, 771, 775, 782, 786, 801, 807, 810, 830, 843, 851, 856, 858, 864, 871, 873, 874, 899, 905, 909, 1021, 1059, 1100, 1182, 1184, 1195, 1215, 1234, 1280, 1289, 1290, 1291, 1292, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309], "select_from": [158, 161, 163], "select_seq": [313, 899], "selector": [0, 36, 176, 185, 187, 191, 229, 236, 238, 259, 268, 270, 275, 278, 280, 281, 313, 317, 455, 461, 550, 786, 798, 804, 814, 815, 818, 839, 857, 863, 865, 899], "selectortyp": [36, 313, 905], "self": [1, 48, 49, 50, 51, 53, 54, 260, 291, 313, 765, 786, 807, 808, 817, 844, 855, 858, 871, 899, 914, 956, 957, 958, 959, 960, 961, 962, 963, 965, 975, 980, 1052, 1056, 1069, 1134, 1136, 1149, 1153, 1154, 1160, 1163, 1164, 1182, 1184, 1185, 1196, 1268, 1271, 1280, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307], "semi": [126, 218, 313, 829, 899, 1296], "semigraph": 20, "sens": [129, 135, 137, 230, 283, 313, 582, 786, 840, 899], "sensit": [639, 647, 650, 659, 660, 1200, 1208, 1211, 1220, 1221], "sep": 126, "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 236, 238, 268, 277, 279, 313, 347, 350, 508, 514, 544, 645, 717, 722, 723, 786, 864, 899, 932, 935, 1101, 1107, 1206, 1250, 1256, 1280, 1302], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [36, 41, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 175, 183, 191, 192, 218, 219, 229, 234, 236, 237, 238, 248, 259, 268, 270, 275, 276, 280, 281, 282, 283, 313, 362, 381, 397, 468, 485, 535, 543, 586, 589, 596, 597, 635, 661, 671, 672, 686, 695, 712, 722, 723, 736, 738, 747, 748, 757, 760, 766, 786, 802, 812, 818, 829, 830, 839, 843, 857, 862, 865, 866, 899, 905, 947, 986, 987, 1052, 1128, 1157, 1163, 1164, 1222, 1248, 1280], "sequenti": [53, 54, 252, 288, 313, 807, 808, 817, 844, 851, 855, 870, 899], "ser": [998, 999, 1025], "seri": [0, 1, 11, 25, 36, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 154, 155, 159, 173, 186, 195, 197, 199, 201, 204, 205, 208, 209, 211, 213, 215, 225, 227, 232, 243, 245, 249, 263, 266, 269, 271, 273, 274, 293, 313, 328, 339, 362, 366, 383, 385, 429, 458, 461, 464, 468, 469, 478, 483, 485, 486, 488, 489, 490, 491, 502, 508, 510, 535, 541, 543, 544, 592, 593, 594, 595, 596, 597, 602, 603, 614, 625, 627, 651, 661, 673, 674, 675, 676, 680, 684, 694, 699, 709, 713, 722, 723, 727, 728, 730, 731, 736, 738, 742, 743, 746, 747, 748, 758, 760, 761, 764, 765, 768, 773, 774, 777, 786, 798, 821, 825, 848, 876, 899, 903, 1272, 1274, 1276, 1279, 1281, 1284, 1285, 1286, 1287, 1288, 1290, 1292, 1307, 1310], "serial": [39, 40, 184, 313, 399, 559, 786, 813, 899], "serializ": [786, 903], "serializationformat": [184, 253, 313, 399, 556, 786, 813, 852, 899], "seriesplot": [1280, 1285], "server": [34, 131, 132, 313], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "session": 131, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 172, 180, 187, 196, 199, 203, 205, 216, 219, 227, 229, 247, 249, 251, 253, 258, 263, 268, 270, 271, 275, 277, 278, 280, 281, 282, 287, 313, 325, 327, 349, 350, 362, 373, 375, 377, 378, 386, 397, 429, 446, 474, 485, 510, 512, 514, 523, 524, 525, 526, 527, 529, 535, 543, 544, 550, 556, 586, 589, 596, 597, 603, 604, 606, 608, 610, 612, 615, 617, 619, 623, 628, 632, 633, 638, 652, 653, 659, 660, 663, 668, 669, 670, 671, 672, 673, 675, 676, 680, 700, 704, 706, 709, 713, 717, 727, 728, 729, 730, 731, 732, 742, 743, 746, 758, 761, 762, 763, 768, 773, 774, 776, 777, 786, 798, 807, 808, 815, 817, 824, 829, 830, 835, 839, 850, 852, 856, 863, 865, 866, 869, 882, 899, 903, 912, 913, 934, 935, 947, 951, 957, 959, 961, 962, 974, 986, 1021, 1038, 1057, 1066, 1077, 1084, 1103, 1105, 1107, 1116, 1117, 1118, 1119, 1120, 1122, 1128, 1136, 1157, 1163, 1164, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1181, 1182, 1183, 1190, 1194, 1195, 1199, 1213, 1214, 1220, 1221, 1224, 1229, 1230, 1231, 1234, 1236, 1237, 1241, 1261, 1269, 1280, 1306, 1310], "set_": 168, "set_ascii_t": 168, "set_auto_structifi": [251, 287, 313, 850, 869, 899], "set_decimal_separ": 27, "set_environ": 162, "set_except": [54, 808, 899], "set_fmt_float": 30, "set_fmt_str_length": [640, 649, 661, 1201, 1222], "set_index": [204, 313, 825, 899], "set_legend": [36, 313], "set_sort": [245, 283, 313, 602, 786, 848, 899, 1280], "set_stat": 30, "set_streaming_chunk_s": [807, 899], "set_styl": [36, 313], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 47, "set_tbl_row": 168, "set_tbl_width_char": 661, "set_thousands_separ": 9, "set_titl": [36, 313], "set_verbos": 168, "setosa": [313, 316], "setup": 1310, "sever": [116, 118, 119, 120, 122, 138, 139, 147, 313, 899, 1310], "sfu": 132, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 249, 251, 253, 256, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 561, 562, 563, 564, 565, 566, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 786, 801, 802, 804, 805, 807, 808, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 905, 909, 910, 911, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 964, 965, 966, 968, 970, 971, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1141, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1188, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1250, 1252, 1253, 1254, 1256, 1257, 1258, 1263, 1265, 1266, 1267, 1268, 1269, 1271, 1280, 1289, 1290, 1291, 1292, 1294, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308], "share": [152, 153, 154, 155, 190, 313, 1045, 1280], "shawshank": 1289, "sheet": [36, 134, 140, 313], "sheet1": [36, 313], "sheet_id": [134, 140], "sheet_nam": [134, 140], "sheet_zoom": [36, 313], "sheetnam": [134, 140], "shift": [204, 313, 365, 400, 466, 505, 583, 716, 786, 825, 899, 988, 1098, 1152, 1280], "short": [152, 154], "shorten": [152, 154], "shorter": [129, 130, 143, 535, 742, 743], "shorthand": [313, 316, 1280, 1285], "should": [10, 34, 36, 41, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 185, 216, 219, 223, 246, 247, 248, 259, 267, 268, 279, 299, 313, 323, 396, 399, 446, 452, 455, 488, 489, 507, 544, 556, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 624, 632, 635, 700, 712, 732, 734, 746, 748, 762, 763, 776, 782, 786, 807, 813, 814, 829, 830, 835, 852, 857, 864, 899, 905, 985, 1038, 1047, 1100, 1136, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1183, 1194, 1269, 1280, 1290], "show": [30, 36, 183, 187, 202, 221, 235, 313, 476, 786, 812, 815, 844, 855, 899, 1068, 1280, 1294, 1306], "show_graph": [221, 313, 899], "show_plot": [844, 899], "shrink": [257, 313, 627, 786, 1188, 1189, 1280], "shrink_dtyp": [786, 1280], "shrink_to_fit": [313, 1280], "shuffl": [150, 249, 275, 299, 313, 523, 623, 786, 882, 1116, 1181, 1280], "side": [36, 204, 245, 313, 481, 524, 525, 526, 527, 602, 605, 607, 609, 611, 613, 616, 618, 620, 624, 727, 728, 730, 731, 773, 774, 786, 825, 848, 899, 903, 1072, 1117, 1118, 1119, 1120, 1183, 1280], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 426, 594, 659, 660, 683, 786, 905, 1018, 1161, 1220, 1221, 1244, 1280, 1300], "sign_x": 1301, "signed_integ": 905, "signific": [148, 216, 223, 313, 375, 377, 378, 544, 622, 786, 959, 961, 962, 1136, 1180, 1280], "significantli": [134, 223, 299, 313, 1136, 1280, 1310], "silenc": 91, "silent": [678, 1239], "similar": [32, 41, 128, 165, 197, 219, 256, 278, 280, 313, 357, 432, 435, 528, 582, 626, 687, 745, 776, 786, 830, 854, 863, 865, 899, 942, 1024, 1027, 1121, 1187, 1280], "similarli": [36, 119, 204, 219, 245, 283, 313, 426, 430, 443, 602, 605, 607, 609, 611, 613, 616, 618, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 1018, 1022, 1035], "simpl": [36, 234, 313], "simpler": 905, "simpli": [143, 722, 736], "simplifi": [42, 43, 44, 45, 53, 54, 807, 808, 817, 844, 855, 899], "simplify_express": [42, 43, 44, 45, 53, 54, 807, 808, 817, 844, 855, 899], "sin": [786, 1280, 1300], "sinc": [35, 61, 62, 77, 131, 133, 139, 143, 144, 146, 147, 156, 157, 158, 159, 163, 166, 174, 229, 271, 289, 294, 313, 411, 414, 446, 467, 543, 559, 596, 638, 645, 702, 711, 738, 786, 801, 817, 839, 857, 871, 872, 877, 899, 999, 1002, 1007, 1008, 1038, 1065, 1163, 1199, 1206, 1261, 1280], "sind": 1300, "sine": [332, 333, 543, 630, 631, 786, 917, 918, 1192, 1193, 1280, 1304], "singl": [36, 41, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 146, 157, 176, 185, 186, 187, 192, 199, 205, 214, 223, 236, 246, 248, 259, 270, 271, 313, 346, 386, 404, 426, 468, 471, 474, 504, 510, 543, 544, 593, 596, 598, 600, 635, 638, 651, 652, 656, 663, 674, 702, 712, 716, 717, 743, 747, 748, 766, 774, 782, 786, 804, 807, 808, 814, 815, 857, 899, 905, 931, 974, 992, 1018, 1052, 1066, 1097, 1103, 1160, 1163, 1165, 1167, 1199, 1212, 1213, 1217, 1224, 1235, 1255, 1261, 1280, 1291], "singlecolselector": 173, "singleindexselector": [173, 909], "sinh": [786, 1280], "sink_csv": 899, "sink_ipc": 899, "sink_ndjson": 899, "sink_parquet": 899, "site_id": [313, 317], "six": [624, 786], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 190, 281, 313, 598, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 709, 742, 743, 762, 763, 786, 807, 899, 1045, 1165, 1175, 1280, 1310], "sizeunit": [190, 313, 370, 954, 1045, 1280], "skew": [614, 786, 1175, 1280], "skewtest": [632, 786, 1194, 1280], "skip": [129, 130, 134, 141, 143, 148, 219, 281, 313, 830, 899, 1136, 1280, 1296], "skip_empty_lin": 134, "skip_nul": [544, 786, 1136, 1280], "skip_row": [129, 130, 143], "skip_rows_after_head": [129, 130, 143], "sklearn": [275, 313], "slice": [42, 43, 44, 45, 48, 53, 54, 190, 206, 217, 264, 313, 513, 533, 544, 553, 555, 603, 604, 606, 608, 610, 612, 615, 617, 619, 651, 674, 786, 807, 808, 817, 835, 844, 855, 899, 903, 1045, 1067, 1106, 1126, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1212, 1235, 1252, 1280, 1302], "slice_pushdown": [42, 43, 44, 45, 53, 54, 807, 808, 817, 835, 844, 855, 899], "slide": [396, 786, 985, 1280], "slightli": [42, 43, 44, 45, 87, 465, 786, 899, 1303], "slot": [396, 400, 505, 786, 985, 988, 1098, 1280], "slow": [103, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 148, 313, 396, 544, 603, 653, 786, 882, 899, 985, 1169, 1214, 1280], "slower": [120, 122, 134, 203, 223, 236, 283, 299, 313, 544, 748, 786, 824, 882, 899, 1136, 1280], "small": [11, 132, 430, 899, 1310], "smaller": [41, 45, 190, 313, 899, 1045, 1280], "smallest": [175, 276, 313, 380, 381, 695, 786, 802, 862, 899, 964, 1280, 1297, 1299], "smooth": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "snappi": [31, 41, 45, 313, 899], "snippet": [815, 899], "snowflak": [131, 132], "snowi": [659, 660], "so": [1, 36, 132, 143, 165, 202, 204, 220, 238, 245, 313, 339, 349, 399, 465, 481, 512, 535, 544, 602, 659, 660, 661, 668, 669, 670, 684, 786, 813, 825, 831, 848, 899, 905, 934, 1105, 1220, 1221, 1222, 1229, 1230, 1231], "softwar": [32, 128, 313], "solut": [34, 313], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 143, 172, 187, 238, 248, 271, 313, 317, 782, 815, 899, 1077, 1280, 1310], "some_account": [647, 1208], "some_t": 1309, "someth": [543, 786], "sometim": [732, 785], "somewher": [647, 1208], "sort": [47, 48, 175, 204, 219, 230, 237, 238, 245, 254, 276, 283, 296, 307, 313, 338, 380, 381, 452, 461, 544, 582, 602, 625, 635, 694, 695, 700, 702, 712, 727, 730, 748, 786, 802, 817, 825, 830, 840, 843, 844, 848, 853, 855, 862, 879, 890, 899, 905, 923, 964, 1047, 1084, 1185, 1265, 1266, 1269, 1280, 1296, 1308, 1310], "sort_bi": 786, "sort_column": [238, 313], "sorted_asc": [1057, 1280], "sorted_desc": [1057, 1280], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 786, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1280, 1285, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1307], "source_ac": 123, "source_actor_id": 123, "source_alia": [35, 313], "source_cha": 123, "source_channel_id": 123, "space": [20, 204, 313, 825, 899, 905], "spam": [226, 313, 647, 1208], "span": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "spanner": [313, 317], "spark": [41, 313], "sparklin": [36, 313], "speak": [632, 786, 1194, 1280], "spearman": 718, "speci": [313, 316], "special": [34, 129, 130, 132, 143, 275, 290, 313, 603, 647, 659, 660, 786, 873, 899, 1136, 1169, 1208, 1220, 1221, 1280], "specif": [1, 30, 35, 36, 37, 38, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 147, 176, 216, 218, 265, 270, 313, 432, 435, 673, 675, 676, 680, 700, 786, 804, 829, 899, 904, 905, 1024, 1027, 1234, 1236, 1237, 1241, 1255, 1259, 1269, 1280, 1296, 1307, 1310], "specifi": [33, 35, 36, 41, 42, 47, 88, 91, 94, 109, 112, 129, 134, 140, 141, 143, 148, 160, 175, 176, 190, 191, 194, 199, 203, 204, 218, 236, 238, 245, 246, 248, 251, 252, 256, 259, 270, 276, 279, 287, 288, 292, 313, 381, 386, 451, 453, 454, 455, 460, 582, 595, 597, 604, 606, 608, 610, 612, 615, 617, 619, 626, 635, 687, 695, 712, 715, 716, 717, 727, 728, 730, 731, 732, 734, 764, 768, 773, 774, 782, 786, 802, 804, 818, 820, 824, 825, 829, 848, 850, 851, 854, 857, 862, 864, 869, 870, 875, 899, 905, 974, 1045, 1046, 1048, 1049, 1055, 1164, 1187, 1259, 1280, 1296, 1309], "speed": [45, 254, 313, 544, 786, 853, 899, 1310], "speedup": [47, 148, 216, 223, 313, 544, 786, 1136, 1280], "split": [1, 36, 41, 48, 217, 313, 645, 665, 666, 1206, 1226, 1227], "split_by_column_dtyp": 50, "split_inclus": 664, "splitfram": [1, 48], "spreadsheet": [32, 128, 134, 140, 238, 313], "spring": [659, 660], "sql": [0, 34, 106, 107, 115, 131, 132, 218, 256, 313, 357, 528, 626, 745, 766, 786, 798, 854, 899, 942, 1121, 1187, 1280, 1289, 1290, 1292, 1294, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1308, 1309], "sql_expr": 1307, "sqlalchemi": [34, 131, 151, 313], "sqlcontext": [260, 313, 765, 858, 899, 1306], "sqlite": [34, 131, 313], "sqrt": [544, 632, 687, 786, 1136, 1194, 1280, 1300], "sqrt_x": 1301, "squar": [1, 51, 299, 493, 598, 636, 786, 882, 1087, 1165, 1197, 1280, 1301], "st": 1310, "stabil": [205, 313, 474, 786, 1066, 1280], "stabl": [141, 170, 181, 183, 184, 205, 249, 253, 260, 313, 399, 474, 540, 556, 786, 812, 813, 839, 852, 857, 858, 899, 907, 1066, 1280], "stack": [55, 208, 285, 313, 1290], "stai": [543, 628, 786], "standalon": [157, 905], "standard": [10, 36, 261, 270, 275, 313, 417, 453, 615, 616, 632, 637, 654, 767, 782, 786, 859, 899, 1005, 1043, 1048, 1148, 1194, 1198, 1215, 1280, 1297, 1310], "standardis": [36, 313], "start": [36, 127, 129, 130, 132, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 165, 198, 203, 204, 221, 258, 283, 289, 290, 313, 366, 369, 371, 404, 412, 422, 427, 430, 443, 444, 455, 469, 511, 529, 601, 605, 607, 609, 611, 613, 616, 618, 620, 633, 639, 644, 647, 658, 663, 667, 668, 670, 671, 674, 683, 709, 714, 722, 726, 727, 728, 729, 730, 731, 734, 736, 742, 743, 773, 774, 776, 782, 786, 823, 824, 825, 844, 856, 872, 873, 899, 905, 955, 992, 994, 997, 1000, 1002, 1003, 1009, 1011, 1013, 1014, 1017, 1019, 1022, 1026, 1035, 1036, 1060, 1104, 1122, 1168, 1195, 1205, 1208, 1219, 1224, 1228, 1229, 1231, 1235, 1244, 1280, 1296, 1302, 1310], "start_bi": [204, 313, 825, 899], "startbi": [204, 313, 825, 899], "starts_a": 1302, "starts_with": [48, 238, 313, 317, 366, 369, 550, 639, 644, 765, 858, 899, 905, 1205, 1300], "starts_with_expr": 371, "starts_with_lit": 371, "startup": [270, 313], "stat": [493, 632, 786, 1087, 1194, 1280], "state": [4, 5, 99, 722, 798, 817, 844, 855, 899, 1307], "statement": [582, 776, 786, 1294, 1308], "static": [82, 882], "statist": [41, 45, 129, 130, 141, 146, 148, 183, 313, 453, 454, 493, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 632, 786, 812, 899, 987, 1048, 1049, 1087, 1175, 1194, 1280], "std": [183, 313, 615, 616, 786, 812, 899, 987, 1176, 1280], "std_dev": [36, 313], "stddev": 1300, "stddev_samp": 1297, "stdev": [36, 313, 1297], "stdev_samp": 1297, "stdout": [168, 202, 313, 557], "step": [281, 313, 465, 709, 742, 743, 786], "steve": [230, 313, 840, 899], "still": [131, 132], "stock": [313, 316], "stop": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 605, 607, 609, 611, 613, 616, 618, 620, 786, 994, 997, 1002, 1003, 1009, 1011, 1013, 1017, 1022, 1026], "storag": [35, 129, 133, 135, 137, 144, 145, 313], "storage_opt": [35, 129, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 313], "store": [35, 129, 145, 192, 216, 247, 313, 383, 600, 786, 966, 1052, 1167, 1280], "store_id": [582, 786], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 175, 176, 180, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 197, 199, 200, 202, 203, 204, 206, 208, 211, 213, 214, 216, 218, 219, 220, 222, 224, 226, 228, 229, 230, 231, 233, 234, 236, 238, 240, 242, 243, 244, 245, 246, 247, 249, 253, 254, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 322, 323, 324, 345, 350, 362, 366, 367, 368, 369, 371, 381, 383, 391, 397, 399, 401, 409, 426, 429, 430, 432, 435, 443, 452, 455, 461, 463, 467, 468, 471, 478, 481, 502, 503, 512, 513, 514, 529, 533, 535, 544, 553, 555, 556, 557, 559, 566, 567, 568, 569, 570, 571, 572, 573, 579, 582, 586, 589, 595, 596, 597, 599, 601, 602, 605, 607, 609, 611, 613, 616, 618, 620, 627, 634, 635, 684, 685, 686, 695, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 782, 786, 793, 802, 804, 807, 808, 810, 812, 813, 814, 815, 817, 818, 821, 824, 825, 827, 829, 830, 831, 839, 840, 843, 844, 846, 847, 848, 852, 853, 855, 856, 857, 858, 862, 863, 864, 865, 866, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 903, 904, 905, 911, 930, 935, 947, 952, 965, 966, 986, 987, 997, 1018, 1021, 1022, 1024, 1027, 1035, 1047, 1055, 1057, 1095, 1096, 1107, 1128, 1144, 1145, 1146, 1157, 1162, 1163, 1164, 1184, 1245, 1247, 1248, 1256, 1257, 1258, 1259, 1269, 1280, 1286, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1302, 1303, 1307, 1308, 1310], "str_date": 1302, "str_timestamp": 1302, "strategi": [33, 42, 47, 55, 129, 148, 156, 157, 158, 159, 160, 161, 163, 194, 204, 218, 219, 233, 282, 313, 460, 535, 544, 786, 820, 825, 829, 830, 866, 899, 1055, 1128, 1280], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 203, 218, 278, 313, 543, 786, 807, 808, 817, 824, 829, 835, 839, 844, 855, 857, 863, 899], "streamabl": [835, 839, 865, 899], "strftime": [87, 435, 1027, 1300, 1302], "strict": [118, 119, 122, 126, 176, 185, 242, 313, 367, 382, 639, 642, 650, 673, 675, 676, 678, 680, 786, 804, 814, 846, 899, 905, 951, 965, 1200, 1203, 1211, 1234, 1236, 1237, 1239, 1241, 1280], "strictli": [33, 42, 46, 85, 313, 899], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 175, 176, 179, 184, 188, 190, 197, 199, 202, 203, 204, 219, 236, 238, 245, 248, 250, 251, 252, 253, 259, 269, 270, 276, 277, 281, 283, 287, 288, 292, 313, 322, 345, 350, 367, 368, 369, 381, 399, 426, 430, 432, 435, 443, 452, 455, 463, 467, 481, 514, 556, 557, 582, 586, 596, 597, 602, 605, 607, 609, 611, 613, 616, 618, 620, 635, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 687, 695, 703, 705, 707, 712, 715, 716, 717, 725, 727, 728, 730, 731, 737, 750, 752, 755, 764, 768, 770, 773, 774, 776, 782, 786, 798, 802, 804, 809, 813, 816, 817, 824, 825, 830, 848, 849, 850, 851, 852, 857, 862, 869, 870, 875, 899, 904, 905, 935, 951, 952, 953, 967, 1018, 1022, 1024, 1027, 1035, 1047, 1072, 1107, 1163, 1164, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1258, 1259, 1280, 1289, 1290, 1298, 1300, 1303, 1306, 1310], "stringcach": [84, 85, 218, 313, 798, 967, 968], "stringio": [138, 139, 467, 786], "strings_hex": 643, "strip": [28, 668, 669, 670, 671, 672, 1229, 1230, 1231, 1302], "strip_chars_end": [670, 672], "strip_chars_start": [669, 671], "strip_prefix": [670, 672], "strip_suffix": [669, 671], "strongli": [36, 165, 223, 246, 299, 313, 544, 786, 1136, 1280], "strpo": 1300, "strpost": 1302, "strptime": [245, 313, 429, 602, 786, 848, 899, 1021, 1300], "struct": [8, 112, 123, 234, 251, 274, 279, 287, 313, 362, 397, 476, 535, 543, 544, 567, 569, 571, 589, 600, 601, 648, 653, 665, 666, 700, 722, 723, 725, 747, 786, 850, 864, 869, 882, 899, 947, 986, 1128, 1136, 1157, 1167, 1209, 1214, 1226, 1227, 1261, 1280], "struct_col": [684, 686], "struct_seri": 882, "structarrai": [190, 313, 1045, 1280], "structfieldnotfounderror": 686, "structur": [36, 37, 38, 93, 96, 110, 126, 192, 237, 248, 265, 271, 313, 586, 786, 843, 899, 1052, 1255, 1280, 1307], "student": [238, 313], "style": [7, 20, 36, 131, 238, 313], "sub": [299, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 364, 514, 521, 786, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 944, 945, 949, 1107, 1114], "subarrai": [341, 342, 926, 927], "subclass": [1, 313], "subexpress": [53, 54, 807, 808, 817, 844, 855, 899], "subject": [41, 238, 313], "sublist": [349, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 515, 524, 529, 533, 535, 934, 1077, 1093, 1094, 1096, 1098, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1117, 1122, 1126, 1128, 1280], "subplan": [53, 54, 807, 808, 817, 844, 855, 899], "subsequ": [36, 141, 148, 241, 272, 313, 535, 765, 776, 817, 899, 1262, 1280, 1295], "subset": [187, 234, 278, 313, 815, 863, 899], "substr": [366, 369, 371, 639, 644, 650, 659, 660, 663, 664, 665, 666, 667, 905, 950, 953, 955, 1200, 1205, 1211, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1300], "subtl": [36, 313], "subtli": [465, 786], "subtract": [493, 688, 786, 1087, 1280], "succe": [129, 130, 143], "success": [641, 647, 1202, 1208], "successfulli": [807, 899], "suffix": [218, 219, 220, 251, 287, 292, 313, 324, 369, 381, 488, 489, 490, 491, 549, 566, 568, 571, 572, 573, 599, 644, 669, 672, 695, 786, 829, 830, 831, 850, 869, 871, 875, 899, 905, 953, 1205, 1233], "suffix_field": [567, 569], "sugar": [282, 313, 596, 597, 661, 704, 706, 708, 719, 721, 724, 734, 739, 740, 741, 749, 751, 753, 754, 756, 758, 759, 764, 767, 769, 771, 775, 777, 786, 866, 899, 1163, 1164, 1197, 1222, 1280], "suitabl": [47, 55, 131, 157, 223, 313, 544, 624, 786, 1136, 1183, 1280], "sum": [36, 190, 197, 203, 204, 214, 238, 245, 263, 292, 313, 394, 395, 399, 448, 461, 535, 544, 553, 555, 556, 557, 558, 596, 597, 602, 617, 618, 702, 704, 722, 724, 725, 736, 748, 760, 770, 786, 807, 808, 813, 817, 824, 825, 842, 844, 848, 852, 855, 875, 899, 903, 905, 983, 984, 1041, 1045, 1177, 1280, 1289, 1296, 1298, 1300, 1307], "sum_": [632, 786, 1194, 1280], "sum_a": [245, 313, 602, 786, 848, 899], "sum_horizont": [47, 313, 769], "summari": [183, 313, 812, 899, 987, 1280, 1296], "summer": [659, 660], "sun": [313, 316, 673, 1234], "sundai": [204, 313, 404, 432, 435, 445, 714, 825, 899, 992, 1024, 1027, 1037], "sunni": [659, 660, 1220, 1221], "supercast": [197, 313], "supertyp": [55, 194, 271, 275, 313, 328, 716, 786, 820, 899, 903, 1280], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 195, 246, 270, 313, 461, 586, 786, 821, 899, 1259, 1280], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 156, 160, 163, 168, 216, 217, 218, 219, 247, 248, 258, 259, 267, 272, 275, 313, 452, 529, 582, 596, 597, 633, 635, 640, 649, 651, 659, 660, 661, 663, 674, 782, 786, 792, 807, 829, 830, 856, 857, 899, 905, 1047, 1122, 1163, 1164, 1195, 1201, 1210, 1212, 1220, 1221, 1222, 1224, 1235, 1262, 1264, 1280, 1284, 1298, 1302, 1303, 1305, 1306, 1307], "supportsinterchang": 117, "suppos": [173, 238, 313, 544, 786, 1136, 1280], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 241, 313, 786, 903], "surreal": 131, "surreal_query_to_fram": 131, "surrealdb": 131, "surrealhttp": 131, "surrealql": 131, "suscept": 899, "swap": [846, 899], "swim": 717, "switch": [405, 807, 899, 993], "sy": 168, "sydnei": 729, "symbol": [32, 33, 42, 313, 786, 899], "symmetr": [526, 905, 1119], "symmetri": [810, 816, 849, 868, 899], "synchron": 893, "syntact": [282, 313, 596, 597, 661, 704, 706, 708, 719, 721, 724, 734, 739, 740, 741, 749, 751, 753, 754, 756, 758, 759, 764, 767, 769, 771, 775, 777, 786, 866, 899, 1163, 1164, 1197, 1222, 1280], "syntax": [36, 107, 195, 223, 234, 313, 639, 646, 647, 650, 659, 660, 742, 743, 782, 821, 855, 899, 1200, 1207, 1208, 1211, 1220, 1221, 1280, 1303, 1305], "system": [32, 129, 130, 313, 409, 807, 899, 997], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 204, 219, 223, 237, 278, 281, 313, 396, 405, 413, 429, 448, 451, 453, 454, 507, 544, 582, 586, 646, 650, 659, 660, 670, 673, 676, 681, 776, 786, 825, 830, 843, 863, 899, 905, 985, 1021, 1041, 1046, 1048, 1049, 1100, 1136, 1207, 1211, 1220, 1221, 1230, 1231, 1234, 1237, 1242, 1280, 1292, 1293, 1302], "t_": [279, 313, 452, 786, 864, 899, 1047, 1280], "t_0": [245, 313, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 786, 848, 899, 1047, 1280], "t_1": [245, 313, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 786, 848, 899, 1047, 1280], "t_a": [279, 313, 864, 899], "t_b": [279, 313, 864, 899], "t_c": [279, 313, 864, 899], "t_d": [279, 313, 864, 899], "t_i": [452, 786, 1047, 1280], "t_id": [220, 313, 831, 899], "t_n": [245, 313, 602, 605, 607, 609, 611, 613, 616, 618, 620, 786, 848, 899], "t_struct": [279, 313, 864, 899], "tab_spann": [313, 317], "tab_stub": [313, 317], "tab_styl": [313, 317], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 140, 144, 145, 218, 220, 238, 260, 265, 272, 281, 282, 313, 317, 765, 798, 829, 831, 858, 866, 899, 1290, 1291, 1292, 1293, 1295, 1296, 1306, 1307], "table_nam": [34, 36, 260, 313, 858, 899], "table_path": [35, 133, 144, 145, 313], "table_styl": [36, 313], "tablemerg": [35, 313], "tablenotfounderror": [35, 313], "tables_scale_100": [125, 130], "tail": [202, 206, 313, 328, 632, 786, 899, 1067, 1194, 1280], "take": [36, 126, 134, 140, 159, 160, 168, 197, 198, 204, 227, 230, 237, 238, 242, 313, 338, 404, 426, 461, 468, 469, 510, 511, 543, 567, 569, 571, 635, 712, 714, 733, 735, 744, 786, 823, 825, 840, 846, 899, 923, 992, 1018, 1059, 1060, 1103, 1104, 1271, 1280, 1298], "taken": [529, 663, 1122, 1224], "talkin": [681, 1242], "tan": [786, 1280, 1300], "tand": 1300, "tangent": [334, 335, 691, 692, 786, 919, 920, 1253, 1254, 1280, 1304], "tanh": [238, 313, 786, 1280], "target": [1, 34, 35, 36, 52, 134, 275, 313, 646, 673, 675, 676, 905, 1207, 1234, 1236, 1237, 1302], "target_alia": [35, 313], "target_t": [34, 313], "task": [54, 808, 899], "tau": [451, 452, 786, 1046, 1047, 1280], "tb": [152, 154, 190, 313, 370, 1045, 1280], "tbl": [125, 130, 1309], "tbl0": 1295, "tbl1": [1293, 1295], "tbl2": [1293, 1295], "tbl3": 1293, "tbl4": 1293, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 183, 313, 812, 899], "tbl_width_char": 732, "td1": 905, "td2": 905, "td3": 905, "tdf": [237, 313], "technic": 782, "tell": [640, 661, 1201, 1222], "tempor": [87, 176, 204, 216, 245, 247, 248, 267, 313, 386, 481, 602, 605, 607, 609, 611, 613, 616, 618, 620, 786, 798, 804, 825, 848, 899, 905, 974, 1072, 1280, 1300, 1306], "temporalliter": [386, 786, 974, 1007, 1008, 1280], "temporari": [34, 313], "temporarili": [165, 168, 204, 245, 313, 602, 786, 825, 848, 899], "tend": [152, 154], "tensor": [275, 313, 1264, 1280], "tensordataset": [275, 313], "term": [451, 453, 454, 651, 663, 674, 786, 1046, 1048, 1049, 1212, 1224, 1235, 1280], "termin": [33, 42, 313, 899], "test": [0, 34, 131, 132, 134, 140, 189, 238, 313, 798, 1044, 1280], "test1": 1295, "test2": 1295, "test3": 1295, "test_1": [238, 313], "test_1_math": [238, 313], "test_1_phys": [238, 313], "test_2": [238, 313], "test_2_math": [238, 313], "test_2_phys": [238, 313], "test_data": 131, "test_df_height": 159, "test_func": 747, "test_lf": [871, 899], "test_miscellan": 1310, "test_numer": 1310, "test_price_calcul": 1310, "test_series_len": 163, "test_tabl": 132, "test_unique_xyz": 157, "testdb": 132, "testing1234": 1295, "text": [128, 131, 651, 655, 656, 659, 660, 662, 663, 674, 766, 1212, 1216, 1217, 1223, 1224, 1235, 1295, 1310], "texttt": [632, 786, 1194, 1280], "th": [198, 313, 469, 511, 524, 632, 651, 674, 786, 823, 899, 1060, 1104, 1117, 1194, 1212, 1235, 1280], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 177, 203, 216, 218, 219, 223, 236, 246, 247, 249, 281, 299, 313, 465, 467, 470, 472, 481, 495, 523, 542, 543, 544, 557, 589, 601, 623, 632, 651, 655, 657, 658, 666, 674, 683, 718, 748, 786, 807, 808, 824, 829, 830, 882, 899, 1072, 1116, 1136, 1157, 1168, 1181, 1194, 1212, 1216, 1218, 1219, 1227, 1235, 1244, 1261, 1280, 1310], "the_aws_access_key_id": [35, 133, 144, 145, 313], "the_aws_region": [35, 313], "the_aws_secret_access_kei": [35, 133, 144, 145, 313], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 219, 221, 248, 313, 582, 661, 669, 670, 786, 807, 830, 899, 903, 905, 1222], "them": [54, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 191, 192, 204, 219, 230, 238, 245, 275, 283, 313, 350, 452, 481, 514, 574, 575, 582, 602, 716, 727, 728, 730, 731, 773, 774, 786, 808, 818, 825, 830, 840, 848, 899, 905, 935, 1047, 1052, 1107, 1145, 1146, 1280, 1298, 1307], "therebi": [143, 146, 147], "therefor": [190, 313, 544, 776, 786, 1045, 1280], "theta": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "thi": [1, 4, 5, 10, 12, 14, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 178, 179, 181, 183, 184, 187, 190, 192, 196, 197, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 258, 260, 261, 262, 265, 267, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 294, 299, 312, 313, 316, 317, 325, 328, 329, 338, 350, 356, 357, 358, 363, 380, 381, 383, 386, 396, 397, 399, 405, 406, 417, 423, 424, 426, 429, 430, 432, 435, 446, 450, 457, 467, 474, 476, 478, 479, 481, 485, 507, 508, 514, 523, 524, 525, 526, 527, 528, 530, 535, 536, 540, 541, 543, 544, 548, 549, 550, 551, 552, 553, 554, 556, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 582, 589, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 627, 628, 633, 634, 635, 638, 640, 646, 649, 652, 653, 657, 658, 661, 668, 669, 670, 671, 672, 677, 681, 683, 685, 687, 694, 695, 697, 698, 699, 700, 704, 708, 716, 719, 721, 722, 735, 736, 738, 740, 741, 744, 745, 748, 751, 753, 756, 758, 762, 763, 764, 767, 771, 775, 776, 777, 782, 786, 798, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 815, 816, 817, 824, 825, 827, 829, 830, 831, 833, 835, 839, 840, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 877, 882, 896, 897, 898, 899, 903, 905, 907, 914, 923, 935, 941, 942, 943, 948, 964, 966, 968, 969, 974, 975, 985, 986, 993, 994, 996, 1005, 1015, 1016, 1018, 1021, 1022, 1024, 1027, 1038, 1040, 1043, 1045, 1051, 1052, 1060, 1062, 1066, 1068, 1077, 1086, 1100, 1101, 1107, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1129, 1134, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1148, 1151, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1195, 1196, 1198, 1199, 1201, 1207, 1210, 1213, 1214, 1218, 1219, 1222, 1229, 1230, 1231, 1238, 1242, 1244, 1245, 1247, 1250, 1251, 1255, 1257, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1268, 1269, 1270, 1280, 1285, 1289, 1290, 1291, 1295, 1302, 1305, 1306, 1307, 1308, 1310], "thing": [143, 150], "think": [423, 424, 1015, 1016], "third": [543, 786], "thoma": [230, 313, 840, 899], "those": [5, 30, 36, 129, 248, 272, 282, 313, 465, 592, 646, 748, 786, 866, 899, 905, 1159, 1207, 1262, 1280], "though": [34, 131, 204, 313, 782, 825, 899], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 259, 313, 507, 544, 635, 712, 786, 808, 857, 899, 943, 1100, 1123, 1196, 1280], "thread_loc": [544, 786], "thread_pool_s": 166, "threadpool": 53, "three": [36, 173, 245, 274, 313, 397, 589, 602, 624, 651, 674, 786, 848, 899, 947, 986, 1128, 1157, 1212, 1235, 1280], "threshold": [251, 313, 850, 899], "through": [117, 131, 782, 905, 1280, 1295], "throw": [35, 118, 119, 122, 176, 185, 242, 313, 653, 654, 804, 814, 846, 899, 1214, 1215, 1280], "thu": [36, 192, 313, 316, 718, 1052, 1280], "thursdai": [204, 313, 404, 714, 825, 899, 992], "ti": [592, 786, 1159, 1280], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 139, 143, 144, 146, 147, 159, 160, 163, 183, 192, 204, 219, 220, 245, 283, 313, 345, 380, 381, 405, 406, 408, 409, 410, 413, 414, 423, 424, 426, 429, 430, 432, 434, 435, 443, 446, 452, 502, 503, 535, 601, 602, 605, 607, 609, 611, 613, 616, 618, 620, 628, 673, 676, 680, 693, 694, 695, 716, 717, 727, 728, 729, 730, 731, 732, 738, 773, 774, 786, 807, 808, 812, 825, 830, 831, 844, 848, 899, 905, 930, 964, 993, 994, 996, 997, 1001, 1002, 1018, 1021, 1022, 1024, 1026, 1027, 1035, 1038, 1047, 1052, 1095, 1096, 1168, 1190, 1234, 1237, 1241, 1263, 1265, 1280, 1289, 1295, 1303, 1310], "time_column": [283, 313], "time_format": [33, 42, 313, 899], "time_unit": [62, 64, 406, 408, 414, 434, 446, 676, 729, 730, 731, 732, 738, 905, 994, 996, 1002, 1026, 1038, 1237], "time_unit_m": [406, 994], "time_unit_n": [406, 994], "time_unit_u": 446, "time_zon": [62, 409, 411, 429, 676, 729, 730, 731, 905, 993, 997, 1001, 1021, 1237], "timedelta": [204, 219, 245, 283, 313, 426, 430, 443, 452, 602, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 727, 728, 730, 731, 773, 774, 786, 825, 830, 848, 899, 904, 905, 1006, 1012, 1018, 1022, 1035, 1047, 1145, 1146, 1198, 1270, 1280], "timeout": [54, 808, 899], "timestamp": [123, 133, 144, 204, 313, 429, 430, 443, 738, 825, 899, 1021, 1022, 1035, 1300], "timestamp_m": 434, "timestamp_n": 1026, "timestamp_u": [434, 1026], "timestep": 738, "timeunit": [33, 42, 62, 64, 313, 406, 408, 434, 446, 676, 729, 730, 731, 732, 899, 905, 994, 996, 1026, 1038, 1237], "timezon": [62, 133, 144, 411, 905, 1303], "tip": [544, 786], "titl": [36, 313, 1289], "titlecas": [681, 1242], "tm": [408, 905, 1303], "to_arrow": [217, 313, 1261, 1280, 1307], "to_batch": [217, 313], "to_dict": [176, 313, 804, 899, 905], "to_dummi": [270, 275, 313, 1280], "to_fram": [383, 414, 430, 434, 443, 673, 986, 1157, 1182, 1184, 1226, 1227, 1234, 1280, 1285], "to_init_repr": [123, 313, 1280], "to_jax": [275, 313, 1280], "to_list": [123, 245, 313, 1200, 1211, 1280], "to_lowercas": 573, "to_numpi": [270, 275, 313, 543, 786, 1280], "to_panda": [313, 1280], "to_phys": [786, 968, 1280], "to_python": 904, "to_seri": [48, 199, 313, 673, 713, 761, 1234], "to_sql": [34, 313], "to_str": [432, 1024], "to_struct": [313, 647], "to_torch": [270, 313, 1280], "to_uppercas": [324, 572, 648, 786], "togeth": 1302, "token": [139, 141, 143, 145, 146, 147, 148], "tokyo": [123, 905], "tokyo_tz": 905, "toler": [152, 153, 154, 155, 219, 313, 830, 899], "tone": [36, 313], "tonight": [640, 661, 1201, 1222], "too": [14, 238, 313, 582, 786, 899], "toomanyrowsreturnederror": [246, 313], "top": [36, 260, 276, 313, 316, 695, 786, 858, 862, 899, 1280, 1285, 1307], "top_col": [36, 313], "top_k": [175, 313, 380, 381, 695, 786, 802, 899, 964, 1280], "top_k_bi": [380, 381, 694, 786], "top_row": [36, 313], "tor_id": 123, "torch": [151, 275, 313, 1264, 1280], "torchexporttyp": [275, 313], "tostructstrategi": [535, 1128], "total": [36, 190, 294, 313, 436, 437, 438, 439, 440, 441, 442, 496, 516, 786, 877, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1045, 1089, 1109, 1280], "total_gross": 1289, "toward": [294, 496, 516, 786, 877, 1089, 1109, 1280], "tp": [1, 50], "tpu": [270, 313, 1259, 1280], "traceback": [152, 153, 154, 155, 271, 313, 597, 786, 1164, 1261, 1280], "tracebacktyp": 1307, "track": [133, 144, 145, 223, 313, 535, 1307], "trail": [28, 202, 313, 668, 669, 1229, 1230], "train": [275, 313], "train_lf": [871, 899], "transfer": 132, "transferencod": [367, 368, 642, 643, 951, 952, 1203, 1204], "transform": [223, 260, 313, 543, 681, 765, 786, 858, 899, 1242], "transform_dens": [1280, 1285], "transit": [195, 313, 821, 899], "translat": 131, "transpar": [807, 899], "transpos": [238, 313], "travel": [133, 144], "travers": [604, 606, 608, 610, 612, 615, 617, 619, 786, 1170, 1171, 1173, 1176, 1177, 1178, 1280], "treat": [129, 130, 143, 170, 452, 639, 641, 650, 659, 660, 776, 786, 907, 1047, 1200, 1202, 1211, 1220, 1221, 1280], "tree": [557, 817, 899], "tree_format": [817, 899], "trend": [36, 313], "tri": [223, 313], "triangl": [299, 882], "trigger": [35, 221, 272, 313, 786, 903, 1262, 1280], "trigonometri": [1300, 1306], "trim": [123, 1302], "trim_decimal_zero": 28, "trip": 131, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 172, 176, 177, 178, 183, 185, 189, 194, 195, 197, 199, 201, 202, 203, 204, 209, 211, 212, 213, 216, 218, 219, 220, 221, 226, 227, 233, 234, 236, 238, 239, 242, 246, 247, 248, 249, 251, 259, 260, 263, 266, 268, 270, 271, 272, 275, 277, 278, 279, 281, 282, 283, 287, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 323, 324, 325, 326, 327, 328, 339, 341, 342, 345, 349, 350, 358, 362, 366, 367, 369, 371, 381, 382, 391, 392, 393, 394, 395, 397, 404, 406, 409, 412, 414, 416, 423, 424, 426, 427, 429, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 449, 450, 451, 453, 454, 461, 468, 470, 471, 472, 473, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 503, 510, 512, 514, 530, 535, 542, 543, 544, 548, 549, 550, 551, 552, 553, 554, 557, 558, 576, 577, 579, 581, 584, 585, 589, 594, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 627, 628, 632, 634, 635, 638, 639, 640, 641, 642, 644, 649, 650, 652, 653, 654, 659, 660, 664, 665, 667, 673, 675, 676, 678, 680, 684, 686, 695, 697, 700, 703, 704, 705, 706, 707, 709, 712, 713, 714, 718, 727, 730, 736, 742, 748, 758, 761, 765, 768, 773, 776, 777, 786, 804, 805, 806, 807, 808, 812, 814, 817, 820, 821, 824, 825, 829, 830, 831, 833, 835, 839, 844, 846, 850, 855, 857, 858, 863, 864, 865, 866, 869, 874, 876, 878, 880, 883, 884, 885, 886, 887, 888, 889, 898, 899, 903, 905, 912, 913, 924, 926, 927, 930, 934, 935, 943, 950, 951, 953, 955, 965, 967, 969, 972, 973, 986, 992, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1043, 1044, 1046, 1048, 1049, 1056, 1064, 1068, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1091, 1092, 1096, 1103, 1105, 1107, 1123, 1136, 1142, 1148, 1150, 1153, 1154, 1157, 1160, 1161, 1175, 1194, 1196, 1199, 1200, 1201, 1202, 1203, 1205, 1210, 1211, 1213, 1214, 1215, 1220, 1221, 1225, 1226, 1228, 1234, 1236, 1237, 1239, 1241, 1256, 1261, 1262, 1269, 1271, 1280, 1285, 1289, 1290, 1292, 1294, 1298, 1299, 1302, 1307, 1310], "truediv": [465, 786], "truncat": [123, 129, 130, 143, 202, 204, 216, 247, 248, 267, 313, 825, 844, 899, 1306], "truncate_nod": [844, 899], "truncate_ragged_lin": [129, 130, 143], "truncate_str": 443, "truncate_td": 443, "trust": [399, 786, 813, 899], "try": [53, 54, 110, 129, 130, 135, 139, 141, 143, 146, 147, 148, 807, 808, 817, 844, 855, 899], "try_cast": 1300, "try_parse_d": [125, 129, 130, 143], "try_parse_hive_d": [141, 146, 148], "ts_local": [429, 1021], "tseri": [423, 424, 1015, 1016], "tstamp": 905, "tstamp_tokyo": 905, "tstamp_utc": 905, "tue": [313, 316], "tuesdai": [204, 313, 825, 899], "tupl": [36, 56, 132, 134, 140, 173, 216, 223, 236, 246, 247, 248, 255, 275, 291, 313, 598, 786, 844, 855, 899, 904, 905, 1165, 1186, 1280], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 313, 807, 808, 817, 829, 830, 835, 844, 899], "twice": [36, 313], "two": [36, 46, 84, 85, 118, 120, 122, 132, 173, 195, 197, 219, 220, 229, 230, 247, 274, 280, 293, 299, 313, 317, 323, 401, 408, 465, 468, 471, 535, 589, 634, 710, 711, 716, 718, 720, 727, 730, 762, 763, 765, 786, 821, 830, 831, 839, 840, 865, 876, 882, 899, 905, 947, 989, 996, 1128, 1157, 1280, 1295, 1296, 1299, 1308], "two_a": 1307, "tworld": [670, 1229, 1231], "txt": [1, 12, 143, 639, 650, 1211], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 170, 173, 179, 188, 191, 197, 202, 204, 205, 217, 218, 223, 245, 250, 265, 270, 271, 274, 275, 278, 290, 313, 325, 327, 330, 331, 332, 333, 334, 335, 338, 343, 344, 345, 347, 350, 361, 362, 366, 367, 368, 369, 370, 371, 382, 383, 386, 387, 388, 389, 390, 397, 398, 404, 405, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 455, 457, 468, 471, 474, 481, 482, 483, 484, 485, 486, 487, 496, 500, 501, 503, 508, 514, 516, 534, 535, 543, 544, 589, 591, 595, 596, 597, 598, 600, 601, 602, 629, 630, 631, 638, 641, 642, 643, 645, 646, 647, 648, 651, 652, 654, 655, 656, 663, 664, 665, 666, 673, 674, 678, 691, 692, 693, 700, 709, 716, 719, 726, 727, 728, 729, 730, 731, 732, 734, 742, 743, 745, 746, 747, 748, 758, 761, 772, 773, 774, 777, 782, 786, 798, 807, 808, 816, 817, 818, 825, 829, 844, 848, 849, 855, 863, 873, 899, 904, 907, 912, 913, 924, 926, 927, 928, 929, 930, 932, 934, 935, 946, 947, 948, 950, 951, 952, 954, 965, 966, 974, 986, 987, 992, 993, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1047, 1051, 1066, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1091, 1092, 1093, 1094, 1096, 1101, 1107, 1109, 1127, 1128, 1150, 1157, 1163, 1164, 1165, 1167, 1168, 1189, 1191, 1199, 1200, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1212, 1213, 1215, 1216, 1217, 1224, 1225, 1226, 1227, 1234, 1235, 1239, 1260, 1261, 1263, 1271, 1280, 1289, 1296, 1300, 1302, 1306, 1307], "type_coercion": [42, 43, 44, 45, 53, 54, 807, 808, 817, 844, 855, 899], "typeerror": [35, 313], "typenam": [36, 313], "typic": [119, 131, 148, 223, 313, 413, 629, 786, 905, 1001, 1136, 1191, 1280], "tz": [676, 1237], "tzinfo": [133, 144, 905], "u": [36, 62, 64, 148, 161, 219, 313, 406, 408, 414, 434, 446, 673, 676, 705, 707, 729, 730, 731, 732, 738, 830, 899, 905, 994, 996, 1002, 1026, 1038, 1234, 1237, 1293, 1303], "u1": [271, 313], "u16": [143, 1305, 1310], "u32": [12, 131, 174, 176, 182, 235, 289, 290, 294, 298, 304, 306, 313, 323, 329, 336, 337, 338, 339, 340, 343, 344, 346, 355, 370, 390, 391, 476, 496, 500, 501, 504, 516, 521, 564, 580, 592, 600, 601, 605, 607, 609, 611, 613, 616, 618, 620, 624, 641, 650, 655, 656, 693, 698, 700, 704, 708, 712, 713, 719, 721, 742, 745, 756, 786, 801, 804, 811, 842, 872, 873, 877, 881, 887, 889, 899, 905, 923, 924, 925, 928, 929, 931, 940, 965, 968, 980, 1068, 1093, 1094, 1097, 1109, 1114, 1159, 1167, 1168, 1183, 1202, 1211, 1216, 1217, 1263, 1267, 1269, 1280, 1289, 1297, 1298, 1302, 1307], "u64": [205, 290, 313, 474, 594, 786, 844, 873, 899, 905, 1066, 1161, 1280], "u8": [176, 268, 269, 281, 313, 597, 703, 786, 804, 899, 905, 1164, 1256, 1280, 1310], "udf": [165, 223, 237, 299, 313, 399, 544, 586, 748, 786, 813, 843, 882, 899, 1136, 1280], "ufunc": 90, "uid": 131, "uint": 1310, "uint16": [143, 394, 395, 689, 786, 905, 983, 984, 1251, 1261, 1264, 1280], "uint2": 1305, "uint32": [124, 151, 176, 190, 245, 290, 313, 338, 343, 344, 370, 390, 452, 468, 471, 496, 500, 501, 516, 595, 600, 601, 602, 641, 655, 656, 693, 719, 742, 745, 786, 804, 848, 873, 899, 905, 924, 928, 929, 954, 965, 1045, 1047, 1093, 1094, 1109, 1167, 1168, 1202, 1216, 1217, 1263, 1264, 1280], "uint4": 1307, "uint64": [124, 205, 245, 290, 313, 343, 344, 452, 474, 500, 501, 594, 602, 786, 848, 873, 899, 905, 928, 929, 1047, 1066, 1093, 1094, 1161, 1264, 1280], "uint8": [131, 176, 269, 270, 271, 281, 313, 394, 395, 597, 689, 703, 786, 804, 899, 905, 983, 984, 1164, 1251, 1264, 1280, 1310], "uint8_pair": 1310, "uit": [663, 1224], "uk": [647, 1208], "unabl": [92, 134], "unari": [578, 786], "unbias": [453, 454, 786, 1048, 1049, 1280], "unchang": [190, 313, 596, 693, 786, 835, 882, 899, 1045, 1163, 1263, 1280], "uncompress": [31, 37, 38, 41, 45, 135, 146, 313, 899], "undefin": [696, 786], "under": [46, 48, 49, 50, 51, 84, 85, 139, 141, 143, 146, 147, 148, 238, 260, 313, 778, 779, 781, 782, 787, 788, 791, 793, 794, 795, 858, 899, 1272, 1274, 1276, 1281, 1286, 1287, 1288], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 191, 192, 216, 217, 247, 265, 271, 313, 367, 406, 407, 408, 412, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 431, 444, 445, 446, 447, 594, 621, 639, 642, 650, 786, 818, 899, 905, 951, 968, 994, 995, 996, 1000, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1021, 1023, 1036, 1037, 1038, 1039, 1052, 1161, 1179, 1189, 1200, 1203, 1211, 1255, 1261, 1280, 1307], "understood": 748, "undo": [558, 565, 566, 568, 570, 572, 573], "unexpect": [99, 108, 131, 543, 544, 786, 1136, 1280], "unhelpfulli": [152, 154], "unicod": [20, 651, 656, 663, 674, 905, 1212, 1217, 1224, 1235], "unifi": [36, 270, 275, 313, 905], "uniform": [36, 313, 589, 786, 1157, 1280], "unimod": [632, 786, 1194, 1280], "unintend": [195, 313, 821, 899], "union": [53, 54, 55, 527, 807, 808, 817, 844, 855, 899, 905, 1120, 1306, 1307], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 174, 213, 218, 234, 238, 248, 304, 313, 329, 340, 355, 397, 492, 521, 564, 589, 673, 675, 676, 680, 698, 700, 708, 756, 786, 801, 829, 887, 899, 903, 925, 940, 986, 1085, 1114, 1143, 1157, 1234, 1236, 1237, 1241, 1267, 1269, 1280, 1296, 1298], "unique_column_valu": [238, 313], "unique_count": [786, 1280], "uniquekeepstrategi": [278, 313, 863, 899], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 190, 313, 370, 406, 408, 414, 434, 446, 452, 458, 541, 554, 673, 676, 699, 729, 730, 731, 732, 738, 786, 844, 899, 903, 905, 954, 994, 996, 1002, 1026, 1038, 1045, 1047, 1053, 1134, 1234, 1237, 1268, 1280, 1310], "univers": [170, 907], "unix": [61, 62, 414, 738, 1002], "unknown": [646, 746, 1207], "unless": [36, 47, 118, 270, 275, 313, 668, 669, 761, 899, 1229, 1302], "unlik": [126, 204, 313, 825, 899], "unnam": [648, 1209], "unnest": [126, 313, 397, 589, 600, 647, 648, 665, 666, 686, 687, 700, 786, 899, 947, 986, 1128, 1157, 1167, 1226, 1227, 1280, 1300, 1306], "unpivot": [229, 313, 839, 899], "unregist": [1291, 1292, 1293, 1307, 1309], "unsaf": [786, 903], "unset": [34, 141, 146, 158, 298, 313, 374, 375, 377, 378, 429, 535, 786, 881, 958, 959, 961, 962, 1021, 1280, 1289], "unsign": [78, 79, 80, 81, 594, 786, 905, 1161, 1280], "unsigned_integ": 905, "unstabl": [41, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 260, 270, 275, 281, 282, 313, 316, 317, 396, 397, 430, 476, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 762, 763, 786, 807, 808, 817, 858, 866, 899, 969, 985, 986, 1022, 1068, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1259, 1264, 1280, 1285], "unstack": 313, "unstackdirect": [281, 313], "unsuit": 115, "unsupport": [35, 313], "until": [84, 204, 221, 313, 657, 658, 683, 825, 899, 1218, 1219, 1244], "up": [10, 36, 76, 132, 216, 219, 238, 247, 248, 254, 267, 313, 385, 544, 651, 674, 786, 829, 830, 835, 853, 899, 905, 971, 1212, 1235, 1280], "upcast": [328, 786], "upcast_integer_typ": [1, 50], "updat": [35, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 183, 313, 812, 899], "upgrad": 95, "upheld": [835, 899], "upon": 130, "upper": [129, 130, 131, 190, 204, 313, 386, 476, 481, 535, 567, 699, 709, 727, 728, 730, 731, 773, 774, 786, 825, 899, 974, 1045, 1068, 1072, 1134, 1268, 1280, 1298, 1300], "upper_bound": [204, 313, 386, 481, 535, 786, 825, 899, 974, 1072, 1134, 1280], "uppercas": [573, 682, 1243, 1302], "upsampl": [204, 313, 825, 899], "urandom": [370, 954], "uri": [34, 35, 131, 132, 133, 144, 145, 313], "url": [131, 132, 141, 146, 148, 646, 648, 1207, 1209], "urllib": 132, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 174, 175, 176, 179, 183, 185, 187, 193, 194, 195, 197, 203, 204, 211, 213, 215, 216, 217, 219, 223, 229, 233, 234, 236, 237, 238, 245, 246, 247, 248, 249, 251, 252, 254, 259, 260, 261, 265, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 292, 299, 313, 323, 325, 327, 329, 338, 339, 362, 367, 368, 381, 396, 399, 402, 403, 411, 429, 430, 432, 435, 443, 446, 448, 451, 452, 453, 454, 455, 459, 460, 461, 465, 476, 479, 480, 481, 493, 507, 523, 531, 535, 537, 543, 544, 547, 565, 568, 570, 572, 573, 582, 589, 592, 594, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 623, 625, 627, 628, 632, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 649, 650, 655, 656, 659, 660, 661, 663, 665, 667, 669, 670, 671, 672, 673, 675, 676, 680, 683, 684, 687, 695, 701, 702, 704, 705, 706, 707, 708, 711, 712, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 738, 742, 743, 745, 746, 748, 749, 750, 752, 754, 755, 758, 761, 762, 763, 764, 765, 767, 768, 769, 770, 773, 774, 775, 776, 777, 782, 785, 786, 797, 798, 801, 802, 803, 804, 807, 808, 810, 812, 813, 814, 815, 816, 817, 819, 820, 821, 824, 825, 830, 833, 839, 848, 849, 850, 851, 853, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 882, 899, 904, 905, 912, 913, 943, 947, 951, 952, 969, 985, 987, 990, 991, 999, 1007, 1008, 1021, 1022, 1024, 1027, 1035, 1038, 1041, 1046, 1047, 1048, 1049, 1054, 1055, 1059, 1065, 1068, 1070, 1071, 1072, 1087, 1100, 1116, 1123, 1128, 1136, 1157, 1159, 1161, 1163, 1165, 1167, 1168, 1169, 1181, 1182, 1184, 1185, 1188, 1194, 1196, 1198, 1199, 1200, 1201, 1203, 1204, 1206, 1207, 1208, 1210, 1211, 1216, 1217, 1220, 1221, 1222, 1224, 1226, 1234, 1236, 1237, 1241, 1244, 1255, 1256, 1258, 1261, 1262, 1270, 1280, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1302, 1303, 1307, 1310], "usag": [159, 163, 257, 313, 905, 1189, 1280], "usd": [202, 313, 1310], "use_pyarrow": [41, 45, 129, 135, 137, 141, 271, 313, 899, 1261, 1280], "use_pyarrow_extension_arrai": [272, 313, 1262, 1280], "use_pyarrow_write_to_dataset": [41, 313], "use_statist": [141, 148], "user": [34, 131, 132, 170, 223, 237, 299, 313, 543, 544, 586, 625, 748, 786, 843, 882, 899, 903, 907, 1136, 1185, 1280], "user_conn": 131, "usernam": [129, 132, 135, 137], "userwarn": 1, "usr": 131, "usual": [91, 132, 275, 313, 405, 993], "utc": [133, 144, 405, 409, 411, 413, 429, 673, 676, 905, 993, 997, 1001, 1021, 1234, 1237], "utc_tz": 905, "utf": [33, 42, 75, 313, 899], "utf8": [20, 129, 130, 143, 651, 663, 674, 1212, 1224, 1235], "utf8_borders_onli": 20, "utf8_ful": [20, 47, 123], "utf8_full_condens": [7, 20, 123], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [275, 313, 738, 899, 903], "uvw": [647, 1208], "v": [8, 9, 41, 190, 313, 624, 705, 707, 786, 1183, 1280, 1292, 1293], "v2": [8, 135, 146], "val": [36, 244, 313, 544, 586, 693, 776, 786, 847, 899], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 185, 190, 218, 242, 313, 396, 639, 641, 646, 647, 648, 650, 654, 659, 660, 776, 786, 814, 829, 846, 874, 899, 905, 985, 1045, 1200, 1202, 1207, 1208, 1209, 1211, 1215, 1220, 1221, 1280, 1289, 1290], "validate_output_schema": [835, 899], "vals_phys": [693, 786], "valu": [4, 5, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 172, 174, 175, 183, 187, 189, 192, 193, 194, 195, 199, 202, 204, 205, 206, 210, 214, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 238, 239, 240, 242, 245, 246, 247, 248, 249, 256, 259, 261, 262, 263, 264, 266, 267, 271, 272, 276, 277, 280, 281, 282, 283, 284, 291, 294, 295, 297, 300, 301, 303, 304, 313, 316, 317, 321, 322, 323, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 364, 365, 367, 368, 369, 370, 371, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 395, 396, 397, 400, 402, 403, 408, 412, 422, 427, 444, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 504, 505, 506, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 528, 530, 531, 532, 533, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 560, 561, 562, 563, 564, 574, 575, 576, 577, 580, 582, 583, 586, 587, 589, 590, 592, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 629, 630, 631, 632, 634, 635, 636, 638, 639, 641, 642, 643, 644, 646, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 674, 683, 685, 688, 689, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 712, 715, 716, 717, 719, 721, 722, 723, 724, 725, 735, 736, 741, 742, 743, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 769, 770, 776, 786, 801, 802, 812, 815, 819, 820, 821, 825, 827, 828, 829, 830, 836, 837, 838, 839, 841, 842, 845, 846, 848, 854, 857, 859, 860, 862, 865, 866, 867, 877, 878, 880, 883, 884, 886, 887, 899, 905, 910, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 931, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 948, 949, 951, 952, 953, 954, 955, 965, 971, 974, 976, 977, 978, 980, 985, 986, 987, 988, 990, 991, 996, 1000, 1014, 1019, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1058, 1059, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1089, 1090, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1121, 1123, 1124, 1125, 1126, 1129, 1130, 1136, 1137, 1138, 1140, 1141, 1143, 1145, 1146, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1159, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1182, 1183, 1184, 1187, 1191, 1192, 1193, 1194, 1196, 1199, 1200, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1235, 1244, 1247, 1251, 1252, 1253, 1254, 1261, 1262, 1263, 1267, 1269, 1271, 1280, 1289, 1294, 1296, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1309, 1310], "value1": [635, 786], "value2": [635, 786], "value_a": 1307, "value_b": 1307, "value_count": [698, 786, 1280], "value_cum_sum": [395, 786], "value_cum_sum_all_fil": [395, 786], "value_nam": [229, 280, 313, 839, 865, 899], "value_var": [229, 280, 313, 839, 865, 899], "valueerror": [15, 20], "valueexcept": 746, "var": [36, 164, 313, 619, 620, 786, 899, 1280, 1297], "var_samp": 1297, "vari": [405, 993, 1310], "variabl": [30, 72, 139, 141, 143, 146, 147, 148, 162, 165, 229, 268, 280, 313, 839, 865, 899, 1256, 1280, 1290, 1292, 1307], "variable_nam": [229, 280, 313, 839, 865, 899], "variad": 131, "varianc": [284, 313, 454, 493, 619, 620, 701, 775, 786, 867, 899, 1049, 1087, 1178, 1270, 1280, 1300], "variou": [131, 173, 179, 313, 786, 809, 899, 904, 905, 1280], "vector": [604, 606, 608, 610, 612, 615, 617, 619, 786, 1170, 1171, 1173, 1176, 1177, 1178, 1280], "vectoris": [423, 424, 1015, 1016], "vein": 168, "verbos": [29, 152, 154, 168, 647, 1208], "veri": [131, 216, 277, 313, 544, 786, 882, 1301], "verifi": [219, 313, 830, 899], "versicolor": [313, 316], "version": [34, 35, 52, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 172, 174, 184, 205, 229, 253, 260, 270, 271, 275, 289, 294, 313, 316, 399, 411, 423, 424, 446, 467, 474, 550, 556, 559, 596, 638, 645, 687, 702, 711, 760, 765, 786, 801, 813, 817, 839, 852, 858, 871, 872, 877, 899, 905, 999, 1007, 1008, 1015, 1016, 1038, 1065, 1066, 1163, 1199, 1206, 1259, 1261, 1264, 1280, 1285], "versu": [183, 313, 812, 899], "vertic": [55, 192, 281, 285, 313, 638, 652, 1199, 1213], "vertical_relax": 55, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 171, 173, 184, 216, 247, 313, 399, 544, 648, 786, 813, 899, 908, 1209], "view": [544, 786], "visibl": [17, 190, 313, 1045, 1280], "visit": [396, 786, 985, 1280], "visual": [211, 213, 313, 855, 899], "volk": 126, "vote": [646, 648, 1207, 1209], "vowel": [659, 660, 1220, 1221], "vstack": [55, 192, 313], "w": [36, 131, 204, 248, 313, 641, 646, 648, 705, 707, 825, 899, 905, 1202, 1207, 1209, 1230, 1292, 1293, 1296], "w_i": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "wa": [34, 52, 91, 134, 184, 270, 271, 313, 316, 399, 597, 661, 732, 786, 813, 899, 905, 1164, 1222, 1261, 1280, 1285], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 203, 217, 237, 259, 292, 313, 430, 586, 635, 646, 719, 782, 786, 810, 816, 824, 843, 849, 857, 868, 875, 882, 899, 1022, 1207], "walk": 717, "want": [54, 119, 121, 134, 192, 223, 234, 245, 260, 313, 404, 461, 543, 544, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 628, 640, 655, 661, 714, 722, 727, 730, 736, 758, 761, 777, 786, 808, 858, 874, 899, 905, 992, 1052, 1136, 1201, 1216, 1222, 1280, 1295], "warehous": 132, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 582, 786, 1280], "watermark": [41, 313], "wb": [36, 313], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 183, 184, 204, 219, 238, 245, 283, 313, 399, 426, 430, 443, 476, 507, 535, 543, 544, 602, 605, 607, 609, 611, 613, 616, 618, 620, 648, 678, 726, 727, 728, 729, 730, 731, 746, 773, 774, 776, 786, 812, 813, 825, 830, 835, 848, 899, 1018, 1022, 1035, 1068, 1100, 1136, 1209, 1239, 1280, 1292], "weather": [659, 660, 1220, 1221], "wed": [313, 316], "wednesdai": [204, 313, 432, 435, 825, 899, 1024, 1027], "week": [204, 219, 245, 283, 313, 404, 426, 430, 443, 445, 452, 602, 605, 607, 609, 611, 613, 616, 618, 620, 714, 727, 728, 730, 731, 732, 773, 774, 786, 825, 830, 848, 899, 905, 992, 1018, 1022, 1035, 1037, 1047, 1280, 1303], "week_mask": [404, 714, 992], "weekdai": [412, 427], "weekend": [404, 714, 992], "weekli": [204, 313, 443, 825, 899, 1035], "weghorst": [648, 1209], "weight": [126, 451, 452, 453, 454, 603, 604, 606, 608, 610, 612, 615, 617, 619, 632, 786, 1046, 1047, 1048, 1049, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1194, 1280], "wei\u00df": 1302, "well": [36, 129, 130, 131, 143, 313, 481, 765, 786, 1072, 1280, 1307], "were": [168, 596, 597, 782, 786, 1163, 1164, 1280], "west": [220, 313, 831, 899], "what": [173, 234, 313, 404, 543, 640, 661, 786, 992, 1201, 1222], "whatev": 168, "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 175, 183, 188, 190, 192, 194, 197, 204, 218, 220, 223, 237, 242, 246, 248, 251, 252, 256, 259, 265, 268, 270, 271, 275, 276, 278, 282, 288, 313, 357, 386, 404, 451, 453, 454, 460, 528, 535, 554, 586, 596, 597, 626, 634, 635, 640, 645, 649, 651, 655, 656, 661, 663, 668, 669, 670, 673, 674, 712, 714, 722, 736, 786, 802, 812, 820, 825, 829, 831, 835, 846, 850, 851, 854, 857, 862, 863, 866, 870, 896, 899, 942, 974, 987, 992, 1045, 1046, 1048, 1049, 1052, 1055, 1121, 1163, 1164, 1182, 1184, 1187, 1201, 1206, 1210, 1212, 1216, 1217, 1222, 1224, 1229, 1230, 1231, 1234, 1235, 1255, 1256, 1261, 1280, 1295, 1307], "when_matched_update_al": [35, 313], "when_not_matched_insert_al": [35, 313], "where": [36, 47, 91, 131, 132, 134, 187, 192, 195, 204, 216, 220, 229, 238, 247, 260, 261, 270, 275, 280, 282, 284, 313, 339, 445, 448, 450, 452, 461, 531, 537, 543, 577, 595, 624, 632, 635, 637, 661, 681, 701, 713, 718, 720, 762, 763, 765, 767, 775, 776, 786, 815, 821, 825, 831, 839, 858, 859, 865, 866, 867, 899, 924, 1037, 1041, 1043, 1047, 1052, 1056, 1148, 1183, 1194, 1198, 1222, 1242, 1270, 1271, 1280, 1289, 1306, 1307, 1309], "wherea": [129, 143, 245, 313, 430, 443, 574, 575, 602, 786, 848, 899, 1022, 1035, 1145, 1146, 1280], "wherev": [36, 223, 299, 313, 544, 786, 1136, 1280], "whether": [33, 42, 120, 122, 126, 141, 146, 148, 163, 167, 189, 215, 219, 254, 259, 313, 325, 327, 341, 342, 416, 431, 473, 498, 499, 625, 635, 649, 712, 786, 830, 835, 853, 857, 899, 905, 912, 913, 926, 927, 967, 969, 1004, 1023, 1044, 1064, 1065, 1091, 1092, 1210, 1280, 1292, 1307], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 159, 162, 164, 175, 176, 183, 184, 187, 192, 193, 203, 204, 209, 219, 238, 245, 253, 270, 271, 276, 278, 283, 313, 325, 362, 399, 404, 426, 430, 432, 443, 452, 458, 481, 483, 486, 488, 489, 490, 491, 535, 543, 544, 554, 556, 602, 605, 607, 609, 611, 613, 616, 618, 620, 678, 714, 727, 728, 730, 731, 732, 773, 774, 776, 786, 802, 804, 807, 810, 812, 813, 815, 816, 817, 825, 830, 848, 852, 862, 863, 868, 899, 905, 947, 992, 1018, 1022, 1024, 1035, 1047, 1052, 1053, 1072, 1075, 1078, 1080, 1081, 1082, 1083, 1128, 1184, 1239, 1259, 1261, 1280, 1290, 1296, 1307, 1310], "while": [35, 54, 130, 133, 134, 144, 148, 159, 163, 168, 216, 229, 277, 280, 282, 313, 596, 656, 786, 808, 839, 865, 866, 899, 1163, 1217, 1280], "white": [36, 313], "whitespac": [123, 668, 669, 670, 1229, 1230, 1231, 1302], "whole": [543, 634, 635, 646, 786, 882, 899, 1207], "whose": [47, 219, 238, 313, 455, 734, 786, 830, 899, 905], "why": [807, 899], "wide": [131, 202, 229, 238, 280, 281, 313, 839, 865, 899], "width": [26, 36, 56, 129, 130, 143, 313, 316, 534, 899, 1127], "wiki": 20, "wikipedia": 20, "wildcard": [455, 684, 722, 723, 736, 760, 782, 786, 903], "win_loss": [36, 313], "window": [129, 130, 143, 204, 245, 313, 396, 451, 453, 454, 544, 582, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 716, 762, 763, 786, 825, 848, 899, 985, 1046, 1048, 1049, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1280], "window_s": [603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 762, 763, 786, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1280], "windowmappingstrategi": [582, 786], "winter": [649, 659, 660, 1210], "wise": [36, 47, 131, 197, 313, 330, 331, 332, 333, 334, 335, 387, 388, 389, 456, 539, 629, 630, 631, 691, 692, 736, 760, 786, 915, 916, 917, 918, 919, 920, 976, 977, 978, 1050, 1132, 1133, 1191, 1192, 1193, 1253, 1254, 1280], "wish": [175, 276, 313, 380, 381, 694, 695, 786, 802, 862, 899, 964, 1265, 1280], "with_column": [1, 12, 50, 53, 54, 204, 237, 245, 275, 281, 288, 313, 322, 324, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 355, 356, 357, 358, 362, 367, 368, 370, 382, 386, 391, 392, 393, 394, 395, 397, 400, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 444, 445, 447, 449, 450, 452, 459, 460, 465, 470, 472, 474, 479, 480, 481, 484, 485, 487, 488, 489, 490, 491, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 561, 563, 565, 566, 568, 570, 572, 573, 576, 577, 578, 582, 583, 586, 587, 589, 592, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 626, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 681, 682, 683, 685, 687, 688, 693, 696, 703, 705, 707, 710, 714, 715, 716, 717, 722, 723, 725, 726, 728, 729, 733, 743, 747, 750, 752, 755, 766, 770, 772, 774, 776, 782, 786, 807, 808, 817, 825, 827, 843, 844, 848, 855, 870, 899, 905, 986, 1021, 1157, 1280, 1307], "with_column_nam": 143, "with_columns_seq": [313, 899], "with_context": 899, "with_field": [544, 786], "with_replac": [249, 313, 523, 623, 786, 1116, 1181, 1280], "with_row_count": [313, 899], "with_row_index": [1, 245, 289, 313, 605, 607, 609, 611, 613, 616, 618, 620, 786, 872, 899, 1182, 1280, 1285], "within": [41, 56, 72, 152, 153, 154, 155, 203, 204, 205, 219, 245, 283, 313, 474, 592, 635, 786, 825, 830, 848, 899, 1066, 1280, 1307], "without": [1, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 271, 275, 281, 282, 313, 316, 317, 396, 397, 430, 476, 544, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 640, 649, 661, 719, 762, 763, 764, 786, 807, 808, 817, 831, 858, 866, 899, 967, 969, 985, 986, 1022, 1068, 1157, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1201, 1210, 1222, 1259, 1261, 1264, 1280, 1285, 1309], "without_fil": [133, 144, 145], "wod": [670, 1231], "womp": [279, 313, 864, 899], "word": [132, 659, 660, 669, 670, 681, 1242], "work": [36, 63, 65, 130, 149, 252, 288, 313, 325, 327, 363, 385, 386, 455, 464, 507, 536, 543, 544, 565, 566, 568, 570, 572, 573, 582, 651, 655, 656, 663, 674, 697, 786, 851, 870, 899, 905, 912, 913, 948, 971, 974, 1058, 1100, 1129, 1212, 1216, 1217, 1224, 1235, 1266, 1280], "workaround": 313, "workbook": [36, 134, 140, 313], "working_with_conditional_format": [36, 313], "working_with_sparklin": [36, 313], "worksheet": [36, 134, 140, 313], "world": [1, 20, 640, 661, 668, 669, 670, 905, 1107, 1201, 1222, 1229, 1230, 1231, 1291, 1294], "wors": [857, 899], "worth": [507, 1100], "worthwhil": [152, 154], "would": [90, 129, 130, 143, 173, 271, 275, 313, 316, 338, 349, 404, 512, 543, 544, 553, 582, 592, 712, 714, 786, 923, 934, 992, 1105, 1159, 1261, 1280, 1285, 1305], "wrap": [74, 123, 382, 481, 543, 786, 965, 1280], "wrap_numer": [382, 786, 965, 1280], "wrapper": [54, 808, 899], "writabl": [31, 33, 37, 38, 39, 40, 41, 253, 271, 313, 1261, 1280], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 179, 313, 386, 559, 786, 833, 855, 899, 905, 974, 1280], "write_ascii_frame_to_stdout": 168, "write_avro": 313, "write_clipboard": [128, 313], "write_csv": [32, 130, 143, 313], "write_databas": 313, "write_delta": 313, "write_excel": 313, "write_ipc": [135, 313], "write_ipc_stream": 313, "write_json": 313, "write_ndjson": [39, 313], "write_parquet": 313, "write_t": [41, 313], "write_to_dataset": [41, 313], "writeabl": [271, 313, 1261, 1280], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 253, 313, 556, 852, 899], "ww": [1302, 1309], "www": 686, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 134, 140, 143, 156, 157, 159, 172, 190, 208, 211, 213, 218, 238, 247, 248, 277, 280, 281, 313, 316, 322, 324, 326, 345, 350, 370, 391, 398, 449, 450, 465, 470, 472, 474, 495, 502, 514, 540, 542, 543, 544, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 581, 587, 595, 596, 597, 601, 629, 632, 665, 687, 688, 693, 696, 703, 705, 707, 710, 711, 716, 722, 723, 725, 736, 746, 747, 750, 752, 755, 760, 765, 770, 776, 786, 829, 835, 856, 858, 865, 899, 904, 905, 935, 968, 980, 1055, 1136, 1163, 1164, 1191, 1194, 1226, 1259, 1263, 1264, 1280, 1285, 1292, 1293, 1296, 1301, 1307, 1309], "x00": [366, 367, 368, 369, 371, 642, 950, 951, 952, 953, 955, 1203], "x00fvalu": [253, 313], "x07": 370, "x1": 370, "x80": 370, "x81": 556, "x82": [253, 313], "x83": [253, 313, 370], "x88": 370, "x8e": 370, "x99": 370, "x_": [452, 786, 1047, 1280], "x_0": [281, 313, 451, 452, 453, 454, 786, 1046, 1047, 1048, 1049, 1280], "x_1": [281, 313, 452, 786, 1047, 1280], "x_2": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "x_i": [452, 786, 1047, 1280], "x_invers": [587, 786], "x_pow_8": 1301, "x_round": 1301, "x_round_1": 1301, "x_squar": [587, 786], "x_t": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "x_uniqu": [564, 786], "x_y": [350, 514], "xa1cagg": 556, "xa1csum": 556, "xa1fcolumncfoolpartition_bi": 556, "xa1fwindow": 556, "xa1gcolumn": [253, 313], "xa4dnamecfoohdatatypeeint64lbit_set": [253, 313], "xa4hfunct": 556, "xb": 370, "xb9neq": 370, "xbd": 370, "xc14": 370, "xd3": 370, "xdist": 1310, "xee": 370, "xf4v": 370, "xf9": 370, "xfb": 370, "xff": [366, 367, 368, 369, 371, 642, 950, 951, 952, 953, 955, 1203], "xi": [647, 1208], "xl": 134, "xlog2": [563, 587, 786], "xlsb": 134, "xlsx": [36, 134, 313], "xlsx2csv": [134, 151], "xlsxwriter": [36, 151, 313], "xor": [379, 786, 963, 1280], "xor_xi": [703, 786], "xx": [10, 48, 50, 163, 183, 260, 313, 812, 899, 905, 1296, 1302, 1309], "xxx": 686, "xy": [48, 50], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 322, 641, 647, 786, 1202, 1208, 1257, 1280], "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 172, 190, 211, 213, 218, 238, 247, 248, 277, 280, 281, 313, 316, 322, 324, 326, 345, 350, 370, 432, 435, 449, 450, 470, 472, 495, 502, 514, 542, 544, 564, 566, 568, 570, 572, 573, 576, 577, 581, 595, 596, 597, 601, 673, 675, 676, 687, 696, 703, 705, 707, 710, 711, 725, 732, 746, 750, 752, 755, 765, 770, 786, 829, 856, 858, 865, 899, 904, 905, 935, 968, 1024, 1027, 1163, 1164, 1234, 1236, 1237, 1280, 1285, 1296, 1302, 1303, 1309], "y_": [451, 452, 453, 454, 786, 1046, 1047, 1048, 1049, 1280], "y_0": [281, 313, 451, 452, 453, 454, 786, 1046, 1047, 1048, 1049, 1280], "y_1": [281, 313], "y_i": [452, 786, 1047, 1280], "y_mul": 687, "y_t": [451, 453, 454, 786, 1046, 1048, 1049, 1280], "y_uniqu": [564, 786], "ya": [663, 1224], "ya29": 145, "year": [133, 144, 204, 219, 245, 260, 283, 313, 404, 416, 417, 426, 427, 430, 443, 444, 602, 605, 607, 609, 611, 613, 616, 618, 620, 714, 726, 727, 728, 729, 730, 731, 773, 774, 786, 825, 830, 848, 899, 905, 992, 1004, 1005, 1018, 1019, 1022, 1035, 1036, 1303], "yellow": [313, 317, 366, 367, 368, 369, 371], "yield": [120, 122, 129, 130, 131, 143, 190, 192, 215, 277, 313, 465, 543, 582, 786, 899, 1045, 1052, 1280], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 175, 192, 195, 204, 215, 216, 219, 223, 234, 238, 245, 246, 247, 248, 260, 267, 270, 276, 277, 278, 280, 299, 313, 316, 380, 381, 404, 423, 424, 426, 429, 432, 435, 455, 461, 481, 507, 535, 543, 544, 582, 587, 594, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 628, 640, 655, 659, 660, 661, 681, 684, 694, 695, 714, 722, 727, 730, 732, 736, 748, 758, 761, 765, 777, 786, 802, 808, 815, 821, 825, 830, 848, 855, 858, 862, 863, 865, 874, 882, 899, 903, 905, 964, 992, 1015, 1016, 1021, 1024, 1027, 1052, 1072, 1100, 1136, 1155, 1161, 1201, 1216, 1220, 1221, 1222, 1242, 1259, 1265, 1280, 1285, 1290, 1295, 1310], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 216, 223, 247, 248, 251, 267, 287, 292, 299, 313, 316, 409, 452, 467, 544, 648, 673, 675, 676, 683, 748, 786, 835, 850, 869, 875, 882, 899, 997, 1047, 1136, 1209, 1234, 1236, 1237, 1244, 1280, 1285, 1310], "yy": [10, 48, 50, 163, 183, 260, 313, 812, 899, 905, 1296, 1302, 1309], "yyi": 686, "yyyi": [36, 313], "yz": [48, 50], "z": [36, 55, 76, 123, 157, 190, 211, 213, 218, 247, 248, 277, 280, 281, 313, 322, 324, 326, 474, 502, 544, 566, 568, 570, 572, 573, 581, 595, 596, 597, 640, 647, 649, 661, 673, 676, 705, 707, 725, 750, 752, 755, 761, 765, 770, 786, 829, 856, 858, 865, 899, 904, 905, 1055, 1163, 1164, 1201, 1208, 1210, 1222, 1234, 1237, 1280, 1292, 1296, 1307, 1309], "z_0": [281, 313], "z_1": [281, 313], "zap": 905, "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 172, 194, 204, 216, 246, 260, 265, 271, 272, 313, 460, 535, 540, 624, 632, 683, 696, 786, 805, 820, 825, 899, 973, 1055, 1128, 1194, 1244, 1255, 1261, 1262, 1280, 1301, 1307], "zero_copy_onli": [1261, 1280], "zfill": [658, 703, 786, 1219], "zip": 1310, "zip_with": [197, 313, 1280], "zone": [62, 159, 160, 163, 405, 409, 429, 452, 676, 729, 730, 731, 786, 905, 993, 997, 1021, 1047, 1237, 1280], "zoneinfo": [62, 905], "zoom": [36, 313], "zstd": [37, 38, 41, 43, 45, 313, 899], "zz": [163, 183, 260, 313, 812, 899, 1296, 1302, 1309], "zzz": 686, "\u03bc": [123, 176, 204, 216, 245, 247, 248, 267, 283, 313, 405, 406, 408, 409, 410, 411, 413, 415, 418, 420, 421, 423, 424, 425, 426, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 602, 605, 607, 609, 611, 613, 616, 618, 620, 673, 676, 729, 730, 731, 732, 738, 786, 804, 825, 848, 899, 905, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1008, 1009, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1234, 1237, 1302], "\u0441\u0438\u043d\u0438\u0439": 1302, "\u0967\u096f\u096f\u096f": 905, "\u0968\u0966\u096d\u096d": 905, "\u4eac\u90fd": 905, "\u5927\u962a": 905, "\u6771\u4eac": [655, 656, 905, 1216, 1217], "\u90fd\u5e02": 905, "\ud835\udf0b": 1301}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1296, 1308], "IF": 1299, "__array__": [170, 907], "__arrow_c_stream__": [171, 908], "__dataframe__": 172, "__getitem__": [173, 909], "__iter__": 291, "ab": [321, 910, 1301], "aco": 1304, "acosd": 1304, "add": 322, "add_business_dai": [404, 992], "agg": [292, 875], "agg_group": 323, "aggreg": [169, 320, 800, 906, 1297], "alia": [324, 911], "alias": [1297, 1301, 1302], "align_fram": 47, "all": [293, 325, 341, 498, 704, 876, 912, 926, 1091, 1308], "all_horizont": 705, "and_": 326, "ani": [327, 342, 499, 706, 913, 927, 1092], "any_horizont": 707, "api": [1, 48, 49, 50, 51, 798, 1307], "append": [328, 914], "approx_n_uniqu": [174, 329, 708, 801], "arang": 709, "arcco": [330, 915], "arccosh": [331, 916], "arcsin": [332, 917], "arcsinh": [333, 918], "arctan": [334, 919], "arctan2": 710, "arctan2d": 711, "arctanh": [335, 920], "arg_max": [336, 343, 500, 921, 928, 1093], "arg_min": [337, 344, 501, 922, 929, 1094], "arg_sort": [338, 923], "arg_sort_bi": 712, "arg_tru": [339, 924], "arg_uniqu": [340, 925], "arg_wher": 713, "arr": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949], "arrai": [56, 778, 1272, 1298], "array_agg": 1298, "array_contain": 1298, "array_get": 1298, "array_length": 1298, "array_low": 1298, "array_mean": 1298, "array_revers": 1298, "array_sum": 1298, "array_to_str": 1298, "array_uniqu": 1298, "array_upp": 1298, "asin": 1304, "asind": 1304, "assert": 1310, "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "atan": 1304, "atan2": 1304, "atan2d": 1304, "atand": 1304, "attribut": [308, 894, 1273], "avail": 1, "avg": 1297, "avro": 799, "backward_fil": 365, "base_utc_offset": [405, 993], "batched_read": 125, "batchedcsvread": 125, "bin": [366, 367, 368, 369, 370, 371, 950, 951, 952, 953, 954, 955], "binari": [57, 779, 792, 1274], "bit_length": 1302, "bitwise_and": [372, 956], "bitwise_count_on": [373, 957], "bitwise_count_zero": [374, 958], "bitwise_leading_on": [375, 959], "bitwise_or": [376, 960], "bitwise_trailing_on": [377, 961], "bitwise_trailing_zero": [378, 962], "bitwise_xor": [379, 963], "boolean": [58, 780, 1275], "bottom_k": [175, 380, 802, 964], "bottom_k_bi": 381, "build_info": 52, "business_day_count": 714, "cach": 803, "cancel": 891, "cast": [176, 382, 804, 965, 1305], "cast_time_unit": [406, 994], "cat": [383, 966, 967, 968, 969], "categor": 59, "categori": [781, 1276], "categoricalremappingwarn": 86, "cbrt": [384, 970, 1301], "ceil": [385, 971, 1301], "centuri": [407, 995], "chronoformatwarn": 87, "chunk_length": 972, "claus": 1296, "clear": [177, 805, 973], "clip": [386, 974], "clipboard": 799, "clone": [178, 806, 975], "co": [387, 976, 1304], "coalesc": [715, 1299], "col": 782, "collect": 807, "collect_al": 53, "collect_all_async": 54, "collect_async": 808, "collect_schema": [179, 809], "column": [156, 157, 180, 783, 810], "columnnotfounderror": 88, "combin": [408, 996], "comparison": [792, 1284], "comput": [309, 784, 1277], "computeerror": 89, "concat": [55, 502, 638, 1095, 1199, 1302], "concat_list": 716, "concat_str": 717, "concat_w": 1302, "condit": 1299, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "conjunct": 792, "contain": [345, 366, 503, 639, 930, 950, 1096, 1200], "contains_ani": [640, 1201], "context": 168, "convers": 797, "convert_time_zon": [409, 997], "corr": [181, 718], "cosd": 1304, "cosh": [388, 977], "cot": [389, 978, 1304], "cotd": 1304, "count": [182, 294, 390, 719, 811, 877, 979, 1297], "count_match": [346, 504, 641, 931, 1097, 1202], "cov": 720, "creat": 1309, "create_list_strategi": 158, "csv": [125, 799], "cum_count": [391, 721, 980], "cum_fold": 722, "cum_max": [392, 981], "cum_min": [393, 982], "cum_prod": [394, 983], "cum_reduc": 723, "cum_sum": [395, 724, 984], "cum_sum_horizont": 725, "cumulative_ev": [396, 985], "customufuncwarn": 90, "cut": [397, 986], "dai": [412, 1000], "data": 318, "databas": 799, "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313], "dataorientationwarn": 91, "dataset": 799, "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 318], "date": [61, 410, 726, 998, 1302], "date_part": 1303, "date_rang": [727, 728], "datetim": [62, 411, 729, 999], "datetime_rang": [730, 731], "decim": 63, "decod": [367, 642, 951, 1203], "decor": 168, "degre": [398, 1304], "delta": 799, "describ": [183, 812, 987], "descript": [310, 895, 1278], "deseri": [184, 399, 813], "diff": [400, 505, 988, 1098], "disable_string_cach": 84, "distinct": 1296, "div": 1301, "document": 1307, "dot": [401, 989], "drop": [185, 814, 1309], "drop_in_plac": 186, "drop_nan": [402, 990], "drop_nul": [187, 403, 506, 815, 991, 1099], "dst_offset": [413, 1001], "dt": [404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "dtype": [160, 188, 816, 1040], "duplicateerror": 92, "durat": [64, 732], "element": 733, "enable_string_cach": 85, "encod": [368, 643, 952, 1204], "ends_with": [369, 644, 953, 1205, 1302], "engine_config": 874, "entropi": [448, 1041], "enum": 65, "epoch": [414, 1002], "eq": [449, 548, 1042], "eq_miss": [450, 1043], "equal": [189, 1044], "error": 319, "estimated_s": [190, 1045], "eval": [507, 1100], "ewm_mean": [451, 1046], "ewm_mean_bi": [452, 1047], "ewm_std": [453, 1048], "ewm_var": [454, 1049], "exampl": [1, 905, 1310], "excel": 799, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 319, 1308], "exclud": [455, 734], "execut": 1289, "execute_glob": 1290, "exp": [456, 1050, 1301], "explain": [817, 1309], "explod": [191, 347, 457, 508, 645, 818, 932, 1051, 1101, 1206], "export": [311, 1279], "expr": [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703], "express": [786, 1307], "extend": [1, 192, 1052], "extend_const": [458, 1053], "extract": [646, 1207, 1303], "extract_al": [647, 1208], "extract_group": [648, 1209], "extract_mani": [649, 1210], "feather": 799, "fetch": 892, "fetch_block": 893, "field": [684, 1245, 1246], "fill_nan": [193, 459, 819, 1054], "fill_nul": [194, 460, 820, 1055], "filter": [195, 461, 821, 1056], "find": [650, 1211], "first": [295, 348, 462, 509, 735, 822, 878, 933, 1102, 1297], "flag": [196, 1057], "flatten": 463, "float32": 66, "float64": 67, "floor": [464, 1058, 1301], "floordiv": 465, "fold": [197, 736], "format": 737, "forward_fil": 466, "frame": 1307, "from": 1296, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_epoch": 738, "from_json": 467, "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "function": [1, 785, 797, 905, 1300], "gather": [468, 510, 1059, 1103], "gather_everi": [198, 469, 511, 823, 1060, 1104], "ge": [470, 1061], "get": [349, 471, 512, 934, 1105], "get_categori": [383, 966], "get_chunk": 1062, "get_column": [199, 201], "get_column_index": 200, "get_index_typ": 124, "glimps": 202, "global": 1307, "gpuengin": [874, 896], "greatest": 1299, "group": [739, 1296], "group_bi": [203, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 824, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "group_by_dynam": [204, 825], "groupbi": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 897], "gt": [472, 1063], "has_multiple_output": 549, "has_nul": [473, 1064], "has_valid": 1065, "hash": [474, 1066], "hash_row": 205, "have": 1296, "head": [206, 296, 475, 513, 651, 740, 826, 879, 1067, 1106, 1212], "height": 207, "helper": 1310, "hist": [476, 1068], "hour": [415, 1003], "hstack": 208, "iceberg": 799, "ifnul": 1299, "implod": [477, 741, 1069], "import": 905, "in_process": [891, 892, 893], "index": 0, "initcap": 1302, "inprocessqueri": [891, 892, 893, 898], "input": 799, "insert_column": 209, "inspect": [478, 827], "int16": 68, "int32": 69, "int64": 70, "int8": 71, "int_rang": [742, 743], "interfac": 1306, "interpol": [210, 479, 828, 1070], "interpolate_bi": [480, 1071], "intersect": 1308, "introduct": 1307, "invalidoperationerror": 93, "io": 125, "ipc": 799, "is_between": [481, 1072], "is_column_select": 550, "is_dupl": [211, 482, 1073], "is_empti": [212, 1074], "is_finit": [483, 1075], "is_first_distinct": [484, 1076], "is_in": [485, 1077], "is_infinit": [486, 1078], "is_last_distinct": [487, 1079], "is_leap_year": [416, 1004], "is_loc": 967, "is_nan": [488, 1080], "is_not_nan": [489, 1081], "is_not_nul": [490, 1082], "is_nul": [491, 1083], "is_regex_project": 551, "is_sort": 1084, "is_uniqu": [213, 492, 1085], "iso_year": [417, 1005], "item": [214, 1086], "iter_column": 215, "iter_row": 216, "iter_slic": 217, "join": [218, 350, 514, 652, 829, 935, 1107, 1213, 1296], "join_asof": [219, 830], "join_wher": [220, 831], "json": 799, "json_decod": [653, 1214], "json_encod": [685, 1247], "json_norm": 126, "json_path_match": [654, 1215], "keep": 565, "kurtosi": [493, 1087], "lake": 799, "last": [297, 351, 494, 515, 744, 832, 880, 936, 1108, 1297], "lazi": [221, 833], "lazyfram": [42, 43, 44, 45, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899], "lazygroupbi": [875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "le": [495, 1088], "least": 1299, "left": 1302, "len": [298, 496, 516, 745, 881, 1089, 1109], "len_byt": [655, 1216], "len_char": [656, 1217], "length": 1302, "limit": [222, 497, 834, 1090, 1296], "list": [72, 161, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 787, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1281], "lit": 746, "ln": 1301, "load": [2, 168], "load_from_fil": 3, "load_profil": 162, "log": [538, 1131, 1301], "log10": [539, 1132, 1301], "log1p": [540, 1133, 1301], "log2": 1301, "lower": 1302, "lower_bound": [541, 1134], "lt": [542, 1135], "ltrim": 1302, "manag": 168, "manipul": [315, 790, 901, 1283], "map": 566, "map_batch": [543, 747, 835], "map_el": [544, 1136], "map_field": 567, "map_group": [299, 748, 882], "map_row": 223, "mapwithoutreturndtypewarn": 94, "math": 1301, "max": [224, 300, 352, 517, 545, 749, 836, 883, 937, 1006, 1110, 1137, 1297], "max_horizont": [225, 750], "mean": [226, 301, 518, 546, 751, 837, 884, 1007, 1111, 1138], "mean_horizont": [227, 752], "median": [228, 302, 353, 519, 547, 753, 838, 885, 938, 1008, 1112, 1139, 1297], "melt": [229, 839], "merge_sort": [230, 840], "meta": [548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 788], "metadata": 902, "method": 1307, "microsecond": [418, 1009], "millennium": [419, 1010], "millisecond": [420, 1011], "min": [231, 303, 354, 520, 560, 754, 841, 886, 939, 1012, 1113, 1140, 1297], "min_horizont": [232, 755], "minut": [421, 1013], "miscellan": [314, 789, 797, 900, 1282], "mod": [561, 1301], "mode": [562, 1141], "moduleupgraderequirederror": 95, "month": [422, 1014], "month_end": [423, 1015], "month_start": [424, 1016], "mul": 563, "n_chunk": [233, 1142], "n_uniqu": [234, 304, 355, 521, 564, 756, 887, 940, 1114, 1143], "name": [565, 566, 567, 568, 569, 570, 571, 572, 573, 783, 791, 1144, 1308], "nan_max": [574, 1145], "nan_min": [575, 1146], "nanosecond": [425, 1017], "ne": [552, 576, 1147], "ne_miss": [577, 1148], "neg": 578, "nest": 318, "new": 1, "new_from_index": 1149, "next_batch": 125, "nodataerror": 96, "norowsreturnederror": 97, "not_": [579, 1150], "nth": 757, "null": 73, "null_count": [235, 580, 842, 1151], "nullif": 1299, "numer": [318, 792, 1284], "object": 74, "octet_length": 1302, "od": 799, "offset": 1296, "offset_bi": [426, 1018], "ones": 758, "oper": [792, 905, 1284, 1308, 1309], "option": 168, "or_": 581, "order": 1296, "ordinal_dai": [427, 1019], "other": 318, "outofboundserror": 98, "output": 799, "output_nam": 553, "over": 582, "pad_end": [657, 1218], "pad_start": [658, 1219], "panic": 319, "panicexcept": 99, "parallel": 797, "parametercollisionerror": 100, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1310], "parquet": 799, "partition_bi": 236, "pct_chang": [583, 1152], "peak_max": [584, 1153], "peak_min": [585, 1154], "performancewarn": 101, "pi": 1301, "pipe": [237, 586, 843], "pivot": 238, "plot": [316, 1285], "plugin": 903, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1310], "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "pop": 554, "pow": [587, 1155, 1301], "prefix": 568, "prefix_field": 569, "product": [239, 588, 1156], "profil": [844, 1310], "provid": 1, "pyarrow": 799, "python": [798, 1307], "qcut": [589, 1157], "quantil": [240, 305, 590, 759, 845, 888, 1158], "quarter": [428, 1020], "queri": 1307, "radian": [591, 1304], "random": 797, "rank": [592, 1159], "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "rechunk": [241, 593, 1160], "reduc": 760, "refer": 798, "regexp_lik": 1302, "regist": 1291, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_glob": 1292, "register_lazyframe_namespac": 50, "register_mani": 1293, "register_series_namespac": 51, "registr": 1, "reinterpret": [594, 1161], "renam": [242, 846, 1162], "rename_field": [686, 1248], "repeat": 761, "repeat_bi": 595, "replac": [596, 659, 1163, 1220, 1302], "replace_al": [660, 1221], "replace_column": 243, "replace_mani": [661, 1222], "replace_strict": [597, 1164], "replace_time_zon": [429, 1021], "reshap": [598, 1165], "restore_default": 4, "revers": [244, 356, 522, 599, 662, 847, 941, 1115, 1166, 1223, 1302], "right": 1302, "rle": [600, 1167], "rle_id": [601, 1168], "roll": [245, 602, 848], "rolling_corr": 762, "rolling_cov": 763, "rolling_map": [603, 1169], "rolling_max": [604, 1170], "rolling_max_bi": 605, "rolling_mean": [606, 1171], "rolling_mean_bi": 607, "rolling_median": [608, 1172], "rolling_median_bi": 609, "rolling_min": [610, 1173], "rolling_min_bi": 611, "rolling_quantil": [612, 1174], "rolling_quantile_bi": 613, "rolling_skew": [614, 1175], "rolling_std": [615, 1176], "rolling_std_bi": 616, "rolling_sum": [617, 1177], "rolling_sum_bi": 618, "rolling_var": [619, 1178], "rolling_var_bi": 620, "root_nam": 555, "round": [430, 621, 1022, 1179, 1301], "round_sig_fig": [622, 1180], "row": [246, 247], "rows_by_kei": 248, "rowserror": 105, "rtrim": 1302, "sampl": [249, 523, 623, 1116, 1181], "save": [5, 168], "save_to_fil": 6, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "scatter": 1182, "schema": [250, 849, 904, 1249], "schemaerror": 108, "schemafieldnotfounderror": 109, "search_sort": [624, 1183], "second": [431, 1023], "select": [251, 315, 764, 790, 850, 901, 1283, 1296], "select_seq": [252, 851], "selector": 905, "seri": [163, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1280], "serial": [253, 314, 556, 852, 900], "set": [905, 1184, 1308], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [524, 1117], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [525, 1118], "set_profil": 164, "set_random_se": 150, "set_sort": [254, 625, 853, 1185], "set_streaming_chunk_s": 14, "set_symmetric_differ": [526, 1119], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [527, 1120], "set_verbos": 29, "shape": [255, 1186], "shapeerror": 110, "shift": [256, 357, 528, 626, 854, 942, 1121, 1187], "show": 1309, "show_graph": 855, "show_vers": 151, "shrink_dtyp": [627, 1188], "shrink_to_fit": [257, 1189], "shuffl": [628, 1190], "sign": [629, 1191, 1301], "sin": [630, 1192, 1304], "sind": 1304, "sinh": [631, 1193], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "size": [370, 954], "skew": [632, 1194], "slice": [258, 529, 633, 663, 856, 1122, 1195, 1224], "sort": [259, 358, 530, 634, 857, 943, 1123, 1196], "sort_bi": 635, "split": [664, 1225], "split_exact": [665, 1226], "splitn": [666, 1227], "sql": [260, 765, 858, 1296, 1300, 1306, 1307], "sql_expr": 766, "sqlcontext": [1289, 1290, 1291, 1292, 1293, 1294, 1295, 1307], "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "sqrt": [636, 1197, 1301], "starts_with": [371, 667, 955, 1228, 1302], "state": [30, 168], "std": [261, 359, 531, 637, 767, 859, 944, 1124, 1198], "stddev": 1297, "str": [638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244], "strategi": 1310, "strftime": [432, 1024, 1303], "string": [75, 318, 793, 1286, 1302], "stringcach": [46, 797], "stringcachemismatcherror": 111, "strip_char": [668, 1229], "strip_chars_end": [669, 1230], "strip_chars_start": [670, 1231], "strip_prefix": [671, 1232], "strip_suffix": [672, 1233], "strpo": 1302, "strptime": [673, 1234, 1302], "struct": [76, 684, 685, 686, 687, 768, 794, 1245, 1246, 1247, 1248, 1249, 1250, 1287], "structfieldnotfounderror": 112, "style": 317, "sub": 688, "substr": 1302, "suffix": 570, "suffix_field": 571, "sum": [262, 306, 360, 532, 689, 769, 860, 889, 945, 1125, 1251, 1297], "sum_horizont": [263, 770], "tabl": [1294, 1309], "tail": [264, 307, 533, 674, 690, 771, 861, 890, 1126, 1235, 1252], "tan": [691, 1253, 1304], "tand": 1304, "tanh": [692, 1254], "tempor": [318, 795, 1288, 1303], "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1310], "thread_pool_s": 165, "threadpool_s": 166, "time": [77, 433, 772, 1025], "time_rang": [773, 774], "timestamp": [434, 1026, 1302], "to_arrai": [534, 1127], "to_arrow": [265, 1255], "to_dat": [675, 1236], "to_datetim": [676, 1237], "to_decim": [677, 1238], "to_dict": [266, 267], "to_dummi": [268, 1256], "to_fram": 1257, "to_init_repr": [269, 1258], "to_integ": [678, 1239], "to_jax": [270, 1259], "to_list": [361, 946, 1260], "to_loc": 968, "to_lowercas": [572, 679, 1240], "to_numpi": [271, 1261], "to_panda": [272, 1262], "to_phys": [693, 1263], "to_seri": 273, "to_str": [435, 1027], "to_struct": [274, 362, 535, 947, 1128], "to_tim": [680, 1241], "to_titlecas": [681, 1242], "to_torch": [275, 1264], "to_uppercas": [573, 682, 1243], "toomanyrowsreturnederror": 113, "top_k": [276, 694, 862, 1265], "top_k_bi": 695, "total_dai": [436, 1028], "total_hour": [437, 1029], "total_microsecond": [438, 1030], "total_millisecond": [439, 1031], "total_minut": [440, 1032], "total_nanosecond": [441, 1033], "total_second": [442, 1034], "transpos": 277, "tree_format": 557, "trigonometri": 1304, "truediv": 696, "truncat": [443, 1035, 1309], "try_cast": 1305, "type": [318, 1305], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "undo_alias": 558, "union": 1308, "uniqu": [278, 363, 536, 697, 863, 948, 1129, 1266], "unique_count": [698, 1267], "unknown": 82, "unnest": [279, 864, 1250, 1298, 1309], "unpivot": [280, 865], "unregist": 1295, "unstablewarn": 114, "unstack": 281, "unsuitablesqlerror": 115, "updat": [282, 866], "upper": 1302, "upper_bound": [699, 1268], "upsampl": 283, "us": 168, "uses_lexical_ord": 969, "using_string_cach": 167, "utf8": 83, "value_count": [700, 1269], "var": [284, 364, 537, 701, 775, 867, 949, 1130, 1270], "varianc": 1297, "vstack": 285, "warn": 319, "week": [444, 1036], "weekdai": [445, 1037], "when": 776, "where": [702, 1296], "width": [286, 868], "window": 796, "with_column": [287, 869], "with_columns_seq": [288, 870], "with_context": 871, "with_field": 687, "with_row_count": [289, 872], "with_row_index": [290, 873], "with_time_unit": [446, 1038], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 559], "write_ndjson": 40, "write_parquet": 41, "xor": 703, "year": [447, 1039], "zero": 777, "zfill": [683, 1244], "zip_with": 1271}})